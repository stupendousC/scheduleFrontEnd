{"version":3,"sources":["components/Helpers.js","components/LoginBanner.js","components/Footer.js","components/AdminDash_CalendarDay.js","components/AdminDash_NewShift.js","components/AdminDash_CalendarTab.js","components/AdminDash_ShiftsTable.js","components/ToastUndo.js","components/AdminDash_PeopleTable.js","components/ErrorGeneral.js","components/AdminDash.js","components/EmployeeDash_CalendarDay.js","components/EmployeeDash_CalendarTab.js","components/EmployeeDash_UnavailDays.js","components/EmployeeDash_Info.js","components/EmployeeDash_ShiftsTable.js","components/EmployeeDash.js","components/MessageComponent.js","components/Employee_TextedLink.js","components/Homepage.js","App.js","serviceWorker.js","index.js","images/redCrossFlag.svg","images/SPPbanner2.png","images/alarmClock.svg","images/stopwatch.svg","images/warning.svg","images/questionBubble.svg","images/comboLock.svg","images/hourglass.svg","images/thumbsUp.svg","images/twopeopleinteract.svg","images/twopeople.svg"],"names":["makeHeader","sessionStorage","getItem","convertToPST","dateStr","newTime","Date","convertDateString","timeObj","year","getFullYear","month","getMonth","day","getDate","toString","getWeekday","timeStr_or_timeObj","weekdayArray","Array","getDay","formatTime","timeStr","hours","parseInt","slice","formatDate","arg_date","date","toLocaleString","getUTCDate","sortUnavailsByDate","listOfUnavails","sort","a","b","day_off","sortShiftsByDate","listOfShifts","shift_date","dateInThePast","isPhoneValid","phoneStr","length","canStringBeInteger","areaCode","phone3","phone4","areStringsInListAllIntegers","firstDigit","str","nonZeroStr","list_of_strings","convertToValidPhoneNumberIfAllNums","convertToValidPhoneNumberIfInParens","isEmailValid","email","test","String","toLowerCase","sortById","listOfObjs","id","LoginBanner","authenticatedRole","googleAuthCallback","demoLoginCallback","logoutCallback","useState","uuid","setUuid","showModal","setShowModal","handleCloseModal","handleShowModal","responseGoogle","response","googleId","profileObj","setItem","responseGoogleFail","console","log","showDemoLogins","loginAs","demoRole","onClick","showGoogleLogin","className","clientId","process","buttonText","onSuccess","onFailure","cookiePolicy","to","src","bannerLogo","alt","name","showDashWithLogout","Modal","show","onHide","Header","closeButton","Title","Body","type","onChange","e","target","value","placeholder","preventDefault","loginParams","headers","axios","post","then","roleDB","Object","keys","data","toast","error","catch","message","Homepage","redCrossFlag","href","rel","CalendarDay","basicShiftsInfo","showColorBasedOnDay","map","shift","key","client","employee","start_time","end_time","NewShift","daySpotlight","allClients","availEmpsOfDay","updateAllShiftsCallback","textEmployeesCallback","setClientId","startTime","setStartTime","endTime","setEndTime","isFormValid","onTimeChange","onSubmit","clientObj","find","jsonForNewShiftAPI","newShift","defaultValue","rowsOfMsgs","errorMsgs","push","genErrorMsgs","msg","i","showErrorMsgs","disabled","CalendarTab","allShifts","today","setDaySpotlight","shiftsOfDay","setShiftsOfDay","setAvailEmpsOfDay","getAndSetShiftsOfDay","targetDateStr","getAndSetAvailEmpsByDate","URL_getAllAvailEmpsByDate","get","showAccordionHeaderColor","showRowsOfEmps","emp","phone","tileContent","view","tileCaption","tileClassName","targetDate","Accordion","Toggle","eventKey","Collapse","ShiftsTable","setPastVsCurrentShifts","currentShifts","pastShifts","props","setState","showShiftsTable","timeCategory","primaryColorClass","secondaryColorClass","showEmpNameOrButton","showWholeShiftCard","clientInfo","address","showEmployeeCardSection","showEmpInCard","showAvailEmpsInCard","colorClass","employeeInfo","state","availEmployeesByShiftId","availEmpList","empList","from","numEmps","rowsOfEmps","allUnstaffedShifts","this","filter","axiosGetFcns","unstaffedShift","URL","all","spread","responses","shiftId","errors","React","Component","ToastUndo","undo","closeToast","PeopleTable","personType","peopleList","URL_endpoint","setStateKey","updatePeopleListCB","personSpotlight","setPersonSpotlight","updateSpotlightBool","setUpdateSpotlightBool","updatedPerson","setUpdatedPerson","active","newPerson","addFormErrorMsgs","setAddFormErrorMsgs","updateFormErrorMsgs","setUpdateFormErrorMsgs","personInPurgatory","uuidv4","require","showPersonSpotlight","person","onUpdateFieldChange","sendUpdateAPI","onAddFieldChange","sendAddAPI","success","newOrUpdatedPerson","setAddOrUpdatedFormMsgs","newReadablePhone","correctedPhoneNum","addOrUpdatedFormMsgs","toggleAsPersonSpotlight","selectedPerson","read","update","copiedPerson","JSON","parse","stringify","put","deactivate","onClose","sendDeleteAPIOrNot","delete","toUpperCase","showAddSection","showAll","ErrorGeneral","icon","alarmClock","stopwatch","warning","lock","questionBubble","ALL_EMPS","ALL_CLIENTS","ALL_ADMINS","ALL_SHIFTS","AdminDash","getAllEmpsDB","getAllClientsDB","getAllAdminsDB","getAllShiftsDB","getAllUnavailsDB","setShowCategory","chosen","showChosenCategory","showCalendar","showAllAdmins","showAllEmployees","showAllClients","showAllShifts","updateAllShifts","textEmployees","allEmployees","updatePeopleList","allAdmins","sortedShifts","shiftObj","textableEmployees","info","allAxiosPostReqs","personalizedMsg","jsonForTextAPI","longStr","numberCharsToShow","fullErrorMsg","badPhone","config","phoneNumber","unreachableEmp","reason","includes","allUnavails","allShiftsSorted","Navbar","bg","variant","sticky","Brand","Nav","Link","shiftsToday","shiftsOfDaySpotlight","availStatus","toggleAvailCallback","showShifts","shiftsInArray","inThePast","showAgendaOrOptions","empUnavails","empShifts","availStatusOfDay","updateStateForCalendarDayCB","unstaffedShifts","isDateInEmpUnavails","isDateInEmpShifts","UnavailDays","sortedUnavails","freeToWorkCallback","unavail","Info","updateInfoCallback","setPerson","setErrorMsgs","onFieldChange","EmployeeDash_ShiftsTable","sortedOwnShifts","sortedUnstaffedShifts","takeShiftCallback","ownActiveShifts","ownPastShifts","cloneAllOwnShifts","showOwnShifts","customClassName","showUnstaffedShifts","takeButton","showTakeShiftSection","bookedElsewhere","possibleDate","isEmpBookedElsewhere","offThatDay","isEmpOffThatDay","removeUnavail","unavailObj","propTypes","PropTypes","arrayOf","object","func","isRequired","EmployeeDash","getEmpInfo","EMP_DASH","getEmpShifts","getEmpUnavails","getUnstaffedShifts","showAllUnavails","showAllInfo","empInfo","updateInfo","unstaffed","ownShift","freeToWork","takeShift","updateStateForCalendarDay","toggleAvail","canWorkBool","canTheyWorkThisDay","shiftsOfThatDay","unavails_list","availBoolean","latestEmpUnavails","array1","array2","sortedArray1","sortedArray2","_","isEqual","deepCompareTwoSchedArrayss","updateLatestUnstaffedShifts","newEmpInfo","MessageComponent","hourglass","thumbsUp","twoPeopleInteract","LinkTextedToEmployee","match","URL_ENDPOINT","params","shiftOrMsg","setShiftOrMsg","twoPeople","App","login","googleAccessToken","entries","authenticatedRoleDB","usernameDB","values","databaseId","username","greetToast","demoLogin","greetingBasedOnHour","hourNow","getHours","logout","clear","role","component","path","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ec20c41d.chunk.js","sourcesContent":["import _ from 'underscore';\n\nexport const makeHeader = () => {\n  const googleId = sessionStorage.getItem('googleId');\n  const googleAccessToken = sessionStorage.getItem('googleAccessToken');\n  return {\"googleId\": googleId, \"googleAccessToken\": googleAccessToken};\n}\n\nexport const convertToPST = (dateStr) => {\n  // UTC to PST conversion:\n  // takes a dateStr of 'YYYY-MM-DD' in UTC time and convert it to a timeStr in Pacific Standard Time\n  // PST is ahead of UTC by 8 hours, so this method will return the PST's actual timeStr, if the given arg timeStr falls in that 8 hr gap wacky zone\n  // Date('2020-1-1') returns UTC of 12/30 midnight, BOO!!!\n  // Date('2020-1-1 00:00-0800') returns correct 1/1, YES!!!\n  // obviously I\"m assuming the end user lives in PST...\n\n  const newStr = dateStr + \" 00:00-0800\";\n  const newTime = new Date(newStr);\n  return new Date(newTime);\n}\n\nexport const convertDateString = (timeObj) => {\n  // For data comparison purposes, between JS time obj and postgres's date column format\n  // Takes time obj (such as from JS), converts it to \"YYYY-MM-DD\"\n  // \"YYYY-MM-DD\" is the shift_date format that comes from backend's postgres db\n  const year = timeObj.getFullYear();\n  let month = timeObj.getMonth() + 1;\n  let day = timeObj.getDate();\n\n  if (month < 10) { month = \"0\" + month.toString() }\n  if (day < 10) { day = \"0\" + day.toString() }\n\n  return `${year}-${month}-${day}`;\n}\n\nexport const getWeekday = (timeStr_or_timeObj) => {\n  // takes in either a timeStr like \"2020-02-28\" or a Date() object,\n  // returns an abbrev'd weekday string\n\n  let timeObj;\n  if (typeof(timeStr_or_timeObj) === \"string\") {\n    timeObj = convertToPST(timeStr_or_timeObj);\n  } else {\n    timeObj = timeStr_or_timeObj;\n  }\n  \n  let weekdayArray = new Array(7);\n  weekdayArray[0] = \"Sun\";\n  weekdayArray[1] = \"Mon\";\n  weekdayArray[2] = \"Tues\";\n  weekdayArray[3] = \"Wed\";\n  weekdayArray[4] = \"Thurs\";\n  weekdayArray[5] = \"Fri\";\n  weekdayArray[6] = \"Sat\";\n\n  return weekdayArray[timeObj.getDay()];\n}\n\nexport const formatTime = (timeStr) => {\n  // takes \"HH:MM:SS\" and turns it into \"HH:MM AM/PM\"\n  let hours = parseInt(timeStr.slice(0,2));\n  if (hours < 12) {\n    if (timeStr[0] === \"0\") {\n      return (timeStr.slice(1,5)+\" A.M.\");\n    } else {\n      return (timeStr.slice(0,5)+\" A.M.\");\n    }\n  } else {\n    hours -= 12;\n    return (hours+timeStr.slice(2,5)+\" P.M.\");\n  }\n}\n\nexport const formatDate = (arg_date) => {\n  // For visual display purposes\n  // Takes a date string like \"YYYY-MM-DD\" and converts to human-friendly \"Jan 15, 2020\"\n  const date = convertToPST(arg_date);\n  const month = date.toLocaleString('default', { month: 'short' });\n  const day = date.getUTCDate();\n  const year = date.getFullYear();\n\n  return `${month} ${day}, ${year}`\n}\n\nexport const sortUnavailsByDate = (listOfUnavails) => {\n  const sorted = listOfUnavails.sort((a,b) => {\n    return (b.day_off < a.day_off ? 1:-1);\n  });\n  return sorted;\n}\n\nexport const sortShiftsByDate = (listOfShifts) => {\n  const sorted = listOfShifts.sort((a,b) => {\n    return (b.shift_date <= a.shift_date ? 1:-1);\n  });\n  return sorted;\n}\n\nexport const dateInThePast = (dateStr) => {\n  const todayStr = convertDateString(new Date());\n  return todayStr > dateStr;\n}\n\nexport const isPhoneValid = (phoneStr) => {\n  // returns True if phoneStr fits any of these acceptable formats for Twilio texting: \n    // \"4251112222\"       // Length = 10\n    // \"14251112222\"      // Length = 11\n    // \"425-111-2222\"     // Length = 12\n    // \"1-425-111-2222\"   // Length = 14\n  // else returns False, including \"(425)111-2222\", so will have convertToValidPhoneNumberIfInParens() for that, to minimize user interruption\n\n  if (!phoneStr) return false;\n  if (phoneStr.length < 10 || phoneStr.length > 14) return false;\n\n  if (phoneStr.length === 10 || phoneStr.length === 11) return canStringBeInteger(phoneStr);\n  \n  if (phoneStr.length === 12) {\n    // check the non-numerical parts\n    if ((phoneStr[3] !== \"-\") || (phoneStr[7] !== \"-\")) return false;\n\n    // check the number parts\n    const areaCode = phoneStr.slice(0,3);\n    const phone3 = phoneStr.slice(4,7);\n    const phone4 = phoneStr.slice(8,12);\n    const areNumberPartsOK = areStringsInListAllIntegers([areaCode, phone3, phone4]);\n    return areNumberPartsOK;\n  }\n\n  if (phoneStr.length === 14) {\n    // check the non-numerical parts\n    if ((phoneStr[1] !== \"-\") || (phoneStr[5] !== \"-\") || (phoneStr[9] !== \"-\")) return false;\n\n    // check the number parts\n    const firstDigit = phoneStr[0];\n    const areaCode = phoneStr.slice(2,5);\n    const phone3 = phoneStr.slice(6,9);\n    const phone4 = phoneStr.slice(10,14);\n    const areNumberPartsOK = areStringsInListAllIntegers([firstDigit, areaCode, phone3, phone4]);\n    return areNumberPartsOK;\n  }\n}\n\n// for use by isPhoneValid()\nconst canStringBeInteger = (str) => {\n  // if str has leading zeros, get rid of them\n  let nonZeroStr = str;\n  while (nonZeroStr[0] === \"0\" && nonZeroStr.length > 1) {\n    nonZeroStr = nonZeroStr.slice(1,nonZeroStr.length);\n  }\n\n  const asInt = parseInt(str);\n  const backToStr = asInt.toString();\n  return((nonZeroStr === backToStr) ? true:false);\n}\n\n// for use by isPhoneValid()\nconst areStringsInListAllIntegers = (list_of_strings) => {\n  for (const str of list_of_strings) {\n    if (!canStringBeInteger(str)) return false\n  }\n  // if nobody in the list fails, then they all pass\n  return true;\n}\n\nexport const convertToValidPhoneNumberIfAllNums = (phoneStr) => {\n  // if phoneStr is in format of '4251112222' or '14251112222', it's annoying to read for user, so change it to 425-111-2222 minus the 1\n  if (phoneStr.length === 10) {\n    return `${phoneStr.slice(0,3)}-${phoneStr.slice(3,6)}-${phoneStr.slice(6,10)}`;\n  } else if (phoneStr.length === 11) {\n    return convertToValidPhoneNumberIfAllNums(phoneStr.slice(1,11));\n  } else {\n    return phoneStr;\n  }\n}\n\nexport const convertToValidPhoneNumberIfInParens = (phoneStr) => {\n  // if \"(425)111-2222\" was the input, fcn will convert it to twilio-accepted & db-accepted value of 425-111-2222\n\n  if (phoneStr.length === 13) {\n    // check the non-numerical parts\n    if (phoneStr[0] !== \"(\") return null;\n    if (phoneStr[4] !== \")\") return null;\n    if (phoneStr[8] !== \"-\") return null;\n\n    // check the number parts\n    const areaCode = phoneStr.slice(1,4);\n    const phone3 = phoneStr.slice(5,8);\n    const phone4 = phoneStr.slice(9,13);\n    const areNumberPartsOK = areStringsInListAllIntegers([areaCode, phone3, phone4]);\n    // if phoneStr is in accepted convertable format, return it in target format like \"425-111-2222\"\n    if (areNumberPartsOK) {\n      return `${areaCode}-${phone3}-${phone4}`;\n    } else {\n      return null;\n    }\n\n  } else {\n    return null;\n  }\n}\n\nexport const isEmailValid = (email) => {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport const deepCompareTwoSchedArrayss = (array1, array2) => {\n  if (array1.length !== array2.length) return false;\n  const sortedArray1 = sortById(array1);\n  const sortedArray2 = sortById(array2);\n  return _.isEqual(sortedArray1, sortedArray2);\n}\n\n// for use by deepCompareTwoArrays()\nconst sortById = (listOfObjs) => {\n  return listOfObjs.sort((a,b) => b.id <= a.id ? 1:-1);\n}\n\nexport const truncateString = (longStr, numberCharsToShow) => {\n  if (longStr.length <= numberCharsToShow) {\n    return longStr;\n  } else {\n    return (longStr.slice(0,numberCharsToShow) + \"...\");\n  }\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport bannerLogo from '../images/SPPbanner2.png';\nimport GoogleLogin from 'react-google-login';\nimport Modal from 'react-bootstrap/Modal';\nimport axios from 'axios';\n\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { makeHeader } from './Helpers';\n\nconst LoginBanner = ({authenticatedRole, googleAuthCallback, demoLoginCallback, logoutCallback}) => {\n\n  const [uuid, setUuid] = useState(\"\");\n\n  const [showModal, setShowModal] = useState(false);\n  const handleCloseModal = () => setShowModal(false);\n  const handleShowModal = () => setShowModal(true);\n\n  ////////////////////// LOGIN //////////////////////\n  const responseGoogle = (response) => {\n    // send info up to App.js     \n    const googleId = response.profileObj.googleId;\n    sessionStorage.setItem('googleId', googleId);\n\n    // TODO: FIX google Auth access token weirdness, had to comment out otherwise will break.  Never messing with deployment on day of presentation ever again...\n    // const googleAccessToken = response.Zi.access_token;\n    // sessionStorage.setItem('googleAccessToken', googleAccessToken);\n\n    googleAuthCallback();\n  }\n\n  const responseGoogleFail = (response) => {\n    console.log(\"GoogleLogin failed:\");\n    console.log(response);\n  }\n\n  const showLoginChoices = () => {\n    return (\n      <div>\n        {showGoogleLogin()}\n        {showDemoLogins()}\n      </div>\n    )\n  }\n\n  const showDemoLogins = () => {\n    const loginAs = (demoRole) => {\n      console.log(`gonna log you in as ${demoRole}`);\n      // TODO: use callback to send back up to App.js and set as the demoRole\n      demoLoginCallback(demoRole);\n    }\n    \n    return (\n      <div>\n        <button onClick={() => {loginAs('ADMIN')}}>Bypass Google, I just want to poke around as an ADMIN</button><br/>\n        <button onClick={() => {loginAs('EMPLOYEE')}}>Bypass Google, I just want to poke around as an EMPLOYEE</button>\n      </div>\n    )\n  }\n\n  const showGoogleLogin = () => {\n    return (\n      <section className=\"btn btn-google\">\n        <GoogleLogin\n          clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n          buttonText=\"LOGIN WITH GOOGLE\"\n          onSuccess={responseGoogle}\n          onFailure={responseGoogleFail}\n          cookiePolicy={'single_host_origin'}\n        />\n      </section>\n    );\n  }\n  \n  const updateUuid = (e) => {\n    setUuid(e.target.value);\n  }\n\n  const sendUuidApi = (e) => {\n    e.preventDefault();\n    handleCloseModal();\n\n    const googleId = sessionStorage.getItem('googleId');\n    const loginParams = { \"googleId\": googleId, \"uuid\": uuid };\n    const URL_endpoint = process.env.REACT_APP_LOGIN + `/firstTime`;\n\n    const headers = makeHeader();\n    axios.post(URL_endpoint, loginParams, {headers})\n    .then(response => {\n      const roleDB = Object.keys(response.data)[0];\n\n      if (roleDB === \"ADMIN\" || roleDB === \"EMPLOYEE\") {\n        // uuid does match someone in the database, now invoke googleAuthCallback back up to App.js to save info & re-render/re-direct\n        googleAuthCallback();\n      } else {\n        toast.error(\"Invalid uuid verification code, please double check and try again\");\n      }\n    })\n    .catch(error => toast.error(error.message));\n  }\n\n  ////////////////////// DASHBOARD BUTTONS //////////////////////\n  const showDashWithLogout = () => {\n    const name = sessionStorage.getItem(\"username\");\n\n    if (authenticatedRole === \"ADMIN\") {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-success dashboard-buttons\"><Link to=\"/adminDash\">{name}'s Dashboard</Link></button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={logoutCallback}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    } else if (authenticatedRole === \"EMPLOYEE\") {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-success dashboard-buttons\"><Link to=\"/employeeDash\">{name}'s Dashboard</Link></button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={logoutCallback}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    } else {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-warning dashboard-buttons\" onClick={handleShowModal}>First time logging in?  Click to activate account!</button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={logoutCallback}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    }\n  }\n\n\n////////////////////// RENDER //////////////////////\n  return(\n    <section>\n      <section className=\"loginBanner-section text-centered\">\n        <Link to=\"/\"><img src={bannerLogo} alt=\"sppBannerLogo\" className=\"img-90\"/></Link>\n        {authenticatedRole? showDashWithLogout():showLoginChoices()}\n      </section>\n\n\n      <Modal show={showModal} onHide={handleCloseModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Welcome to Schedule Plus Plus!</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          Please copy and paste your unique verification id (uuid), including the dashes.\n          <form>\n            <input type=\"text\" className=\"form-control margin-top-1rem\" onChange={updateUuid} placeholder={\"Example: 12345678-abcd-abcd-abcd-1234abcd1234\"}/>\n            <section className=\"centered-children-per-row_container\">\n              <button className=\"btn btn-primary margin-top-1rem\" onClick={sendUuidApi}>Log in!</button>\n            </section>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </section>\n  );\n}\n\nexport default LoginBanner;\n\nLoginBanner.propTypes = {\n  authenticatedRole: PropTypes.string,\n  googleAuthCallback: PropTypes.func.isRequired,\n  logoutCallback: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport redCrossFlag from '../images/redCrossFlag.svg';\n\nexport default function Homepage() {\n\n  return (\n    <section className=\"footer\">\n      <img src={redCrossFlag} alt=\"redCrossFlag\" className=\"img-5\"/>\n      <a href=\"https://github.com/stupendousC\" target=\"_blank\" rel=\"noopener noreferrer\"> Made by: Caroline Wu </a>\n      <img src={redCrossFlag} alt=\"redCrossFlag\" className=\"img-5\"/>\n      <p className=\"fine-print\">All icons from www.freeicons.io</p>\n    </section>\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatTime } from './Helpers';\n\nconst CalendarDay = ({basicShiftsInfo, dateStr, showColorBasedOnDay}) => {\n\n  const showShifts = () => {\n    return ( basicShiftsInfo.map (shift => {\n      return (\n        <section key={shift.id} className=\"section-4-col\"> \n          <section>{shift.client.name}</section>\n          <section>{shift.employee ? shift.employee.name:\"\"}</section>\n          <section>{formatTime(shift.start_time)}</section>\n          <section>{formatTime(shift.end_time)}</section>\n        </section>\n        );\n    }));\n  }\n\n\n  const showTableOrNothing = () => {\n    if (!basicShiftsInfo || basicShiftsInfo === [] || basicShiftsInfo.length === 0) {\n      return (\n        <h3 className=\"text-centered padding-all-1rem\">No shifts scheduled</h3>\n      );\n    } else {\n      return (\n        <section>\n          <section className=\"section-4-col padding-top-1rem text-centered\"> \n            <h5>CLIENT</h5>\n            <h5>EMPLOYEE</h5>\n            <h5>START</h5>\n            <h5>END</h5>\n          </section>\n\n          <section className=\"text-centered padding-bottom-1rem\"> \n            {showShifts()}\n          </section>\n        </section>\n      );\n    }\n  }\n\n  return(\n    <section className={showColorBasedOnDay()}>\n      {showTableOrNothing()}\n    </section>\n  );\n  \n}\n\nexport default CalendarDay;\n\nCalendarDay.propTypes = {\n  basicShiftsInfo: PropTypes.arrayOf(PropTypes.object), \n  dateStr: PropTypes.string.isRequired, \n  showColorBasedOnDay: PropTypes.func.isRequired\n};","import React, { useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { formatDate, dateInThePast, makeHeader } from './Helpers';\nimport { toast } from 'react-toastify';\n\nconst NewShift = ({daySpotlight, allClients, availEmpsOfDay, updateAllShiftsCallback, textEmployeesCallback, showColorBasedOnDay}) => {\n  // need for sending POST request to backend\n  const ALL_SHIFTS = process.env.REACT_APP_ALL_SHIFTS;\n\n  // these are for <form> use\n  const [clientId, setClientId] = useState(null);\n  const defaultStartTime = \"09:00:00\";\n  const defaultEndTime = \"17:00:00\";\n  const [startTime, setStartTime] = useState(defaultStartTime);\n  const [endTime, setEndTime] = useState(defaultEndTime);\n\n  const isFormValid = () => {\n    if (dateInThePast(daySpotlight) || !clientId || (endTime <= startTime)) {\n      return (false);\n    } else {\n      return (true);\n    }\n  }\n\n  const genErrorMsgs = () => {\n      // evaluate all form inputs and save invalid reasons in errorMsgs\n      let errorMsgs = [];\n\n      if (dateInThePast(daySpotlight)) {\n        errorMsgs.push(\"Date cannot be in the past\");\n      }\n      if (!clientId) {\n        errorMsgs.push(\"Please select a client before submitting form\");\n      }\n      if (endTime <= startTime) {\n        errorMsgs.push(\"Start time must be before end time\");\n      }\n\n      return errorMsgs;\n  }\n\n  const onClientChange = (e) => {\n    if (e.target.value === \"-- Select --\") {\n      setClientId(null);\n    } else {\n      setClientId(parseInt(e.target.value));\n    }\n  }\n\n  const onTimeChange = (e) => {\n    if (e.target.id === \"startTime\") { \n      setStartTime(e.target.value) \n    } else if (e.target.id === \"endTime\") {\n      setEndTime(e.target.value);\n    }\n  }\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n\n    const clientObj = allClients.find( client => {\n      return (client.id === clientId);\n    });\n\n    const jsonForNewShiftAPI = {\n      \"shift_date\": daySpotlight,\n      \"start_time\": startTime,\n      \"end_time\": endTime,\n      \"client\": clientObj,  \n      \"client_id\": clientId\n    }\n\n    let newShift = null;\n\n    const headers = makeHeader();\n\n    // send new shift to backend, to add to db\n      // employees also can see the new shift when they login to their own dashboard\n    axios.post(ALL_SHIFTS, jsonForNewShiftAPI, {headers} )\n    .then(response => {\n      newShift = response.data;\n      \n      // send callback back up to <CalendarTab> which will pass up to <AdminDash> for new API call\n      // which gets latest allShifts from backend db, and re-render everything\n      updateAllShiftsCallback();\n\n      // send text to temployees who have non-null phone numbers\n      textEmployeesCallback(newShift);\n      })\n    .catch(error => toast.error(`ERROR: Can't make new shift: ${error.message}`));\n  }\n\n  const showErrorMsgs = () => {\n    const errorMsgs = genErrorMsgs();\n      const rowsOfMsgs = errorMsgs.map( (msg,i) => {\n        return (\n          <li key={i} className=\"centered-text\">{msg}</li>\n        );\n      });\n\n      return (\n        <ul className=\"centered-children-per-row_container\">{rowsOfMsgs}</ul>\n      );\n    \n  }\n\n  const showButtonValue = () => {\n    if (availEmpsOfDay.length === 0) {\n      return \"No one is available -> MAKE NEW SHIFT anyway\";\n    } else {\n      return \"MAKE NEW SHIFT & NOTIFY ALL THOSE AVAILABLE\";\n    }\n  }\n\n  //////////////////// render ///////////////////\n\n  return(\n    <section className={showColorBasedOnDay()}> \n      <h1 className=\"text-centered\">{formatDate(daySpotlight)}</h1>\n      \n      <form onSubmit={onFormSubmit} className=\"px-4 py-3\">\n\n        <section className=\"form-group\">\n\n          <label>Client</label>\n          <select className=\"form-control\" onChange={onClientChange}>\n            <option defaultValue>-- Select --</option>\n            {allClients.map(client => <option key={client.id} value={client.id}>{client.name}</option>)}\n          </select>\n            \n          <label>Start time</label>\n          <input id=\"startTime\" onChange={onTimeChange} className=\"form-control\" type=\"time\" defaultValue={defaultStartTime}></input>\n          \n          <label>End time</label>\n          <input id=\"endTime\" onChange={onTimeChange} className=\"form-control\" type=\"time\" defaultValue={defaultEndTime}></input>\n          \n        </section>\n        \n        {isFormValid() ? null: showErrorMsgs()}\n\n        <section className=\"centered-children-per-row_container\">\n          <input type=\"submit\" className=\"btn btn-primary\" value={showButtonValue()} disabled={!isFormValid()}/>\n          <li className=\"fine-print centered-text\">New shift will be visible on employee dashboards, open on a first-come-first-served basis</li>\n          <li className=\"fine-print centered-text\">Texts will also be sent to all those available, with valid phone numbers in their record</li>\n        </section>\n        \n      </form>\n\n    </section>\n  );\n}\n\nexport default NewShift;\n\nNewShift.propTypes = {\n  daySpotlight: PropTypes.string.isRequired, \n  allClients: PropTypes.arrayOf(PropTypes.object), \n  availEmpsOfDay: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.string]), // coud be eihter \"LOADING\" or actual array of Employees\n  updateAllShiftsCallback: PropTypes.func.isRequired, \n  textEmployeesCallback: PropTypes.func.isRequired, \n  showColorBasedOnDay: PropTypes.func.isRequired,\n};","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { makeHeader } from './Helpers';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Calendar from 'react-calendar';\nimport CalendarDay from './AdminDash_CalendarDay';\nimport NewShift from './AdminDash_NewShift';\n\nimport { convertToPST, formatDate, convertDateString, dateInThePast } from './Helpers';\n\n\nconst CalendarTab = ({allShifts, allClients, updateAllShiftsCallback, textEmployeesCallback}) => {\n  const today = convertDateString(new Date());\n  const [daySpotlight, setDaySpotlight] = useState(today);\n  const [shiftsOfDay, setShiftsOfDay] = useState(\"LOADING\");\n  const [availEmpsOfDay, setAvailEmpsOfDay] = useState(\"LOADING\");\n\n  const updateStateForCalendarDay = (e) => {\n    const dateStr = convertDateString(e);\n    \n    getAndSetShiftsOfDay(dateStr);\n    getAndSetAvailEmpsByDate(dateStr);\n    setDaySpotlight(dateStr);\n  }\n\n  const getAndSetShiftsOfDay = (targetDateStr) => {\n    let shiftsOfDay = [];\n    for (const shift of allShifts) {\n      if (shift.shift_date === targetDateStr ) { \n        shiftsOfDay.push(shift); \n      } else if (shift.shift_date > targetDateStr) {\n        break;\n      }\n    }\n    \n    setShiftsOfDay(shiftsOfDay);\n  }\n\n  const getAndSetAvailEmpsByDate = (targetDateStr) => {\n    const URL_getAllAvailEmpsByDate = process.env.REACT_APP_GET_AVAIL_EMPS_FOR_DAY + `/${targetDateStr}`;\n    const headers = makeHeader();\n\n    axios.get(URL_getAllAvailEmpsByDate, {headers} )\n    .then(response => setAvailEmpsOfDay(response.data))\n    .catch(error => toast.error(error.message));\n\n  }\n\n  //////////////////// display options ////////////////////\n  const tileContent = ({ date, view }) => {\n    let tileCaption = \" - \";\n    let tileClassName = \"\";\n    \n    const targetDate = convertDateString(date);\n    // <Calendar> will iterate thru each date in the display month\n      // if no one's avail to work that day -> red background!\n      // these 2 below supercedes display above\n      // if date is in the past -> gray background\n      // if it's on today -> gold background  \n    if (daySpotlight === targetDate && availEmpsOfDay.length === 0) {\n      // TODO: why doesn't the emoji show up automatically? i had to click on calendar tile\n      tileCaption = \"😱\";\n      tileClassName = \"tile-no-workers\";\n    }\n\n    if (dateInThePast(targetDate)) {\n      tileCaption = \" x \";\n      tileClassName = \"tile-past\";\n    } else if (targetDate === today) {\n      tileCaption = \"TODAY\";\n      tileClassName = \"tile-today\";\n    }\n\n    // we only need to see the colored tiles when looking at monthly view.\n    if (view === \"month\") {\n      return (\n        <section className={tileClassName}>{tileCaption}</section>\n      );\n    } \n  }\n\n  const showAccordionHeaderColor = () => {\n    if (daySpotlight === today) {\n      return \"accordion-toggle_button_gold\";\n    } else if (availEmpsOfDay.length === 0) {\n      return \"accordion-toggle_button_red\";  \n    } else if (dateInThePast(daySpotlight)) {\n      return \"accordion-toggle_button_gray\";\n    } else {\n      return \"accordion-toggle_button\";\n    }\n  }\n\n  const showColorBasedOnDay = () => {\n    if (daySpotlight === convertDateString(new Date())) {\n      return \"lightgold-bg\";\n    } else if (dateInThePast(daySpotlight)) {\n      return \"lightgray-bg\";\n    } else if (availEmpsOfDay.length === 0) {\n      return \"lightred-bg\";\n    } else {\n      return \"lightblue-bg\";\n    }\n  }\n\n  const showAvailEmpsInCard = () => {\n    if (dateInThePast(daySpotlight)) {\n      return (<section className={showColorBasedOnDay()+\" text-centered\"}> This day is in the past...</section>);\n    }\n\n    if (availEmpsOfDay === \"LOADING\") {\n      return (<section className={showColorBasedOnDay()+\" text-centered\"}>Loading...</section>);\n    } else if (availEmpsOfDay.length === 0) {\n      return (<section className={showColorBasedOnDay()+\" text-centered\"}>No one is available!</section>);\n    } else {\n      return (\n      <section className={`padding-all-1rem ${showColorBasedOnDay()}`}>\n        <section className=\"section-3-col text-centered\">\n          <h5>EMPLOYEE</h5>\n          <h5>PHONE</h5>\n          <h5>EMAIL</h5>\n        </section>\n        {showRowsOfEmps()}\n      </section>\n    );\n    }\n  }\n\n  const showRowsOfEmps = () => availEmpsOfDay.map(emp => {\n      return(\n        <section key={emp.id} className=\"section-3-col text-centered\">\n          <section>{emp.name}</section>\n          <section>{emp.phone}</section>\n          <section>{emp.email}</section>\n        </section>\n      );\n    })\n\n  //////////////////// callback fcns ////////////////////\n  const prepForTextEmployeesCallback = (newShift) => {\n    // <NewShift> is sending this back, which we'll need to add the availEmpsOfDay into the args before sending back up to AdminDash\n    textEmployeesCallback(newShift, availEmpsOfDay);\n  }\n\n  //////////////////// prep initial state ////////////////////\n  if (shiftsOfDay === \"LOADING\") { getAndSetShiftsOfDay(daySpotlight) }\n\n  if (availEmpsOfDay === \"LOADING\") { getAndSetAvailEmpsByDate(daySpotlight) }\n\n  if (shiftsOfDay === \"LOADING\" && availEmpsOfDay === \"LOADING\") {\n    return (<section>LOADING</section>);\n  }\n  \n  //////////////////// render ////////////////////\n    return(\n      \n      <section>\n        <section className=\"calendar-container\">\n          <Calendar tileContent={tileContent} onChange={updateStateForCalendarDay} value={convertToPST(daySpotlight)}/>\n          {/* <NewShift /> and <CalendarDay /> will change based on which day you click on in the <Calendar> */}\n        </section>\n\n      <Accordion>\n          <Accordion.Toggle eventKey=\"newShift\" className={showAccordionHeaderColor()}>\n            <section>\n              <section>▼ MAKE A NEW SHIFT</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"newShift\">\n          <NewShift daySpotlight={daySpotlight} allClients={allClients} availEmpsOfDay={availEmpsOfDay} updateAllShiftsCallback={updateAllShiftsCallback} textEmployeesCallback={prepForTextEmployeesCallback} showColorBasedOnDay={showColorBasedOnDay}/> \n          </Accordion.Collapse>\n      </Accordion>\n      \n      <Accordion>\n        <Accordion.Toggle eventKey=\"availEmpList\" className={showAccordionHeaderColor()}>\n          <section>\n            <section>▼ {availEmpsOfDay === \"LOADING\" ? \"Loading\":availEmpsOfDay.length} AVAILABLE EMPLOYEES FOR {formatDate(daySpotlight)}</section>\n          </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"availEmpList\">\n          {/* send API call to backend to get all avail emps for the daySpotlight */}\n          {showAvailEmpsInCard()}\n        </Accordion.Collapse>\n      </Accordion>\n\n      <Accordion>\n        <Accordion.Toggle eventKey=\"dayAgenda\" className={showAccordionHeaderColor()}>\n          <section>\n            <section>▼AGENDA FOR {formatDate(daySpotlight)}</section>\n          </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"dayAgenda\">\n          <CalendarDay basicShiftsInfo={shiftsOfDay} dateStr={daySpotlight} showColorBasedOnDay={showColorBasedOnDay} />\n        </Accordion.Collapse>\n      </Accordion>\n\n    </section>\n    );\n  }\n\n\n\nexport default CalendarTab;\n\n\nCalendarTab.propTypes = {\n  allShifts: PropTypes.arrayOf(PropTypes.object), \n  allClients: PropTypes.arrayOf(PropTypes.object), \n  updateAllShiftsCallback: PropTypes.func.isRequired, \n  textEmployeesCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport axios from 'axios';\nimport Accordion from 'react-bootstrap/Accordion';\nimport PropTypes from 'prop-types';\nimport { makeHeader, formatTime, formatDate, dateInThePast } from './Helpers';\nimport { toast } from 'react-toastify';\n\nclass ShiftsTable extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      availEmployeesByShiftId: \"LOADING\",\n      // javascript weirdness abounds if I were to set initial state to null\n      // safer to set it to \"LOADING\" or a real hashmap of { shift_id: [arrayOfAvailEmps] }\n      pastShifts: [],\n      currentShifts: []\n    }\n  }\n\n  setPastVsCurrentShifts = () => {\n    let currentShifts = [];\n    let pastShifts = [];\n\n    for (const shift of this.props.allShifts) {\n      dateInThePast(shift.shift_date) ? pastShifts.push(shift) : currentShifts.push(shift);\n    }\n\n    this.setState({ pastShifts: pastShifts, currentShifts: currentShifts });\n  }\n  \n  componentDidMount() {\n    // assemble list of availEmployees for all the unstaffed shifts\n    let availEmployeesByShiftId = {};\n\n    const allUnstaffedShifts = this.props.allShifts.filter (shift => !shift.employee );\n    const headers = makeHeader();\n    const axiosGetFcns = allUnstaffedShifts.map( unstaffedShift => {\n      const URL = process.env.REACT_APP_GET_AVAIL_EMPS_FOR_SHIFT + `/${unstaffedShift.id}`;\n      return axios.get(URL, {headers});\n    })\n\n    axios.all(axiosGetFcns)\n    .then(axios.spread((...responses) => {\n      // match up responses to allUnstaffedShifts\n      for ( let i = 0; i < allUnstaffedShifts.length; i++) {\n        const shiftId = allUnstaffedShifts[i].id;\n        availEmployeesByShiftId[shiftId] = responses[i].data;\n      }\n\n      // setState\n      this.setState({\n        availEmployeesByShiftId: availEmployeesByShiftId\n      });\n    }))\n    .catch( errors => toast.error(`ERROR loading info from database: ${errors}`));\n\n    // sort into pastShifts and currentShifts\n    this.setPastVsCurrentShifts();\n  }\n\n  ////////////////////////// display //////////////////////////\n  showShiftsTable = (listOfShifts, timeCategory) => {\n    let primaryColorClass = null;\n    let secondaryColorClass = null;\n    if (timeCategory === \"PAST\") {\n      primaryColorClass = \"gray-bg\";\n      secondaryColorClass = \"lightgray-bg\";\n    } else if (timeCategory === \"CURRENT\") {\n      primaryColorClass = \"blue-bg\";\n      secondaryColorClass = \"lightblue-bg\";\n    } \n\n    if (listOfShifts.length === 0) {\n      return (\n        <section className={`text-centered ${secondaryColorClass}`}>No shifts</section>\n      );\n\n    } else {\n      return(\n        <section>\n          {listOfShifts.map(shift => {\n            return (\n              <Accordion key={shift.id}>\n                <section>\n                  <Accordion.Toggle eventKey=\"showInfo\" className={`accordion-toggle_button ${primaryColorClass}`}>\n                    <section className=\"section-4-col\">\n                      <section>▼ #{shift.id}</section>\n                      <section>{formatDate(shift.shift_date)}</section>\n                      <section>{shift.client.name}</section>\n                      <section>{timeCategory === \"CURRENT\" ? this.showEmpNameOrButton(shift):null}</section>\n                    </section>\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey=\"showInfo\">\n                    <section>{this.showWholeShiftCard(shift, timeCategory, secondaryColorClass)}</section>\n                  </Accordion.Collapse>\n\n                </section>\n              </Accordion>\n            )}\n          )}\n        </section>\n      );\n    }    \n  }\n\n  showEmpNameOrButton = (shift) => {\n    if (shift.employee) {\n      return (shift.employee.name);\n    } else {\n      // the button really is just for show, \n      // clicking on the entire bar (inc the button) is what sends an API call to backend for the list of avail employees\n      return (\n        <section className=\"fake-btn\">Find employees</section>\n        );\n    }\n  }\n\n  showWholeShiftCard = (shift, timeCategory, secondaryColorClass) => {\n    const clientInfo = shift.client\n    return (\n      <section>\n        <section className={`card-shift centered-children-per-row_container ${secondaryColorClass}`}>\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client centered-children-per-row_container\">\n          <p>CLIENT</p>\n          { clientInfo.name ? <p>{clientInfo.name}</p> : <p>MISSING</p> }\n          <p>PHONE</p>\n          { clientInfo.phone ? <p>{clientInfo.phone}</p> : <p>MISSING</p> }\n          <p>EMAIL</p>\n          { clientInfo.email ? <p>{clientInfo.email}</p> : <p>MISSING</p> }\n          <p>ADDRESS</p>\n          { clientInfo.address ? <p>{clientInfo.address}</p> : <p>MISSING</p> }\n        </section>\n\n        {/* employee info section shows either: A. actual employee info if staffed. B. list of available employees for that shift */}\n        <section>\n          { this.showEmployeeCardSection(shift, timeCategory, secondaryColorClass) }\n        </section>\n        \n      </section>\n    );\n  }\n\n  showEmployeeCardSection = (shift, timeCategory, secondaryColorClass) => {\n    if (timeCategory === \"PAST\") {\n      return (<section className={`${secondaryColorClass} text-centered`}>In the past</section>);\n    } else if (timeCategory === \"CURRENT\") {\n      if (shift.employee) {\n        return (this.showEmpInCard(shift, secondaryColorClass));\n      } else {\n        return (this.showAvailEmpsInCard(shift, secondaryColorClass));\n      }\n    }\n  }\n\n  // showWholeShiftCard() calls this if ... A. shift is staffed\n  showEmpInCard = (shift, colorClass) => {\n    const employeeInfo = shift.employee\n    return (\n      <section className={`card-employee ${colorClass}`}>\n          <p>EMPLOYEE</p>\n          { employeeInfo.name ? <p>{employeeInfo.name}</p> : <p>MISSING</p> }\n          <p>PHONE</p>\n          { employeeInfo.phone ? <p>{employeeInfo.phone}</p> : <p>MISSING</p> }\n          <p>EMAIL</p>\n          { employeeInfo.email ? <p>{employeeInfo.email}</p> : <p>MISSING</p> }\n          <p>ADDRESS</p>\n          { employeeInfo.address ? <p>{employeeInfo.address}</p> : <p>MISSING</p> }\n        </section>\n    );\n  }\n\n  // showWholeShiftCard() calls this if ... B. shift is unstaffed\n  showAvailEmpsInCard = (shift) => {\n    \n    if (this.state.availEmployeesByShiftId === \"LOADING\" ) {\n      return (\n        <section className=\"card-employee lightblue-bg\">Loading...</section>\n      );\n\n    } else {\n      const availEmpList = this.state.availEmployeesByShiftId[shift.id];\n      \n      if (availEmpList.length === 0) {\n        return (\n          // TODO: add soemthing special for this emergency\n          <section className=\"card-employee red-bg\">NO EMPLOYEES AVAILABLE!</section>\n        );\n\n      } else {\n        const empList = Array.from(availEmpList);\n        const numEmps = empList.length;\n\n        return (\n          <section className=\"lightblue-bg\">\n          <button onClick={()=>{this.props.textEmployeesCallback(shift, availEmpList)}} className=\"btn btn-primary margin-left-1rem\">TEXT ALL {numEmps} AVAILABLE EMPLOYEES</button>\n          {this.rowsOfEmps(empList)}\n          </section>\n        );\n      }\n    }\n  }\n\n  rowsOfEmps = (empList) => {\n      return empList.map( (emp, i) => {\n        return(\n          <section key={emp.id} className=\"card-employee lightblue-bg\">\n            <section>{emp.name}</section>\n            <section>{emp.phone}</section>\n          </section>\n        );\n      }) \n    }\n\n  ////////////////// render ////////////////////\n  render() {\n    return(\n      <section>\n        <h1 className=\"text-centered margin-all-1rem\">CURRENT SHIFTS</h1>\n        {this.showShiftsTable(this.state.currentShifts, \"CURRENT\")}\n\n        <h1 className=\"text-centered margin-all-1rem\">PAST SHIFTS</h1>\n        {this.showShiftsTable(this.state.pastShifts, \"PAST\")}\n      </section>\n    );  \n  }\n}\n\nexport default ShiftsTable;\n\nShiftsTable.propTypes = {\n  textEmployeesCallback: PropTypes.func.isRequired,\n  allShifts: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// To use this component... see instructions below\nconst ToastUndo = ({ undo, closeToast, message }) => {\n\n  const handleClick = () => {\n    undo();\n    closeToast();\n  }\n\n  return (\n    <h3>\n      {message} \n      <button onClick={handleClick} className=\"btn btn-primary\">UNDO</button>\n    </h3>\n  );\n}\n\nexport default ToastUndo;\n\nToastUndo.propTypes = {\n  undo: PropTypes.func.isRequired,\n  closeToast: PropTypes.func,\n  message: PropTypes.string.isRequired,\n};\n\n\n\n\n///////////// INSTRUCTIONS /////////////\n// to use... \n//   ToastUndo(<ToastUndo undo={LOCAL_UNDO_FCN} />, { onClose: LOCAL_CLOSING_FCN});\n// required... \n//   LOCAL_CLOSING_FCN <- will run whether u click undo or not \n//   LOCAL_UNDO_FCN <- will run only if u click undo button\n// see this in action in AdminDash_PeopleTable.js","import React, { useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport ToastUndo from './ToastUndo';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { makeHeader, isPhoneValid, isEmailValid, convertToValidPhoneNumberIfInParens, convertToValidPhoneNumberIfAllNums } from './Helpers';\n\n\n///////////////////// People can be either admins, employees, or clients /////////////////////\nconst PeopleTable = ({personType, peopleList, URL_endpoint, setStateKey, updatePeopleListCB }) => {\n  const [personSpotlight, setPersonSpotlight] = useState(null);\n  const [updateSpotlightBool, setUpdateSpotlightBool] = useState(false);\n  const [updatedPerson, setUpdatedPerson] = useState(null);\n  const [newPerson, setNewPerson] = useState({name: null, phone: null, email: null, address: null, active: true});\n  const [addFormErrorMsgs, setAddFormErrorMsgs] = useState([]);\n  const [updateFormErrorMsgs, setUpdateFormErrorMsgs] = useState([]);\n\n  // no useState on the following b/c that's asynch AND I don't need re-rendering for it\n  let personInPurgatory = null;\n  const headers = makeHeader();\n\n  // need this for adding new people\n  const uuidv4 = require('uuid/v4');\n\n  const showAll = (peopleList) => {\n    return ( peopleList.map((person, i) => {\n      return (\n        <section key={i} className=\"margin-all-1rem\">\n          <section className=\"peopleTable\">\n            <section>{person.name}</section>\n            <section><button onClick={() => read(i, peopleList)} className=\"btn btn-primary\">Info</button></section>\n            <section><button onClick={() => update(i, peopleList)} className=\"btn btn-warning\">Update</button></section>\n            <section><button onClick={() => deactivate(person)} className=\"btn btn-danger\">Deactivate</button></section>\n          </section>\n          <section>\n            {personSpotlight === person ? showPersonSpotlight(person):null}\n          </section>\n        </section>\n      )})\n    );\n  }\n\n  const showPersonSpotlight = (person) => {\n    if (updateSpotlightBool === true) {\n      return (\n        <form className=\"margin-all-1rem\">\n          <fieldset>\n            <section className=\"form-group\">\n              <label>NAME</label>\n              <input type=\"text\" className=\"form-control\" name=\"name\" placeholder={person.name} onChange={onUpdateFieldChange}/>\n              <label>ADDRESS</label>\n              <input type=\"text\" className=\"form-control\" name=\"address\" placeholder={person.address} onChange={onUpdateFieldChange}/>\n              <label>PHONE</label>\n              <input type=\"text\" className=\"form-control\" name=\"phone\" placeholder={person.phone} onChange={onUpdateFieldChange}/>\n              <label>EMAIL</label>\n              <input type=\"text\" className=\"form-control\" name=\"email\" placeholder={person.email} onChange={onUpdateFieldChange}/>\n            </section>\n\n            <section className=\"margin-all-1rem\">\n              {updateFormErrorMsgs === [] ? null : showErrorMsgs(updateFormErrorMsgs)}\n              <button onClick={sendUpdateAPI} className=\"btn btn-primary\">UPDATE</button>\n            </section>\n          </fieldset>\n        </form>\n      );\n    } else { \n      // read only\n      return (\n        <section className={`card-person lightblue-bg`}>\n          <p>ID</p>\n          <p>{person.id}</p> \n          <p>NAME</p>\n          <p>{person.name}</p> \n          <p>PHONE</p>\n          <p>{person.phone}</p> \n          <p>EMAIL</p>\n          <p>{person.email}</p> \n          <p>ADDRESS</p>\n          <p>{person.address}</p> \n          <p>UUID (for 1st time login)</p>\n          <p>{person.uuid}</p> \n        </section>\n    );\n    }\n  }\n\n  ////////////////////// ADD person //////////////////////\n  const showAddSection = () => {\n    const uuid = uuidv4();\n    newPerson.uuid = uuid;\n\n    return (\n      <Accordion>\n      <section>\n        <Accordion.Toggle eventKey=\"showForm\" className={`accordion-toggle_button gold-bg`}>\n            <section className=\"margin-all-1rem capitalize\">\n              ▼ add new {personType} ▼\n            </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"showForm\">\n        <form className=\"margin-all-1rem lightgold-bg\">\n          <fieldset>\n            <section className=\"margin-all-1rem form-group\">\n              <label>NAME</label>\n              <input type=\"text\" className=\"form-control\" name=\"name\" onChange={onAddFieldChange}/>\n              <label>ADDRESS</label>\n              <input type=\"text\" className=\"form-control\" name=\"address\" onChange={onAddFieldChange}/>\n              <label>PHONE</label>\n              <input type=\"text\" className=\"form-control\" name=\"phone\" onChange={onAddFieldChange}/>\n              <label>EMAIL</label>\n              <input type=\"text\" className=\"form-control\" name=\"email\" onChange={onAddFieldChange}/>\n              <label>UUID</label>\n              <input type=\"text\" className=\"form-control\" disabled name=\"uuid\" placeholder={newPerson.uuid}/>\n            </section>\n            <section className=\"centered-children-per-row_container margin-all-1rem\">\n              {addFormErrorMsgs === [] ? null : showErrorMsgs(addFormErrorMsgs)}\n              <button onClick={sendAddAPI} className=\"btn btn-primary\">ADD</button>\n            </section>\n          </fieldset>\n        </form>\n        </Accordion.Collapse>\n\n      </section>\n    </Accordion>\n    );\n  }\n\n  const onAddFieldChange = (e) => {\n    newPerson[e.target.name] = e.target.value;\n  }\n\n  const sendAddAPI = (e) => {\n    e.preventDefault();\n\n    if (!isFormValid(newPerson, setAddFormErrorMsgs)) return;\n    \n    axios.post(URL_endpoint, newPerson, {headers})\n    .then(response => {\n      toast.success(`${newPerson.name} added successfully`);\n      // const updatedPeopleList = [...peopleList];\n      // updatedPeopleList.push(newPerson);\n      // updatePeopleListCB(setStateKey, updatedPeopleList)}\n      updatePeopleListCB(setStateKey, URL_endpoint)\n    })\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n  ////////////////////// FORM VALIDATION //////////////////////\n  const isFormValid = (newOrUpdatedPerson, setAddOrUpdatedFormMsgs) => {\n    let errorMsgs = [];\n\n    // name must be present\n    if (newOrUpdatedPerson.name === \"\" || !newOrUpdatedPerson.name) {\n      errorMsgs.push(\"Name cannot be blank\");\n    }\n\n    // if phone given, make sure it's correct format\n    if (newOrUpdatedPerson.phone && newOrUpdatedPerson.phone !== \"\") {\n      if (!isPhoneValid(newOrUpdatedPerson.phone)) {\n        // if phone is actually in technically correct format of (425)111-2222, then we'll convert it to correct format of 425-111-2222 for user\n        const correctedPhoneNum = convertToValidPhoneNumberIfInParens(newOrUpdatedPerson.phone);\n        if (correctedPhoneNum) {\n          newOrUpdatedPerson.phone = correctedPhoneNum;\n        } else {\n          errorMsgs.push(`Phone number format invalid`);\n        }\n      } else {\n        // convert from format of '4251112222' or '14251112222' to 425-111-2222 for readability\n        const newReadablePhone = convertToValidPhoneNumberIfAllNums(newOrUpdatedPerson.phone);\n        newOrUpdatedPerson.phone = newReadablePhone;\n      }\n    }\n\n    // if email given, make sure it's correct format\n    if (newOrUpdatedPerson.email && newOrUpdatedPerson.email !== \"\") {\n      if (!isEmailValid(newOrUpdatedPerson.email)) {\n        errorMsgs.push(`Email invalid`);\n      }\n    }\n\n    setAddOrUpdatedFormMsgs(errorMsgs);\n    return (errorMsgs.length === 0 ? true : false);\n  }\n\n  const showErrorMsgs = (addOrUpdatedFormMsgs) => {\n    const rowsOfMsgs = addOrUpdatedFormMsgs.map( (msg,i) => {\n      return (\n        <li key={i} className=\"centered-text\">{msg}</li>\n      );\n    });\n\n    return (\n      <ul className=\"centered-children-per-row_container\">{rowsOfMsgs}</ul>\n    );\n  }\n\n  ////////////////////// READ person //////////////////////\n  const toggleAsPersonSpotlight = (selectedPerson) => {\n    if (personSpotlight === selectedPerson) {\n      setPersonSpotlight(\"\");\n    } else {\n      setPersonSpotlight(selectedPerson);\n      setUpdateFormErrorMsgs([]);\n    }   \n  }\n\n  const read = (i, peopleList) => {\n    const selectedPerson = peopleList[i];\n    toggleAsPersonSpotlight(selectedPerson);\n\n    setUpdateSpotlightBool(false);\n  }\n\n  ////////////////////// UPDATE person //////////////////////\n  const update = (i, peopleList) => {\n    const selectedPerson = peopleList[i];\n    toggleAsPersonSpotlight(selectedPerson);\n\n    setUpdateSpotlightBool(true);\n    const copiedPerson = JSON.parse(JSON.stringify(selectedPerson));\n    setUpdatedPerson(copiedPerson);\n  }\n\n  const onUpdateFieldChange = (e) => {\n    updatedPerson[e.target.name] = e.target.value;\n    setUpdatedPerson(updatedPerson);\n  }\n\n  const sendUpdateAPI = (e) => {\n    e.preventDefault();\n\n    if (!isFormValid(updatedPerson, setUpdateFormErrorMsgs)) return;\n    \n    axios.put(`${URL_endpoint}/${updatedPerson.id}`, updatedPerson, {headers})\n    .then( response => {\n      toast.success(`${updatedPerson.name} updated successfully`);\n      const updatedPeopleList = peopleList.map(person => {\n        if (person.id === updatedPerson.id) {\n          return response.data;\n        } else {\n          return person;\n        }\n      });\n      updatePeopleListCB(setStateKey, URL_endpoint)\n    }\n    )\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  ////////////////////// DEACTIVATE person //////////////////////\n  const deactivate = (person) => {\n    setPersonSpotlight(\"\");\n    personInPurgatory = person;\n\n    // TODO: If employee, need to reopen shifts they alreay committed to!!! and inform employees!!!\n    // TODO: If client, need to close shifts they alreay committed to!!! and inform employees!!!\n\n    toast(<ToastUndo undo={undo} message={`Deleting ${person.name}`}/>, {\n      // hook will be called when the component unmount\n      onClose: sendDeleteAPIOrNot\n    });\n  }\n\n  const undo = () => {\n    personInPurgatory = null;\n  }\n\n  const sendDeleteAPIOrNot = () => {\n    if (!personInPurgatory) {\n      return;\n    }\n\n    // if there's really a person to deactivate\n    axios.delete(URL_endpoint + \"/\" + personInPurgatory.id, {headers})\n    .then(response => {\n      // const updatedPeopleList = peopleList.filter( p => p !== personInPurgatory );\n      updatePeopleListCB(setStateKey, URL_endpoint);\n    })\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  //////////////////////////// render ////////////////////////////\n  return (\n    <section>\n      <h1 className=\"text-centered margin-all-1rem\">ALL {personType.toUpperCase()}S</h1>\n      {showAddSection()}\n      {showAll(peopleList)}\n    </section>\n  );\n\n}\n\n\nexport default PeopleTable;\n\nPeopleTable.propTypes = {\n  personType: PropTypes.string.isRequired, \n  peopleList: PropTypes.arrayOf(PropTypes.object), \n  URL_endpoint: PropTypes.string.isRequired, \n  setStateKey: PropTypes.string.isRequired, \n  updatePeopleListCB: PropTypes.func.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport alarmClock from '../images/alarmClock.svg';\nimport stopwatch from '../images/stopwatch.svg';\nimport warning from '../images/warning.svg';\nimport questionBubble from '../images/questionBubble.svg';\nimport lock from '../images/comboLock.svg';\n\nexport default function ErrorGeneral({ icon, message }) {\n\n  const showSpecificIcon = () => {\n    if (icon === \"alarm\") {\n      return <img src={alarmClock} alt=\"alarm clock\" className=\"homepage-logo\"/>;\n    } else if (icon === \"stopwatch\") {\n      return <img src={stopwatch} alt=\"stopwatch\" className=\"homepage-logo\"/>\n    } else if (icon === \"warning\") {\n      return <img src={warning} alt=\"warning sign\" className=\"homepage-logo\"/>\n    } else if (icon === \"lock\") {\n      return <img src={lock} alt=\"lock\" className=\"homepage-logo\"/>\n    } else {\n      return <img src={questionBubble} alt=\"man with question bubble above head\" className=\"homepage-logo\"/>\n    }\n  }\n  \n  return (\n    <section className=\"margin-all-1rem\">\n      <h1 className=\"text-centered margin-all-1rem\">{message}</h1>\n      {showSpecificIcon()}\n    </section>\n  );\n}\n\nErrorGeneral.propTypes = {\n  icon: PropTypes.string,\n  message: PropTypes.string,\n};","import React from 'react';\nimport axios from 'axios';\nimport CalendarTab from './AdminDash_CalendarTab';\nimport ShiftsTable from './AdminDash_ShiftsTable';\nimport PeopleTable from './AdminDash_PeopleTable.js';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { makeHeader, sortShiftsByDate, isPhoneValid, formatDate, formatTime, truncateString } from './Helpers';\nimport ErrorGeneral from './ErrorGeneral';\n\nconst uuidv4 = require('uuid/v4');\n\nconst ALL_EMPS = process.env.REACT_APP_ALL_EMPS;\nconst ALL_CLIENTS = process.env.REACT_APP_ALL_CLIENTS;\nconst ALL_ADMINS = process.env.REACT_APP_ALL_ADMINS;\nconst ALL_SHIFTS = process.env.REACT_APP_ALL_SHIFTS;\nconst ALL_UNAVAILS = process.env.REACT_APP_ALL_EMPS;\nconst SEND_TEXT = process.env.REACT_APP_TEXT_EMPS;\n\nexport default class AdminDash extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      allClients: [],\n      allAdmins: [],\n      allEmployees: [],\n      allShifts: [],\n      allUnavails: [],\n      \n      show: \"calendar\"\n    }\n\n  }\n\n  ////////////////////// loading db data //////////////////////\n  \n  getAllEmpsDB = (headers) => axios.get(ALL_EMPS, {headers});\n  getAllClientsDB = (headers) => axios.get(ALL_CLIENTS, {headers});\n  getAllAdminsDB = (headers) => axios.get(ALL_ADMINS, {headers});\n  getAllShiftsDB = (headers) => axios.get(ALL_SHIFTS, {headers});\n  getAllUnavailsDB = (headers) => axios.get(ALL_UNAVAILS, {headers});\n\n  componentDidMount() {\n    const headers = makeHeader();\n    // initial loading of data from database\n    axios.all([\n      this.getAllEmpsDB(headers),\n      this.getAllClientsDB(headers),\n      this.getAllAdminsDB(headers),\n      this.getAllShiftsDB(headers),\n      this.getAllUnavailsDB(headers)])\n    .then(axios.spread((...responses) => {\n      const allEmployees = responses[0].data;\n      const allClients = responses[1].data;\n      const allAdmins = responses[2].data;\n      const allShifts = responses[3].data;\n      const allUnavails = responses[4].data;\n\n      // sort allShifts by date\n      const allShiftsSorted = sortShiftsByDate(allShifts);\n\n      this.setState({\n        allEmployees: allEmployees,\n        allClients: allClients,\n        allAdmins: allAdmins,\n        allShifts: allShiftsSorted,\n        allUnavails: allUnavails\n      });\n    }))\n    .catch( errors => `Error downloading from database: ${toast.error(errors.message)}`);\n  }\n\n  ////////////////////// set DISPLAY choice //////////////////////\n  setShowCategory = (chosen) => this.setState({show: chosen});\n\n  showChosenCategory = () => {\n    const chosen = this.state.show;\n    \n    if (chosen === \"calendar\") {\n      return this.showCalendar();\n    } else if (chosen === \"admins\") {\n      return this.showAllAdmins();\n    } else if (chosen === \"employees\") {\n      return this.showAllEmployees();\n    } else if (chosen === \"clients\") {\n      return this.showAllClients();\n    } else if (chosen === 'shifts') {\n      return this.showAllShifts();\n    }\n  }\n\n  ////////////////////// DISPLAY: calendar  //////////////////////\n  showCalendar = () => {\n    return <CalendarTab \n      allClients={this.state.allClients} \n      allShifts={this.state.allShifts} \n      updateAllShiftsCallback={this.updateAllShifts}\n      textEmployeesCallback={this.textEmployees}/>\n  }\n\n  ////////////////////// DISPLAY: Shifts  //////////////////////\n  showAllShifts = () => {\n    return <ShiftsTable allShifts={this.state.allShifts} textEmployeesCallback={this.textEmployees}/>\n  }\n\n  ////////////////////// DISPLAY: Employees/Clients/Admin //////////////////////\n  showAllEmployees = () => <PeopleTable personType=\"employee\" peopleList={this.state.allEmployees} URL_endpoint={ALL_EMPS} setStateKey=\"allEmployees\" updatePeopleListCB={this.updatePeopleList}/>\n  showAllAdmins = () => <PeopleTable personType=\"admin\" peopleList={this.state.allAdmins} URL_endpoint={ALL_ADMINS} setStateKey=\"allAdmins\" updatePeopleListCB={this.updatePeopleList}/>\n  showAllClients = () => <PeopleTable personType=\"client\" peopleList={this.state.allClients} URL_endpoint={ALL_CLIENTS} setStateKey=\"allClients\" updatePeopleListCB={this.updatePeopleList}/>\n\n  updatePeopleList = (setStateKey, URL_endpoint) => {\n    // this is a callback function for <PeopleTable> to send back updated peopleList\n    // so we can .setState here to allow re-rendering of visuals\n    // this.setState({ [setStateKey]: updatedPeopleList });\n    const headers = makeHeader();\n    axios.get(URL_endpoint, {headers})\n    .then( response => this.setState({ [setStateKey]: response.data }))\n    .catch(error => toast.error(`ERROR downloading list: ${error.message}`));\n  }\n  \n  ////////////////////// Callback fcns  //////////////////////\n  updateAllShifts = () => {\n    const headers = makeHeader();\n\n    axios.get(ALL_SHIFTS, {headers})\n    .then( response => {\n      const sortedShifts = sortShiftsByDate(response.data);\n      this.setState({ allShifts: sortedShifts });\n    })\n    .catch(error => toast.error(error.message));\n  }\n\n  textEmployees = (shiftObj, availEmpsOfDay) => {\n    // shiftObj may be a newly made shift, or existing one that's just not staffed yet\n    // availEmpsOfDay is a list of people who are 1. NOT already booked that day, and 2. NOT on in Unavails database\n      // if an employee wants that shift, they can still see it from their dashboard where they'll be told they wanted the day off\n      // and they can change their minds and accept the shift anyway.  They just won't get a text here, nobody wants a text on their day off.\n\n    // of the availEmpsOfDay, we can only text those with a valid (Helper fcn) AND verified (added to Twilio console) phone number\n    // verify phone number via Twilio console https://www.twilio.com/console/phone-numbers/verified, employee will need to give me the code they received!\n    const textableEmployees = availEmpsOfDay.filter( emp => {\n      return isPhoneValid(emp.phone);\n    });    \n\n    if (availEmpsOfDay.length === 0) {  // u can see this if u make a shift on 1/25/2020\n      toast.error(\"No employees available to work that day!\");\n      return;\n    } else if (textableEmployees.length === 0) {    // u can see this if u make a shift on 2/3/2020\n      toast.info(\"No available employees with valid phone numbers to text.  However, they'll be able to see the shift on their dashboard\");\n      return;\n    } else {\n      toast.info(\"Sending texts...\");\n    }\n\n    const jsonForTextAPI = (employee, shift) => {\n      // each text gets assigned an uuid for the db\n      const uuid = uuidv4();\n      \n      const FRONT_END_URL = process.env.REACT_APP_FRONT_END_URL;\n\n      // yes the indentation looks terrible here, but it's necessary otherwise the text msgs will ALSO have indents\n      const personalizedMsg = (`\n====================\nHello ${employee.name}!  \n          \nWe have a shift available:\n  Date: ${formatDate(shift.shift_date)}\n  Client: ${shift.client.name}\n  Time: ${formatTime(shift.start_time)} to ${formatTime(shift.end_time)}.  \n\nPlease click on [${FRONT_END_URL}/text/${uuid}] to confirm, or log onto your employee dashboard to claim this shift.  \n\nThank you from the office of Schedule Plus Plus!\n====================`\n        );\n\n      return(\n        { \"phoneNumber\": employee.phone,\n          \"message\": personalizedMsg,\n          \"uuid\": uuid,\n          \"client\": shift.client,\n          \"employee\": employee,\n          \"shift\": shift\n        }\n      );\n    }\n\n    const headers = makeHeader();\n    const allAxiosPostReqs = textableEmployees.map( employee => {\n      // each employee gets a text\n      return (axios.post(SEND_TEXT, jsonForTextAPI(employee, shiftObj), {headers}));\n    })\n    \n    // bundled all the individual post requests together,\n    // failed texts will not get in the way of successful texts\n    axios.all(allAxiosPostReqs)\n    .then(\n      // keeping this chunk around just in case\n      // axios.spread((...responses) => {\n      // for ( const eachText of responses ) {\n      //   console.log(\"\\nTEXT sent:\", eachText.data);\n      // }})\n      )\n    .catch( errors => {\n      const fullErrorMsg = errors.response.data.message;    \n      const fullTextBody = JSON.parse(errors.config.data);\n      const badPhone = fullTextBody.phoneNumber;\n      const unreachableEmp = textableEmployees.find( emp => emp.phone === badPhone );\n      let reason = \"\";\n      if (fullErrorMsg.includes(\"number  is unverified\")) {\n        reason = \"Employee needs to verify number with Twilio\";\n      } else {\n        reason = truncateString(fullErrorMsg, 20);\n      }\n      toast.error(`Unable to text ${unreachableEmp.name}: ${reason}`);\n    });\n  }\n\n  ////////////////////// render //////////////////////\n    render() {\n      if (this.props.authenticatedRole !== \"ADMIN\") {\n        return <ErrorGeneral message=\"Please log in to see ADMIN dashboard\" icon=\"lock\"/>\n      }\n      \n      return (\n        <section>\n\n          <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\">\n            {/* TODO: Navbar keeps Calendar tab highlighted even if that's not chosen, fix! */}\n            <Navbar.Brand onClick={()=>this.setShowCategory('calendar')}>CALENDAR</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={()=>this.setShowCategory('shifts')}>SHIFTS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('employees')}>EMPLOYEES</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('clients')}>CLIENTS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('admins')}>ADMINS</Nav.Link>\n            </Nav>\n          </Navbar>\n          \n          {this.showChosenCategory()}\n\n        </section>\n        \n      );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { convertDateString, formatDate, formatTime } from './Helpers';\nimport Accordion from 'react-bootstrap/Accordion';\n\n\nconst CalendarDay = ({shiftsToday, shiftsOfDaySpotlight, dateStr, availStatus, toggleAvailCallback}) => {\n\n  const showShifts = (shiftsInArray) => {\n    // shiftsInArray can either be shiftsToday[] or shiftsOfDaySpotlight[] \n    if (shiftsInArray.length > 0) {\n      return ( shiftsInArray.map ((shift, i) => {\n        return (\n        <section key={i}>\n          {showWholeShiftCard(shift)}\n        </section>\n        );\n      }));\n    } else {\n      return (\n        <section className=\"text-centered\">\n          <h3>No shifts scheduled</h3>\n        </section>\n      );\n    }\n    \n  }\n\n  const showWholeShiftCard = (shift) => {\n\n    return (\n      <section>\n        <h5 className=\"thead-dark text-centered\">SHIFT INFO</h5>\n        <section className={`card-shift centered-children-per-row_container`}>\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n        \n        <h5 className=\"thead-dark text-centered\">CLIENT INFO</h5>\n        <section className=\"card-client centered-children-per-row_container\">\n          <p>CLIENT</p>\n          <p>{shift.client.name}</p>\n          <p>PHONE</p>\n          <p>{shift.client.phone}</p>\n          <p>EMAIL</p>\n          <p>{shift.client.email}</p>\n          <p>ADDRESS</p>\n          <p>{shift.client.address}</p>\n        </section>\n        \n      </section>\n    );\n  }\n\n  const showAgendaOrOptions = () => {\n\n    const today = convertDateString(new Date());\n    const inThePast = dateStr < today;\n\n    if (shiftsOfDaySpotlight.length > 0) {\n      return (\n        <section>\n          {inThePast ? (<h3 className=\"text-centered\">Shift completed!</h3>) : null }\n          {showShifts(shiftsOfDaySpotlight)}\n        </section>\n      );\n      \n    } else if (inThePast) {\n      return (<h3 className=\"text-centered\">Nothing that day</h3>);\n\n    } else if (shiftsOfDaySpotlight.length === 0 && availStatus === true) {\n      return (\n        <section className=\"text-centered\">\n          <h3>No shifts scheduled</h3>\n          <button onClick={() => {toggleAvailCallback(false)}} className=\"btn btn-danger\">Take the day off</button>\n        </section>\n      );\n\n    } else if (shiftsOfDaySpotlight.length === 0 && availStatus === false) {\n      return (\n        <section className=\"text-centered\">\n          <h3>You have the day off</h3>\n          <button onClick={() => {toggleAvailCallback(true)}} className=\"btn btn-success\">I'm free to work</button>\n        </section>\n      );\n    } \n  }\n\n  ////////////////////////////// render //////////////////////////////\n  return(\n\n    <section className=\"accordion-container\"> \n      <Accordion>\n        <section>\n          <Accordion.Toggle eventKey=\"showToday\" className=\"accordion-toggle_button gold-bg\" >\n            <section className=\"section-3-col\">\n              <section>▼</section>\n              <section>TODAY</section>\n              <section>▼</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"showToday\">\n            <section className=\"lightgold-bg margin-all-1rem padding-all-1rem \">{showShifts(shiftsToday)}</section>\n          </Accordion.Collapse>\n\n        </section>\n      </Accordion>\n\n      <Accordion>\n        <section>\n          <Accordion.Toggle eventKey=\"showCalendarClick\" className=\"accordion-toggle_button blue-bg\" >\n            <section className=\"section-3-col\">\n              <section>▼</section>\n              <section>{formatDate(dateStr).toUpperCase()}</section>\n              <section>▼</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"showCalendarClick\">\n            <section className=\"lightblue-bg margin-all-1rem padding-all-1rem \">{showAgendaOrOptions()}</section>\n          </Accordion.Collapse>\n\n        </section>\n      </Accordion>\n\n    </section>\n  );\n  \n}\n\nexport default CalendarDay;\n\nCalendarDay.propTypes = {\n  shiftsToday: PropTypes.arrayOf(PropTypes.object), \n  shiftsOfDaySpotlight: PropTypes.arrayOf(PropTypes.object), \n  dateStr: PropTypes.string.isRequired,  \n  availStatus: PropTypes.oneOfType([ PropTypes.bool, null ]),\n  toggleAvailCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Calendar from 'react-calendar';\nimport CalendarDay from './EmployeeDash_CalendarDay';\nimport { convertToPST, convertDateString, dateInThePast } from './Helpers';\n\n\n\nconst CalendarTab = ({empUnavails, empShifts, daySpotlight, shiftsToday, shiftsOfDay, availStatusOfDay, unstaffedShifts, updateStateForCalendarDayCB, toggleAvailCallback}) => {\n  const today = new Date();\n\n  const isDateInEmpUnavails = (targetDate) => {\n    for (const shiftObj of empUnavails) {\n      if (shiftObj.day_off === targetDate) { return true }\n    }\n    return false;\n  }\n\n  const isDateInEmpShifts = (targetDate) => {\n    for (const shiftObj of empShifts) {\n      if (shiftObj.shift_date === targetDate) { return true }\n    }\n    return false;\n  }\n  \n\n  const tileContent = ({ date, view }) => {\n    let tileCaption = \" - \";\n    let tileClassName = \"\";\n    \n    const targetDate = convertDateString(date);\n    // <Calendar> will iterate thru each date in the display month\n      // if employee is working that day -> green background\n      // if employee is unavailable that day -> red background\n      // These 2 conditions below supercedes the 2 above\n      // if date is in the past -> gray background\n      // if it's on today -> gold background\n    \n    if (isDateInEmpUnavails(targetDate)) {\n      tileCaption = \"OFF\";\n      tileClassName = \"tile-unavail\";\n    } else if (isDateInEmpShifts(targetDate)) {\n      tileCaption = \"ON\";\n      tileClassName = \"tile-work\";\n    } else {\n      // left room here for future customization\n    }\n  \n    // I want tile-today's css to override any of the prev\n    if (dateInThePast(targetDate)) {\n      tileCaption = \" x \";\n      tileClassName = \"tile-past\";\n    } else if (targetDate === convertDateString(today)) {\n      tileCaption = \"TODAY\";\n      tileClassName = \"tile-today\";\n    }\n\n    // we only need to see the colored tiles when looking at monthly view .\n    if (view === \"month\") {\n      return (\n        <section className={tileClassName}>{tileCaption}</section>\n      );\n    } \n  }\n\n  /////////// render ////////////\n  return(\n    <section>\n      <section className=\"calendar-container\">\n        <Calendar tileContent={tileContent} onChange={updateStateForCalendarDayCB} value={convertToPST(daySpotlight)}/>\n      </section>\n      <CalendarDay toggleAvailCallback={toggleAvailCallback} shiftsToday={shiftsToday} shiftsOfDaySpotlight={shiftsOfDay} dateStr={daySpotlight} availStatus={availStatusOfDay}/>\n    </section>\n  );\n\n}\n\nexport default CalendarTab;\n\nCalendarTab.propTypes = {\n  empUnavails: PropTypes.arrayOf(PropTypes.object),\n  empShifts: PropTypes.arrayOf(PropTypes.object),\n  daySpotlight: PropTypes.string.isRequired,\n  shiftsToday: PropTypes.arrayOf(PropTypes.object),\n  shiftsOfDay: PropTypes.arrayOf(PropTypes.object),\n  availStatus: PropTypes.oneOfType([ PropTypes.bool, null ]),\n  unstaffedShifts: PropTypes.arrayOf(PropTypes.object), \n  updateStateForCalendarDayCB: PropTypes.func.isRequired, \n  toggleAvailCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport { formatDate } from './Helpers';\nimport PropTypes from 'prop-types';\n\nconst UnavailDays = ({sortedUnavails, freeToWorkCallback}) => {\n\n  const showUnavailsTable = () => {\n    return sortedUnavails.map(unavail => {\n      return(\n        <section key={unavail.id} className=\"employee-dash-unavails-table\">\n          <section>{formatDate(unavail.day_off)}</section>\n          <button onClick={()=>{freeToWorkCallback(unavail)}} className=\"btn btn-success margin-right-5rem\">I'm free to work</button>\n        </section>\n      );\n    })\n  }\n\n  return(\n    <section> \n      <h1 className=\"text-centered\">UNAVAILABLE DAYS</h1>\n      {showUnavailsTable()}\n    </section>\n  );\n  \n}\n\nexport default UnavailDays;\n\nUnavailDays.propTypes = {\n  sortedUnavails: PropTypes.arrayOf(PropTypes.object),\n  freeToWorkCallback: PropTypes.func.isRequired,\n};","import React, {useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { makeHeader, isPhoneValid, isEmailValid, convertToValidPhoneNumberIfInParens, convertToValidPhoneNumberIfAllNums } from './Helpers';\n\n\nconst Info = ({info, URL_endpoint, updateInfoCallback}) => {\n  const copiedPerson = JSON.parse(JSON.stringify(info));\n  const [person, setPerson] = useState(copiedPerson);\n  const [errorMsgs, setErrorMsgs] = useState([]);\n\n  const onFieldChange = (e) => {\n    person[e.target.name] = e.target.value;\n    setPerson(person);\n  }\n\n  const evalFormThenSendApi = (e) => {\n    e.preventDefault();\n\n    if (!isFormValid()) return;\n\n    const headers = makeHeader();\n    axios.put(URL_endpoint, person, {headers})\n    .then(\n      toast.success(`${person.name} updated successfully`),\n      updateInfoCallback(person)\n    )\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  const isFormValid = () => {\n    let errors = [];\n\n    // name must be present\n    if (person.name === \"\" || !person.name) {\n      errors.push(\"Name cannot be blank\");\n    }\n\n    // if phone given, make sure it's correct format\n    if (person.phone && person.phone !== \"\") {\n      if (!isPhoneValid(person.phone)) {\n        // if phone is actually in technically correct format of (425)111-2222, then we'll convert it to correct format of 425-111-2222 for user\n        const correctedPhoneNum = convertToValidPhoneNumberIfInParens(person.phone);\n        if (correctedPhoneNum) {\n          person.phone = correctedPhoneNum;\n        } else {\n          errors.push(`Phone number format invalid`);\n        }\n      } else {\n        // convert from format of '4251112222' or '14251112222' to 425-111-2222 for readability\n        const newReadablePhone = convertToValidPhoneNumberIfAllNums(person.phone);\n        person.phone = newReadablePhone;\n      }\n    }\n\n    // if email given, make sure it's correct format\n    if (person.email && person.email !== \"\") {\n      if (!isEmailValid(person.email)) {\n        errors.push(`Email invalid`);\n      }\n    }\n\n    setErrorMsgs(errors);\n    return (errors.length === 0 ? true : false);\n  }\n\n  const showErrorMsgs = (addOrUpdatedFormMsgs) => {\n    const rowsOfMsgs = addOrUpdatedFormMsgs.map( (msg,i) => {\n      return (\n        <li key={i} className=\"centered-text\">{msg}</li>\n      );\n    });\n\n    return (\n      <ul className=\"centered-children-per-row_container\">{rowsOfMsgs}</ul>\n    );\n  }\n\n  ////////////////////////////// render //////////////////////////////\n  return (\n      <section>   \n        <h1  className=\"text-centered margin-all-1rem\">MY INFO</h1>\n        <form>\n          <fieldset>\n            <section className=\"form-group margin-all-1rem\">\n              <label>NAME: {info.name}</label>\n              <input type=\"text\" className=\"form-control\" name=\"name\" onChange={onFieldChange} placeholder={\"new name here\"}/>\n              <label className=\"margin-top-1rem\">ADDRESS: {info.address}</label>\n              <input type=\"text\" className=\"form-control\" name=\"address\" onChange={onFieldChange} placeholder={\"new address here\"}/>\n              <label className=\"margin-top-1rem\">PHONE: {info.phone}</label>\n              <input type=\"text\" className=\"form-control\" name=\"phone\" onChange={onFieldChange} placeholder={\"new phone here\"}/>\n              <label className=\"margin-top-1rem\">EMAIL: {info.email}</label>\n              <input type=\"text\" className=\"form-control\" name=\"email\" onChange={onFieldChange} placeholder={\"new email here\"}/>\n            </section>\n            <section className=\"centered-children-per-row_container margin-all-1rem\">\n              {errorMsgs === [] ? null : showErrorMsgs(errorMsgs)}\n              <button onClick={evalFormThenSendApi} className=\"btn btn-primary\">UPDATE</button>\n            </section>\n          </fieldset>\n        </form>\n      </section>\n    );\n}\n\nexport default Info;\n\n\nInfo.propTypes = {\n  info: PropTypes.object, \n  URL_endpoint: PropTypes.string.isRequired, \n  updateInfoCallback: PropTypes.func.isRequired,\n};\n\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport PropTypes from 'prop-types';\nimport { formatTime, formatDate, dateInThePast, getWeekday } from './Helpers';\nimport ShiftsTable from './AdminDash_ShiftsTable';\n\nconst EmployeeDash_ShiftsTable = ({sortedOwnShifts, sortedUnstaffedShifts, sortedUnavails, takeShiftCallback, freeToWorkCallback}) => {\n\n  ////////////////// prelim work ////////////////////\n  // divide the sortedOwnShifts into active shifts (current & future) and past shifts\n  let ownActiveShifts = [];\n  let ownPastShifts = [];\n  let cloneAllOwnShifts = [...sortedOwnShifts];\n  \n  while (cloneAllOwnShifts[0]) {\n    if (dateInThePast(cloneAllOwnShifts[0].shift_date)) {\n      ownPastShifts.push(cloneAllOwnShifts.shift());\n    } else {\n      ownActiveShifts = [...cloneAllOwnShifts];\n      break;\n    }\n  }\n  \n  ////////////////// fcns ////////////////////\n  const showOwnShifts = (listOfShifts, customClassName) => {\n    return listOfShifts.map(shift => {\n      return (\n        <Accordion key={shift.id}>\n          <section>\n            <Accordion.Toggle eventKey=\"showInfo\" className={`accordion-toggle_button ${customClassName}`}>\n              <section className=\"section-4-col\">\n                <section>▼</section>\n                <section>{formatDate(shift.shift_date)}</section>\n                <section>{getWeekday(shift.shift_date)}</section>\n                <section>{shift.client.name}</section>\n              </section>\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey=\"showInfo\">\n              <section>{showWholeShiftCard(shift)}</section>\n            </Accordion.Collapse>\n\n          </section>\n        </Accordion>\n      )}\n    )\n  }\n\n  const showOwnActiveShifts = () => {\n    return showOwnShifts(ownActiveShifts, \"lightblue-bg\");\n  }\n\n  const showOwnPastShifts = () => {\n    return showOwnShifts(ownPastShifts, \"gray-bg\");\n  }\n\n  const showUnstaffedShifts = () => {\n    return(\n      <section>\n        {sortedUnstaffedShifts.map(shift => {\n          return (\n            <Accordion key={shift.id}>\n              <section>\n                <Accordion.Toggle eventKey=\"showInfo\" className={dateInThePast(shift.shift_date)? (\"accordion-toggle_button gray-bg\"):(\"accordion-toggle_button lightblue-bg\")}>\n                  <section className=\"section-4-col\">\n                    <section>▼</section>\n                    <section>{formatDate(shift.shift_date)}</section>\n                    <section>{getWeekday(shift.shift_date)}</section>\n                    <section>{shift.client.name}</section>\n                  </section>\n                </Accordion.Toggle>\n\n                <Accordion.Collapse eventKey=\"showInfo\">\n                  <section>{showWholeShiftCard(shift, true)}</section>\n                </Accordion.Collapse>\n\n              </section>\n            </Accordion>\n          )}\n        )}\n      </section>\n    );\n  }\n\n  const showWholeShiftCard = (shift, takeButton=false) => {\n    return (\n      <section>\n        <section className={dateInThePast(shift.shift_date)? (\"card-shift gray-bg\"):(\"card-shift lightblue-bg\")} >\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client\">\n          <p>CLIENT</p>\n          { shift.client ? <p>{shift.client.name}</p> : <p></p> }\n          <p>PHONE</p>\n          { shift.client ? <p>{shift.client.phone}</p> : <p></p> }\n          <p>EMAIL</p>\n          { shift.client ? <p>{shift.client.email}</p> : <p></p> }\n          <p>ADDRESS</p>\n          { shift.client ? <p>{shift.client.address}</p> : <p></p> }\n        </section>\n\n        { takeButton ? showTakeShiftSection(shift) : null}\n\n      </section>\n    );\n  }\n\n  const isEmpBookedElsewhere = (possibleDate) => {\n    for (const shift of sortedOwnShifts) {\n      if (shift.shift_date > possibleDate) {\n        return false;\n      } else if (shift.shift_date === possibleDate) {\n        return true;\n      }\n    }  \n  } \n\n  const isEmpOffThatDay = (possibleDate) => {\n    for (const unavail of sortedUnavails) {\n      if (unavail.day_off > possibleDate) {\n        return false;\n      } else if (unavail.day_off === possibleDate) {\n        return true;\n      }\n    }  \n  } \n\n  const showTakeShiftSection = (shift) => {\n    const bookedElsewhere = isEmpBookedElsewhere(shift.shift_date);\n    const offThatDay = isEmpOffThatDay(shift.shift_date);\n    const cannotWork = bookedElsewhere || offThatDay;\n\n    if (cannotWork) {\n      if (bookedElsewhere) {\n        // TODO: This never gets triggered, already sifted out in EmployeeDash.showAllShifts(). Clean up!\n        return (\n          <section className=\"gray-bg text-centered margin-all-1rem\">\n            <p className=\"padding-all-1rem\">You are already working elsewhere that day!</p>\n            </section>\n        );\n      } else if (offThatDay) {\n        return (\n          <section className=\"gray-bg text-centered margin-all-1rem\">\n            <p className=\"padding-top-1rem\">You have the day off but you can change your mind!</p>\n            {/* Clicking on this button will result in re-rendering this section as 'eligible for shift', user should see lightblue-bg w/ blue button b/c reeval'd cannot=false */}\n            <button onClick={() =>{removeUnavail(shift)}} className=\"btn btn-success margin-all-1rem\">I can work</button>\n            </section>\n        );\n      }\n      \n    } else {\n      return (\n        <section className=\"lightblue-bg text-centered margin-all-1rem\">\n          <p className=\"padding-top-1rem\">You are eligible for this shift!</p>\n          <button onClick={() =>{takeShiftCallback(shift)}} className=\"btn btn-primary margin-all-1rem\">Take the shift</button>\n          </section>\n      );\n    }\n  }\n\n  const removeUnavail = (shift) => {\n    const unavailObj = sortedUnavails.find(unavail => unavail.day_off === shift.shift_date );\n    freeToWorkCallback(unavailObj);\n  }\n\n  ////////////////// render ////////////////////\n  if (!sortedOwnShifts) {\n    // TODO: this never happens, sortedOwnShifts gen'd synchronously.  Did I leave this in for some reason?\n    return (\n      <section>\n        <h1 className=\"text-centered\">MY SHIFTS</h1>\n        <p>Nothing yet...</p>\n        \n        <h1 className=\"text-centered\">AVAILABLE SHIFTS</h1>\n        {showUnstaffedShifts()}\n      </section>\n    );\n\n  } else {\n    return(\n      <section>\n        <h1 className=\"text-centered\">MY SHIFTS</h1>\n        {showOwnActiveShifts()}\n        <h1 className=\"text-centered\">AVAILABLE SHIFTS</h1>\n        {showUnstaffedShifts()}\n        <h1 className=\"text-centered\">PAST SHIFTS</h1>\n        {showOwnPastShifts()}\n      </section>\n    );\n  }    \n}\n\nexport default EmployeeDash_ShiftsTable;\n\n\nShiftsTable.propTypes = {\n  sortedOwnShifts: PropTypes.arrayOf(PropTypes.object), \n  sortedUnstaffedShifts: PropTypes.arrayOf(PropTypes.object), \n  sortedUnavails: PropTypes.arrayOf(PropTypes.object), \n  takeShiftCallback: PropTypes.func.isRequired, \n  freeToWorkCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport CalendarTab from './EmployeeDash_CalendarTab';\nimport UnavailDays from './EmployeeDash_UnavailDays';\nimport Info from './EmployeeDash_Info';\nimport ErrorGeneral from './ErrorGeneral';\nimport axios from 'axios';\nimport ShiftsTable from './EmployeeDash_ShiftsTable';\nimport { makeHeader, convertDateString, sortUnavailsByDate, sortShiftsByDate, deepCompareTwoSchedArrayss } from './Helpers';\n\n//https://www.hobo-web.co.uk/best-screen-size/  \n// 360x640\n// 1366 x 768\n// 1920x1080   \n\nexport default class EmployeeDash extends React.Component {\n\n  constructor() {\n    super()\n    const today = convertDateString(new Date())\n    this.state = {\n      EMP_DASH: process.env.REACT_APP_EMP_DASH+\"/\"+sessionStorage.getItem('databaseId'),\n      empInfo: [],\n      empUnavails: [],\n      empShifts: [],\n      daySpotlight: today,\n      shiftsToday: [],\n      shiftsOfDay: [],\n      availStatusOfDay: null,\n      show: 'calendar',\n      unstaffedShifts: []\n    }\n  }\n\n  getEmpInfo = (headers) => axios.get(this.state.EMP_DASH, {headers});\n  getEmpShifts = (headers) => axios.get(this.state.EMP_DASH+\"/shifts\", {headers});\n  getEmpUnavails = (headers) => axios.get(this.state.EMP_DASH+\"/unavails\", {headers});\n  getUnstaffedShifts = (headers) => axios.get(this.state.EMP_DASH+\"/unstaffedShifts\", {headers});\n  \n  componentDidMount() {\n    // initial loading of data from database\n    const headers = makeHeader();\n\n    axios.all([\n      this.getEmpInfo(headers), \n      this.getEmpShifts(headers), \n      this.getEmpUnavails(headers),\n      this.getUnstaffedShifts(headers)\n    ])\n      .then(axios.spread((...responses) => {\n        const empInfo = responses[0].data;\n        const empShifts = responses[1].data;\n        const empUnavails = responses[2].data;\n        const unstaffedShifts = responses[3].data;\n        \n        // meanwhile find out if there's any shifts to autoload for today's calendar\n        const today = convertDateString(new Date());\n        const shiftsToday = empShifts.filter( shift => shift.shift_date === today );\n        // also find out if need to autoload if today is a day off\n        const canWorkBool = this.canTheyWorkThisDay(today, shiftsToday, empUnavails);\n\n        this.setState({\n          empInfo: empInfo,\n          empShifts: empShifts,\n          empUnavails: empUnavails,\n          shiftsToday: shiftsToday,\n          shiftsOfDay: shiftsToday,\n          availStatusOfDay: canWorkBool,\n          unstaffedShifts: unstaffedShifts\n        });\n        }))\n        .catch(errors => toast.error(`ERROR: ${errors.message}`));\n  }\n  \n  ////////////////////// set DISPLAY choice //////////////////////\n  setShowCategory = (chosen) => this.setState({show: chosen});\n\n  showChosenCategory = () => {\n    const chosen = this.state.show;\n    \n    if (chosen === \"calendar\") {\n      return this.showCalendar();\n    } else if (chosen === \"shifts\") {\n      return this.showAllShifts();\n    } else if (chosen === \"unavails\") {\n      return this.showAllUnavails();\n    } else if (chosen === \"info\") {\n      return this.showAllInfo();\n    }\n  }\n\n  showAllInfo = () => {\n    return <Info info={this.state.empInfo} URL_endpoint={this.state.EMP_DASH} updateInfoCallback={this.updateInfo}/>;\n  }\n\n  ////////////////////// DISPLAY: shifts tab //////////////////////\n  showAllShifts = () => {\n    const sortedOwnShifts = sortShiftsByDate(this.state.empShifts);\n    const sortedUnavails = sortUnavailsByDate(this.state.empUnavails);\n    const allSortedUnstaffedShifts = sortShiftsByDate(this.state.unstaffedShifts);\n    \n    let sortedUnstaffedShifts = allSortedUnstaffedShifts.filter( unstaffed => {\n      // Emp does NOT need to see...  1. unstaffed shifts that are in the past\n      // TODO: This can be improved by backend not sending this to begin with\n      const today = convertDateString(new Date());\n      if (unstaffed.shift_date < today) return false;\n\n      // 2. unstaffed shifts that coincide with their own booked days\n      for (const ownShift of sortedOwnShifts) {\n        if (unstaffed.shift_date === ownShift.shift_date) return false;\n        if (unstaffed.shift_date < ownShift.shift_date) break;\n      }\n\n      // if this unstaffed shift hasn't been disqualified by now, then employee can see it\n      return true;\n    })\n\n    return (<ShiftsTable sortedOwnShifts={sortedOwnShifts} sortedUnstaffedShifts={sortedUnstaffedShifts} sortedUnavails={sortedUnavails} freeToWorkCallback={this.freeToWork} takeShiftCallback={this.takeShift}/>);\n  }\n\n  ////////////////////// DISPLAY: own unavails tab //////////////////////\n  showAllUnavails = () => {\n    const empUnavails = this.state.empUnavails;\n    const sortedUnavails = sortUnavailsByDate(empUnavails);\n\n    if (empUnavails.length === 0) {\n      return (\n        <h3 className=\"text-centered margin-all-1rem\">No upcoming unavailable days</h3>\n      );\n    } else {\n      return(\n      <section>\n        <UnavailDays sortedUnavails={sortedUnavails} freeToWorkCallback={this.freeToWork}/>\n      </section>\n    );\n    }\n  }\n  \n  ////////////////////// DISPLAY: calendar tab //////////////////////\n\n  showCalendar = () => {\n    return <CalendarTab \n      empUnavails={this.state.empUnavails}\n      empShifts={this.state.empShifts}\n      daySpotlight={this.state.daySpotlight}\n      shiftsToday={this.state.shiftsToday}\n      shiftsOfDay={this.state.shiftsOfDay}\n      availStatusOfDay={this.state.availStatusOfDay}\n      unstaffedShifts={this.state.unstaffedShifts}\n      updateStateForCalendarDayCB={this.updateStateForCalendarDay}\n      toggleAvailCallback={this.toggleAvail}\n    />;\n  }\n\n  updateStateForCalendarDay = (e) => {\n    const dateStr = convertDateString(e);\n\n    const shiftsOfDay = this.state.empShifts.filter( shift => shift.shift_date === dateStr);\n    const canWorkBool = this.canTheyWorkThisDay(dateStr, shiftsOfDay, this.state.empUnavails);\n    this.setState({ \n      daySpotlight: dateStr, \n      shiftsOfDay: shiftsOfDay, \n      availStatusOfDay: canWorkBool })\n  }\n\n  canTheyWorkThisDay = (dateStr, shiftsOfThatDay, unavails_list) => {\n    // are you already working today?\n    if (shiftsOfThatDay.length > 0) {\n      return false;\n    }\n    // do u have today off?\n    for (const unavail of unavails_list) {\n      if (unavail.day_off === dateStr) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  ////////////////////// Callback fcns & related helpers //////////////////////\n  freeToWork = (unavailObj) => {\n    const headers = makeHeader();\n    axios.delete(this.state.EMP_DASH + `/unavails/${unavailObj.id}`, {headers})\n      .then( response => {\n        // quick update on front end to match db\n        // response.data is the latest data from Unavails table in db for this employee\n        this.setState({ empUnavails: response.data, availStatusOfDay: true });\n      })  \n      .catch(error => toast.error(`ERROR deleting from db: ${error.message}`));\n  }\n\n  toggleAvail = (availBoolean) => {\n    let latestEmpUnavails = [...this.state.empUnavails];\n\n    if (availBoolean) {\n      // emp wants to work -> delete row from unavails table in db\n      // find id from this.state.empUnavails\n      const unavailObj = this.state.empUnavails.find( unavail => unavail.day_off === this.state.daySpotlight );\n      this.freeToWork(unavailObj);\n\n    } else {\n      const headers = makeHeader();\n      // emp wants day off -> post/add to unavails table in db\n      axios.post((this.state.EMP_DASH + `/unavails`), { day_off: this.state.daySpotlight }, { headers })\n      .then( response => {\n        // quick update on front end to match db\n        latestEmpUnavails.push( response.data );\n        this.setState({ empUnavails: latestEmpUnavails, availStatusOfDay: false });\n      } )   \n      .catch(error => toast.error(`ERROR adding from db: ${error.message}`));\n    }\n  }\n\n  takeShift = (shift) => {    \n    const URL_endpoint = this.state.EMP_DASH+`/shifts/${shift.id}`;\n    const headers = makeHeader();\n\n    // JS weirdness!!! axios HAS to have somehting as the 2nd arg, bc it thinks it's the parameter, \n    // if I had put {headers} in the 2nd arg, then jbackend will NOT recog the headers bc it's looking for something in the 3rd arg\n    axios.put(URL_endpoint, null, {headers})\n    .then(response => {\n      // RACE CONDITION!  If another employee accepted it before you did, then current list wouldn't change\n      // need to compare the arrays of existing this.state.empShifts VS response.data... \n        // if same, then user did NOT actually get the shift\n        // if not, then user did successfully get the shift, plus save this new state\n        if (deepCompareTwoSchedArrayss(this.state.empShifts, response.data)) {\n          toast.error(\"UH OH! Shift was just taken by someone else 😕\");\n        } else {\n          // api sending back current list of emp's shifts\n          toast.success(\"The shift is yours! Huzzah! 🥳\")\n          this.setState({ empShifts: response.data })\n        }\n        \n        // need to update state unstaffedShifts[] either way, b/c now that shift is no longer unavailable\n        this.updateLatestUnstaffedShifts();\n    })\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  updateLatestUnstaffedShifts = () => { \n    const headers = makeHeader();\n    axios.get(this.state.EMP_DASH+\"/unstaffedShifts\", {headers})\n    .then( response => this.setState({ unstaffedShifts: response.data}))\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n  \n  updateInfo = (newEmpInfo) => {\n    this.setState({ empInfo: newEmpInfo });\n  }\n  ////////////////////// render //////////////////////\n  render() {\n\n      if (this.props.authenticatedRole !== \"EMPLOYEE\") {\n        return <ErrorGeneral message=\"Please log in to see EMPLOYEE dashboard\" icon=\"lock\"/>\n      }\n\n      return (\n        <section>\n\n        <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\">\n            <Navbar.Brand onClick={()=>this.setShowCategory('calendar')}>CALENDAR</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={()=>this.setShowCategory('shifts')}>SHIFTS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('unavails')}>UNAVAILABLE DAYS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('info')}>INFO</Nav.Link>\n            </Nav>\n        </Navbar>\n\n        {this.showChosenCategory()}\n\n        </section>\n      );\n    }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hourglass from '../images/hourglass.svg';\nimport thumbsUp from '../images/thumbsUp.svg';\nimport twoPeopleInteract from '../images/twopeopleinteract.svg';\n\nfunction MessageComponent({ icon, message }) {\n\n  const showSpecificIcon = () => {\n    if (icon === \"hourglass\") {\n      return <img src={hourglass} alt=\"hourglass\" className=\"homepage-logo\"/>\n    } else if (icon === \"thumbsUp\") {\n      return <img src={thumbsUp} alt=\"thumbs up\" className=\"homepage-logo\"/>\n    } else {\n      return <img src={twoPeopleInteract} alt=\"2 people interacting\" className=\"homepage-logo\"/>\n    }\n  }\n\n  return (\n    <section>\n      <h1 className=\"text-centered\">{message}</h1>\n      {showSpecificIcon()}\n    </section>\n  );\n}\n\nexport default MessageComponent;\n\nMessageComponent.propTypes = {\n  icon: PropTypes.string,\n};","import React, { useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport ErrorGeneral from './ErrorGeneral';\nimport MessageComponent from './MessageComponent';\nimport { formatTime, makeHeader } from './Helpers';\nimport { toast } from 'react-toastify';\n\nexport default function LinkTextedToEmployee({match}) {\n  const URL_ENDPOINT = `${process.env.REACT_APP_TEXTED_LINK}/${match.params.uuid}`;\n\n  const [shiftOrMsg, setShiftOrMsg] = useState(\"LOADING\");\n\n  const headers = makeHeader();\n\n  const getFromDb = () => {\n    // if shift is still available, response from backend will be the shift obj, otherwise null\n    axios.get(URL_ENDPOINT, {headers})\n      .then(response => setShiftOrMsg(response.data))\n      \n  }\n\n  const acceptShift = () => {\n    // send API call to backend to accept shift\n    // response from backend will be a boolean, as to whether user really got the shift, or if someone else beat them to it\n    axios.post(URL_ENDPOINT, {headers})\n    .then(response => setShiftOrMsg(response.data))\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  ///////////////////////// render //////////////////////////\n\n  if (shiftOrMsg === \"LOADING\") {\n    getFromDb();\n    return <MessageComponent message=\"Loading...\" icon=\"hourglass\"/>;\n\n  } else if (shiftOrMsg === null || shiftOrMsg === false) {\n    // you'll see this if... 1. clicked on link after shift is taken.\n    // 2. clicked on link before shift is taken, but clicked confirm after someone else did. \n    // 3. if you typed in base-url/text/{bogus-uuid-here}\n    return <ErrorGeneral message=\"Sorry, shift is taken\" icon=\"stopwatch\"/>;\n  \n  } else if (shiftOrMsg === true) {\n    return <MessageComponent message=\"YAY YOU GOT IT!\" icon=\"thumbsUp\"/>;\n\n  } else {\n    // there's a real shift in the state, not just a msg placeholder\n    const shift = shiftOrMsg;\n\n    return (\n      <section className=\"homepage-section\">\n        <h1 className=\"text-centered\">Please Confirm Below</h1>\n        <section className=\"card-shift lightblue-bg\">\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client\">\n          <p>CLIENT</p>\n          <p>{shift.client.name}</p>\n          <p>PHONE</p>\n          <p>{shift.client.phone}</p>\n          <p>EMAIL</p>\n          <p>{shift.client.email}</p>\n          <p>ADDRESS</p>\n          <p>{shift.client.address}</p>\n        </section>\n\n        <section className=\"text-centered\">\n          <button onClick={acceptShift} className=\"btn btn-primary\">YES, I WANT THIS SHIFT!</button>\n          <li className=\"fine-print\">This shift will appear on your employee dashboard after you accept.</li>\n          <li className=\"fine-print\">Close this window if you want to cancel.</li>\n          <li className=\"fine-print\">Or login above to access your dashboard for other options.</li>\n        </section>\n        \n      </section>\n    );\n  }\n}\n\nLinkTextedToEmployee.propTypes = {\n  match: PropTypes.object,\n};","import React from 'react';\nimport twoPeople from '../images/twopeople.svg';\n\nexport default function Homepage() {\n\n  return (\n    <section className=\"homepage-section text-centered\">\n      <img src={twoPeople} alt=\"2 people\" className=\"homepage-logo\"/>\n    </section>\n  );\n  \n}\n","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { makeHeader } from './components/Helpers';\nimport LoginBanner from './components/LoginBanner';\nimport Footer from './components/Footer';\nimport AdminDash from './components/AdminDash';\nimport EmployeeDash from './components/EmployeeDash';\nimport LinkTextedToEmployee from './components/Employee_TextedLink';\n\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport Homepage from './components/Homepage';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      authenticatedRole: \"\",       \n      googleId: \"\",\n      username: \"\",\n      databaseId: \"\"\n    }\n    sessionStorage.setItem('authenticatedRole', '');   \n    sessionStorage.setItem('googleId', '');\n    sessionStorage.setItem('googleAccessToken', '');\n    sessionStorage.setItem('username', '');    \n    sessionStorage.setItem('databaseId', '');\n  }\n\n  login = () => {\n    const googleId = sessionStorage.getItem('googleId');\n    const googleAccessToken = sessionStorage.getItem('googleAccessToken');\n\n    const loginParams = { \"googleId\": googleId, \"googleAccessToken\": googleAccessToken, \"uuid\": \"\"}\n    const headers = makeHeader();\n    const endpoint = process.env.REACT_APP_LOGIN;\n\n    axios.post(endpoint, loginParams, {headers})\n      .then(response => {\n        if (Object.entries(response.data).length === 0) {\n          sessionStorage.setItem('authenticatedRole', \"NEED UUID\");\n          this.setState({ authenticatedRole: \"NEED UUID\" });\n        }\n        const authenticatedRoleDB = Object.keys(response.data)[0];\n        const usernameDB = Object.values(response.data)[0].name;\n        const databaseId = Object.values(response.data)[0].id;\n\n        sessionStorage.setItem('authenticatedRole', authenticatedRoleDB);\n        sessionStorage.setItem('username', usernameDB);\n        sessionStorage.setItem('databaseId', databaseId);\n\n        this.setState({\n          authenticatedRole: authenticatedRoleDB,\n          googleId: googleId,\n          username: usernameDB,\n          databaseId: databaseId      \n        })\n\n        this.greetToast(usernameDB);\n        \n      })\n      .catch(error => {\n        if (sessionStorage.getItem('authenticatedRole') !== \"NEED UUID\") {\n          toast.error(`LOGIN ERROR! ${error.message}`);\n        }\n      });\n  }\n\n  demoLogin = (demoRole) => {\n    let usernameDB = \"demoUser\";\n    let googleId = \"demoGoogleId\";\n    let databaseId = \"demoDatabaseId\";\n\n    sessionStorage.setItem('authenticatedRole', demoRole);\n    sessionStorage.setItem('username', usernameDB);\n    sessionStorage.setItem('databaseId', databaseId);\n\n    this.setState({\n      authenticatedRole: demoRole,\n      googleId: googleId,\n      username: usernameDB,\n      databaseId: databaseId      \n    })\n\n    this.greetToast(usernameDB);\n  }\n\n  greetToast = (usernameDB) => {\n    const hourNow = (new Date()).getHours();\n    let greetingBasedOnHour;\n    if (hourNow < 12) {\n      greetingBasedOnHour = \"Good morning\";\n    } else if (hourNow < 17) {\n      greetingBasedOnHour = \"Good afternoon\";\n    } else {\n      greetingBasedOnHour = \"Good evening\";\n    }\n    \n    toast.success(`${greetingBasedOnHour}, ${usernameDB} 😄`);\n  }\n\n  logout = () => {\n    this.setState({\n      authenticatedRole: \"\",  \n      googleId: \"\",\n      username: \"\",\n      databaseId: \"\"\n    })\n    toast.success(`Goodbye ${sessionStorage.getItem('username')} 👋`);\n\n    sessionStorage.clear();\n  }\n\n  render() {\n    const role = this.state.authenticatedRole;\n    const username = this.state.username;\n    const googleId = this.state.googleId;\n    const databaseId = this.state.databaseId;\n\n    return (\n      \n      <Router>\n        <LoginBanner authenticatedRole={this.state.authenticatedRole} googleAuthCallback={this.login} demoLoginCallback={this.demoLogin} logoutCallback={this.logout}/>\n        \n        {role === \"ADMIN\" ? (<Redirect to=\"/adminDash\" component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />): null}\n        {role === \"EMPLOYEE\" ? (<Redirect to=\"/employeeDash\" component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />): null}\n  \n          <Switch>   \n            {/* Displays only 1 of these components based on on what the URL is */}\n            <Route path=\"/\" exact component={Homepage}/>    \n            <Route path=\"/adminDash\" component={() => <AdminDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />\n            <Route path=\"/employeeDash\" exact component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />\n            \n            {/* This route is for users coming from the link admin texted them, so they can take a specific avail shift */}\n            <Route path=\"/text/:uuid\"  component={LinkTextedToEmployee} />\n\n          </Switch>\n\n          <Footer />\n          <ToastContainer />\n      </Router>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/redCrossFlag.e167e2a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/SPPbanner2.596567f0.png\";","module.exports = __webpack_public_path__ + \"static/media/alarmClock.9268d350.svg\";","module.exports = __webpack_public_path__ + \"static/media/stopwatch.a3e987a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.35659b9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/questionBubble.afa013ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/comboLock.c9894358.svg\";","module.exports = __webpack_public_path__ + \"static/media/hourglass.9d9b9d62.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumbsUp.e134f0b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/twopeopleinteract.41c40a5f.svg\";","module.exports = __webpack_public_path__ + \"static/media/twopeople.65b701d4.svg\";"],"sourceRoot":""}