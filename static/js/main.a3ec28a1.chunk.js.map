{"version":3,"sources":["components/Helpers.js","images/SPPbanner2.png","components/LoginBanner.js","images/redCrossFlag.svg","components/Footer.js","components/AdminDash_CalendarDay.js","components/AdminDash_NewShift.js","components/AdminDash_CalendarTab.js","components/AdminDash_ShiftsTable.js","components/ToastUndo.js","components/AdminDash_PeopleTable.js","images/alarmClock.svg","images/stopwatch.svg","images/warning.svg","images/questionBubble.svg","images/comboLock.svg","components/ErrorGeneral.js","components/AdminDash.js","components/EmployeeDash_CalendarDay.js","components/EmployeeDash_CalendarTab.js","components/EmployeeDash_UnavailDays.js","components/EmployeeDash_Info.js","components/EmployeeDash_ShiftsTable.js","components/EmployeeDash.js","images/hourglass.svg","images/thumbsUp.svg","images/twopeopleinteract.svg","components/MessageComponent.js","components/Employee_TextedLink.js","images/twopeople.svg","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["makeHeader","sessionStorage","getItem","convertToPST","dateStr","newTime","Date","convertDateString","timeObj","year","getFullYear","month","getMonth","day","getDate","toString","getWeekday","timeStr_or_timeObj","weekdayArray","Array","getDay","formatTime","timeStr","hours","parseInt","slice","formatDate","arg_date","date","toLocaleString","getUTCDate","sortUnavailsByDate","listOfUnavails","sort","a","b","day_off","sortShiftsByDate","listOfShifts","shift_date","dateInThePast","isPhoneValid","phoneStr","length","canStringBeInteger","areaCode","phone3","phone4","areStringsInListAllIntegers","firstDigit","str","nonZeroStr","list_of_strings","convertToValidPhoneNumberIfAllNums","convertToValidPhoneNumberIfInParens","isEmailValid","email","test","String","toLowerCase","sortById","listOfObjs","id","LoginBanner","authenticatedRole","googleAuthCallback","demoLoginCallback","logoutCallback","useState","uuid","setUuid","showModal","setShowModal","handleCloseModal","handleShowModal","responseGoogle","response","googleId","profileObj","setItem","responseGoogleFail","console","log","showDemoLogins","loginAs","demoRole","onClick","showGoogleLogin","className","clientId","process","REACT_APP_GOOGLE_CLIENT_ID","buttonText","onSuccess","onFailure","cookiePolicy","to","src","bannerLogo","alt","name","showDashWithLogout","Modal","show","onHide","Header","closeButton","Title","Body","type","onChange","e","target","value","placeholder","preventDefault","loginParams","URL_endpoint","REACT_APP_LOGIN","headers","axios","post","then","roleDB","Object","keys","data","toast","error","catch","message","Homepage","redCrossFlag","href","rel","CalendarDay","basicShiftsInfo","showColorBasedOnDay","map","shift","client","employee","start_time","end_time","NewShift","daySpotlight","allClients","availEmpsOfDay","updateAllShiftsCallback","textEmployeesCallback","ALL_SHIFTS","REACT_APP_ALL_SHIFTS","setClientId","defaultStartTime","defaultEndTime","startTime","setStartTime","endTime","setEndTime","isFormValid","onTimeChange","onSubmit","clientObj","find","jsonForNewShiftAPI","newShift","defaultValue","rowsOfMsgs","errorMsgs","push","genErrorMsgs","msg","i","showErrorMsgs","disabled","CalendarTab","allShifts","today","setDaySpotlight","shiftsOfDay","setShiftsOfDay","setAvailEmpsOfDay","getAndSetShiftsOfDay","targetDateStr","getAndSetAvailEmpsByDate","URL_getAllAvailEmpsByDate","REACT_APP_GET_AVAIL_EMPS_FOR_DAY","get","showAccordionHeaderColor","showRowsOfEmps","emp","phone","tileContent","view","tileCaption","tileClassName","targetDate","Accordion","Toggle","eventKey","Collapse","ShiftsTable","setPastVsCurrentShifts","currentShifts","pastShifts","props","setState","showShiftsTable","timeCategory","primaryColorClass","secondaryColorClass","showEmpNameOrButton","showWholeShiftCard","clientInfo","address","showEmployeeCardSection","showEmpInCard","showAvailEmpsInCard","colorClass","employeeInfo","state","availEmployeesByShiftId","availEmpList","empList","from","numEmps","rowsOfEmps","allUnstaffedShifts","this","filter","axiosGetFcns","unstaffedShift","URL","REACT_APP_GET_AVAIL_EMPS_FOR_SHIFT","all","spread","responses","shiftId","errors","React","Component","ToastUndo","undo","closeToast","PeopleTable","personType","peopleList","setStateKey","updatePeopleListCB","personSpotlight","setPersonSpotlight","updateSpotlightBool","setUpdateSpotlightBool","updatedPerson","setUpdatedPerson","active","newPerson","addFormErrorMsgs","setAddFormErrorMsgs","updateFormErrorMsgs","setUpdateFormErrorMsgs","personInPurgatory","uuidv4","require","showPersonSpotlight","person","onUpdateFieldChange","sendUpdateAPI","onAddFieldChange","sendAddAPI","success","newOrUpdatedPerson","setAddOrUpdatedFormMsgs","newReadablePhone","correctedPhoneNum","addOrUpdatedFormMsgs","toggleAsPersonSpotlight","selectedPerson","read","update","copiedPerson","JSON","parse","stringify","put","deactivate","onClose","sendDeleteAPIOrNot","delete","toUpperCase","showAddSection","showAll","ErrorGeneral","icon","alarmClock","stopwatch","warning","lock","questionBubble","ALL_EMPS","REACT_APP_ALL_EMPS","ALL_CLIENTS","REACT_APP_ALL_CLIENTS","ALL_ADMINS","REACT_APP_ALL_ADMINS","ALL_UNAVAILS","SEND_TEXT","REACT_APP_TEXT_EMPS","AdminDash","getAllEmpsDB","getAllClientsDB","getAllAdminsDB","getAllShiftsDB","getAllUnavailsDB","setShowCategory","chosen","showChosenCategory","showCalendar","showAllAdmins","showAllEmployees","showAllClients","showAllShifts","updateAllShifts","textEmployees","allEmployees","updatePeopleList","allAdmins","sortedShifts","shiftObj","textableEmployees","info","allAxiosPostReqs","FRONT_END_URL","REACT_APP_FRONT_END_URL","personalizedMsg","jsonForTextAPI","longStr","numberCharsToShow","fullErrorMsg","badPhone","config","phoneNumber","unreachableEmp","reason","includes","allUnavails","allShiftsSorted","Navbar","bg","variant","sticky","Brand","Nav","Link","shiftsToday","shiftsOfDaySpotlight","availStatus","toggleAvailCallback","showShifts","shiftsInArray","inThePast","showAgendaOrOptions","empUnavails","empShifts","availStatusOfDay","updateStateForCalendarDayCB","unstaffedShifts","isDateInEmpUnavails","isDateInEmpShifts","UnavailDays","sortedUnavails","freeToWorkCallback","unavail","Info","updateInfoCallback","setPerson","setErrorMsgs","onFieldChange","EmployeeDash_ShiftsTable","sortedOwnShifts","sortedUnstaffedShifts","takeShiftCallback","ownActiveShifts","ownPastShifts","cloneAllOwnShifts","showOwnShifts","customClassName","showUnstaffedShifts","takeButton","showTakeShiftSection","bookedElsewhere","possibleDate","isEmpBookedElsewhere","offThatDay","isEmpOffThatDay","removeUnavail","unavailObj","propTypes","PropTypes","arrayOf","object","func","isRequired","EmployeeDash","getEmpInfo","EMP_DASH","getEmpShifts","getEmpUnavails","getUnstaffedShifts","showAllUnavails","showAllInfo","empInfo","updateInfo","unstaffed","ownShift","freeToWork","takeShift","updateStateForCalendarDay","toggleAvail","canWorkBool","canTheyWorkThisDay","shiftsOfThatDay","unavails_list","availBoolean","latestEmpUnavails","array1","array2","sortedArray1","sortedArray2","_","isEqual","deepCompareTwoSchedArrayss","updateLatestUnstaffedShifts","newEmpInfo","REACT_APP_EMP_DASH","MessageComponent","hourglass","thumbsUp","twoPeopleInteract","LinkTextedToEmployee","match","URL_ENDPOINT","REACT_APP_TEXTED_LINK","params","shiftOrMsg","setShiftOrMsg","twoPeople","App","login","googleAccessToken","endpoint","entries","authenticatedRoleDB","usernameDB","values","databaseId","username","greetToast","demoLogin","greetingBasedOnHour","optionalExtraMsg","hourNow","getHours","logout","clear","role","component","path","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3ec28a1.chunk.js","sourcesContent":["import _ from 'underscore';\n\nexport const makeHeader = () => {\n  const googleId = sessionStorage.getItem('googleId');\n  const googleAccessToken = sessionStorage.getItem('googleAccessToken');\n  return {\"googleId\": googleId, \"googleAccessToken\": googleAccessToken};\n}\n\nexport const convertToPST = (dateStr) => {\n  // UTC to PST conversion:\n  // takes a dateStr of 'YYYY-MM-DD' in UTC time and convert it to a timeStr in Pacific Standard Time\n  // PST is ahead of UTC by 8 hours, so this method will return the PST's actual timeStr, if the given arg timeStr falls in that 8 hr gap wacky zone\n  // Date('2020-1-1') returns UTC of 12/30 midnight, BOO!!!\n  // Date('2020-1-1 00:00-0800') returns correct 1/1, YES!!!\n  // obviously I\"m assuming the end user lives in PST...\n\n  const newStr = dateStr + \" 00:00-0800\";\n  const newTime = new Date(newStr);\n  return new Date(newTime);\n}\n\nexport const convertDateString = (timeObj) => {\n  // For data comparison purposes, between JS time obj and postgres's date column format\n  // Takes time obj (such as from JS), converts it to \"YYYY-MM-DD\"\n  // \"YYYY-MM-DD\" is the shift_date format that comes from backend's postgres db\n  const year = timeObj.getFullYear();\n  let month = timeObj.getMonth() + 1;\n  let day = timeObj.getDate();\n\n  if (month < 10) { month = \"0\" + month.toString() }\n  if (day < 10) { day = \"0\" + day.toString() }\n\n  return `${year}-${month}-${day}`;\n}\n\nexport const getWeekday = (timeStr_or_timeObj) => {\n  // takes in either a timeStr like \"2020-02-28\" or a Date() object,\n  // returns an abbrev'd weekday string\n\n  let timeObj;\n  if (typeof(timeStr_or_timeObj) === \"string\") {\n    timeObj = convertToPST(timeStr_or_timeObj);\n  } else {\n    timeObj = timeStr_or_timeObj;\n  }\n  \n  let weekdayArray = new Array(7);\n  weekdayArray[0] = \"Sun\";\n  weekdayArray[1] = \"Mon\";\n  weekdayArray[2] = \"Tues\";\n  weekdayArray[3] = \"Wed\";\n  weekdayArray[4] = \"Thurs\";\n  weekdayArray[5] = \"Fri\";\n  weekdayArray[6] = \"Sat\";\n\n  return weekdayArray[timeObj.getDay()];\n}\n\nexport const formatTime = (timeStr) => {\n  // takes \"HH:MM:SS\" and turns it into \"HH:MM AM/PM\"\n  let hours = parseInt(timeStr.slice(0,2));\n  if (hours < 12) {\n    if (timeStr[0] === \"0\") {\n      return (timeStr.slice(1,5)+\" A.M.\");\n    } else {\n      return (timeStr.slice(0,5)+\" A.M.\");\n    }\n  } else {\n    hours -= 12;\n    return (hours+timeStr.slice(2,5)+\" P.M.\");\n  }\n}\n\nexport const formatDate = (arg_date) => {\n  // For visual display purposes\n  // Takes a date string like \"YYYY-MM-DD\" and converts to human-friendly \"Jan 15, 2020\"\n  const date = convertToPST(arg_date);\n  const month = date.toLocaleString('default', { month: 'short' });\n  const day = date.getUTCDate();\n  const year = date.getFullYear();\n\n  return `${month} ${day}, ${year}`\n}\n\nexport const sortUnavailsByDate = (listOfUnavails) => {\n  const sorted = listOfUnavails.sort((a,b) => {\n    return (b.day_off < a.day_off ? 1:-1);\n  });\n  return sorted;\n}\n\nexport const sortShiftsByDate = (listOfShifts) => {\n  const sorted = listOfShifts.sort((a,b) => {\n    return (b.shift_date <= a.shift_date ? 1:-1);\n  });\n  return sorted;\n}\n\nexport const dateInThePast = (dateStr) => {\n  const todayStr = convertDateString(new Date());\n  return todayStr > dateStr;\n}\n\nexport const isPhoneValid = (phoneStr) => {\n  // returns True if phoneStr fits any of these acceptable formats for Twilio texting: \n    // \"4251112222\"       // Length = 10\n    // \"14251112222\"      // Length = 11\n    // \"425-111-2222\"     // Length = 12\n    // \"1-425-111-2222\"   // Length = 14\n  // else returns False, including \"(425)111-2222\", so will have convertToValidPhoneNumberIfInParens() for that, to minimize user interruption\n\n  if (!phoneStr) return false;\n  if (phoneStr.length < 10 || phoneStr.length > 14) return false;\n\n  if (phoneStr.length === 10 || phoneStr.length === 11) return canStringBeInteger(phoneStr);\n  \n  if (phoneStr.length === 12) {\n    // check the non-numerical parts\n    if ((phoneStr[3] !== \"-\") || (phoneStr[7] !== \"-\")) return false;\n\n    // check the number parts\n    const areaCode = phoneStr.slice(0,3);\n    const phone3 = phoneStr.slice(4,7);\n    const phone4 = phoneStr.slice(8,12);\n    const areNumberPartsOK = areStringsInListAllIntegers([areaCode, phone3, phone4]);\n    return areNumberPartsOK;\n  }\n\n  if (phoneStr.length === 14) {\n    // check the non-numerical parts\n    if ((phoneStr[1] !== \"-\") || (phoneStr[5] !== \"-\") || (phoneStr[9] !== \"-\")) return false;\n\n    // check the number parts\n    const firstDigit = phoneStr[0];\n    const areaCode = phoneStr.slice(2,5);\n    const phone3 = phoneStr.slice(6,9);\n    const phone4 = phoneStr.slice(10,14);\n    const areNumberPartsOK = areStringsInListAllIntegers([firstDigit, areaCode, phone3, phone4]);\n    return areNumberPartsOK;\n  }\n}\n\n// for use by isPhoneValid()\nconst canStringBeInteger = (str) => {\n  // if str has leading zeros, get rid of them\n  let nonZeroStr = str;\n  while (nonZeroStr[0] === \"0\" && nonZeroStr.length > 1) {\n    nonZeroStr = nonZeroStr.slice(1,nonZeroStr.length);\n  }\n\n  const asInt = parseInt(str);\n  const backToStr = asInt.toString();\n  return((nonZeroStr === backToStr) ? true:false);\n}\n\n// for use by isPhoneValid()\nconst areStringsInListAllIntegers = (list_of_strings) => {\n  for (const str of list_of_strings) {\n    if (!canStringBeInteger(str)) return false\n  }\n  // if nobody in the list fails, then they all pass\n  return true;\n}\n\nexport const convertToValidPhoneNumberIfAllNums = (phoneStr) => {\n  // if phoneStr is in format of '4251112222' or '14251112222', it's annoying to read for user, so change it to 425-111-2222 minus the 1\n  if (phoneStr.length === 10) {\n    return `${phoneStr.slice(0,3)}-${phoneStr.slice(3,6)}-${phoneStr.slice(6,10)}`;\n  } else if (phoneStr.length === 11) {\n    return convertToValidPhoneNumberIfAllNums(phoneStr.slice(1,11));\n  } else {\n    return phoneStr;\n  }\n}\n\nexport const convertToValidPhoneNumberIfInParens = (phoneStr) => {\n  // if \"(425)111-2222\" was the input, fcn will convert it to twilio-accepted & db-accepted value of 425-111-2222\n\n  if (phoneStr.length === 13) {\n    // check the non-numerical parts\n    if (phoneStr[0] !== \"(\") return null;\n    if (phoneStr[4] !== \")\") return null;\n    if (phoneStr[8] !== \"-\") return null;\n\n    // check the number parts\n    const areaCode = phoneStr.slice(1,4);\n    const phone3 = phoneStr.slice(5,8);\n    const phone4 = phoneStr.slice(9,13);\n    const areNumberPartsOK = areStringsInListAllIntegers([areaCode, phone3, phone4]);\n    // if phoneStr is in accepted convertable format, return it in target format like \"425-111-2222\"\n    if (areNumberPartsOK) {\n      return `${areaCode}-${phone3}-${phone4}`;\n    } else {\n      return null;\n    }\n\n  } else {\n    return null;\n  }\n}\n\nexport const isEmailValid = (email) => {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport const deepCompareTwoSchedArrayss = (array1, array2) => {\n  if (array1.length !== array2.length) return false;\n  const sortedArray1 = sortById(array1);\n  const sortedArray2 = sortById(array2);\n  return _.isEqual(sortedArray1, sortedArray2);\n}\n\n// for use by deepCompareTwoArrays()\nconst sortById = (listOfObjs) => {\n  return listOfObjs.sort((a,b) => b.id <= a.id ? 1:-1);\n}\n\nexport const truncateString = (longStr, numberCharsToShow) => {\n  if (longStr.length <= numberCharsToShow) {\n    return longStr;\n  } else {\n    return (longStr.slice(0,numberCharsToShow) + \"...\");\n  }\n}","export default __webpack_public_path__ + \"static/media/SPPbanner2.1e0aad4c.png\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport bannerLogo from '../images/SPPbanner2.png';\nimport GoogleLogin from 'react-google-login';\nimport Modal from 'react-bootstrap/Modal';\nimport axios from 'axios';\n\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { makeHeader } from './Helpers';\n\nconst LoginBanner = ({authenticatedRole, googleAuthCallback, demoLoginCallback, logoutCallback}) => {\n\n  const [uuid, setUuid] = useState(\"\");\n\n  const [showModal, setShowModal] = useState(false);\n  const handleCloseModal = () => setShowModal(false);\n  const handleShowModal = () => setShowModal(true);\n\n  ////////////////////// LOGIN //////////////////////\n  const responseGoogle = (response) => {\n    // send info up to App.js     \n    const googleId = response.profileObj.googleId;\n    sessionStorage.setItem('googleId', googleId);\n\n    // TODO: FIX google Auth access token weirdness, had to comment out otherwise will break.  Never messing with deployment on day of presentation ever again...\n    // const googleAccessToken = response.Zi.access_token;\n    // sessionStorage.setItem('googleAccessToken', googleAccessToken);\n\n    googleAuthCallback();\n  }\n\n  const responseGoogleFail = (response) => {\n    console.log(\"GoogleLogin failed:\");\n    console.log(response);\n  }\n\n  const showLoginChoices = () => {\n    return (\n      <div>\n        {showGoogleLogin()}\n        {showDemoLogins()}\n      </div>\n    )\n  }\n\n  const showDemoLogins = () => {\n    const loginAs = (demoRole) => {\n      demoLoginCallback(demoRole);\n    }\n    \n    return (\n      <div>\n        <p>[NOTICE] Back end is no longer deployed, so you're not going to see any data populated (nor will any persist) once you login.</p>\n        <button onClick={() => {loginAs('ADMIN')}}>Bypass Google, I just want to poke around as an ADMIN</button><br/>\n        <button onClick={() => {loginAs('EMPLOYEE')}}>Bypass Google, I just want to poke around as an EMPLOYEE</button>\n      </div>\n    )\n  }\n\n  const showGoogleLogin = () => {\n    return (\n      <section className=\"btn btn-google\">\n        <GoogleLogin\n          clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n          buttonText=\"LOGIN WITH GOOGLE\"\n          onSuccess={responseGoogle}\n          onFailure={responseGoogleFail}\n          cookiePolicy={'single_host_origin'}\n        />\n      </section>\n    );\n  }\n  \n  const updateUuid = (e) => {\n    setUuid(e.target.value);\n  }\n\n  const sendUuidApi = (e) => {\n    e.preventDefault();\n    handleCloseModal();\n\n    const googleId = sessionStorage.getItem('googleId');\n    const loginParams = { \"googleId\": googleId, \"uuid\": uuid };\n    const URL_endpoint = process.env.REACT_APP_LOGIN + `/firstTime`;\n\n    const headers = makeHeader();\n    axios.post(URL_endpoint, loginParams, {headers})\n    .then(response => {\n      const roleDB = Object.keys(response.data)[0];\n\n      if (roleDB === \"ADMIN\" || roleDB === \"EMPLOYEE\") {\n        // uuid does match someone in the database, now invoke googleAuthCallback back up to App.js to save info & re-render/re-direct\n        googleAuthCallback();\n      } else {\n        toast.error(\"Invalid uuid verification code, please double check and try again\");\n      }\n    })\n    .catch(error => toast.error(error.message));\n  }\n\n  ////////////////////// DASHBOARD BUTTONS //////////////////////\n  const showDashWithLogout = () => {\n    const name = sessionStorage.getItem(\"username\");\n\n    if (authenticatedRole === \"ADMIN\") {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-success dashboard-buttons\"><Link to=\"/adminDash\">{name}'s Dashboard</Link></button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={logoutCallback}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    } else if (authenticatedRole === \"EMPLOYEE\") {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-success dashboard-buttons\"><Link to=\"/employeeDash\">{name}'s Dashboard</Link></button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={logoutCallback}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    } else {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-warning dashboard-buttons\" onClick={handleShowModal}>First time logging in?  Click to activate account!</button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={logoutCallback}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    }\n  }\n\n\n////////////////////// RENDER //////////////////////\n  return(\n    <section>\n      <section className=\"loginBanner-section text-centered\">\n        <Link to=\"/\"><img src={bannerLogo} alt=\"sppBannerLogo\" className=\"img-90\"/></Link>\n        {authenticatedRole? showDashWithLogout():showLoginChoices()}\n      </section>\n\n\n      <Modal show={showModal} onHide={handleCloseModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Welcome to Schedule Plus Plus!</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          Please copy and paste your unique verification id (uuid), including the dashes.\n          <form>\n            <input type=\"text\" className=\"form-control margin-top-1rem\" onChange={updateUuid} placeholder={\"Example: 12345678-abcd-abcd-abcd-1234abcd1234\"}/>\n            <section className=\"centered-children-per-row_container\">\n              <button className=\"btn btn-primary margin-top-1rem\" onClick={sendUuidApi}>Log in!</button>\n            </section>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </section>\n  );\n}\n\nexport default LoginBanner;\n\nLoginBanner.propTypes = {\n  authenticatedRole: PropTypes.string,\n  googleAuthCallback: PropTypes.func.isRequired,\n  logoutCallback: PropTypes.func.isRequired,\n};\n","export default __webpack_public_path__ + \"static/media/redCrossFlag.88af6776.svg\";","import React from 'react';\nimport redCrossFlag from '../images/redCrossFlag.svg';\n\nexport default function Homepage() {\n\n  return (\n    <section className=\"footer\">\n      <img src={redCrossFlag} alt=\"redCrossFlag\" className=\"img-5\"/>\n      <a href=\"https://github.com/stupendousC\" target=\"_blank\" rel=\"noopener noreferrer\"> Made by: Caroline Wu </a>\n      <img src={redCrossFlag} alt=\"redCrossFlag\" className=\"img-5\"/>\n      <p className=\"fine-print\">All icons from www.freeicons.io</p>\n    </section>\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatTime } from './Helpers';\n\nconst CalendarDay = ({basicShiftsInfo, dateStr, showColorBasedOnDay}) => {\n\n  const showShifts = () => {\n    return ( basicShiftsInfo.map (shift => {\n      return (\n        <section key={shift.id} className=\"section-4-col\"> \n          <section>{shift.client.name}</section>\n          <section>{shift.employee ? shift.employee.name:\"\"}</section>\n          <section>{formatTime(shift.start_time)}</section>\n          <section>{formatTime(shift.end_time)}</section>\n        </section>\n        );\n    }));\n  }\n\n\n  const showTableOrNothing = () => {\n    if (!basicShiftsInfo || basicShiftsInfo === [] || basicShiftsInfo.length === 0) {\n      return (\n        <h3 className=\"text-centered padding-all-1rem\">No shifts scheduled</h3>\n      );\n    } else {\n      return (\n        <section>\n          <section className=\"section-4-col padding-top-1rem text-centered\"> \n            <h5>CLIENT</h5>\n            <h5>EMPLOYEE</h5>\n            <h5>START</h5>\n            <h5>END</h5>\n          </section>\n\n          <section className=\"text-centered padding-bottom-1rem\"> \n            {showShifts()}\n          </section>\n        </section>\n      );\n    }\n  }\n\n  return(\n    <section className={showColorBasedOnDay()}>\n      {showTableOrNothing()}\n    </section>\n  );\n  \n}\n\nexport default CalendarDay;\n\nCalendarDay.propTypes = {\n  basicShiftsInfo: PropTypes.arrayOf(PropTypes.object), \n  dateStr: PropTypes.string.isRequired, \n  showColorBasedOnDay: PropTypes.func.isRequired\n};","import React, { useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { formatDate, dateInThePast, makeHeader } from './Helpers';\nimport { toast } from 'react-toastify';\n\nconst NewShift = ({daySpotlight, allClients, availEmpsOfDay, updateAllShiftsCallback, textEmployeesCallback, showColorBasedOnDay}) => {\n  // need for sending POST request to backend\n  const ALL_SHIFTS = process.env.REACT_APP_ALL_SHIFTS;\n\n  // these are for <form> use\n  const [clientId, setClientId] = useState(null);\n  const defaultStartTime = \"09:00:00\";\n  const defaultEndTime = \"17:00:00\";\n  const [startTime, setStartTime] = useState(defaultStartTime);\n  const [endTime, setEndTime] = useState(defaultEndTime);\n\n  const isFormValid = () => {\n    if (dateInThePast(daySpotlight) || !clientId || (endTime <= startTime)) {\n      return (false);\n    } else {\n      return (true);\n    }\n  }\n\n  const genErrorMsgs = () => {\n      // evaluate all form inputs and save invalid reasons in errorMsgs\n      let errorMsgs = [];\n\n      if (dateInThePast(daySpotlight)) {\n        errorMsgs.push(\"Date cannot be in the past\");\n      }\n      if (!clientId) {\n        errorMsgs.push(\"Please select a client before submitting form\");\n      }\n      if (endTime <= startTime) {\n        errorMsgs.push(\"Start time must be before end time\");\n      }\n\n      return errorMsgs;\n  }\n\n  const onClientChange = (e) => {\n    if (e.target.value === \"-- Select --\") {\n      setClientId(null);\n    } else {\n      setClientId(parseInt(e.target.value));\n    }\n  }\n\n  const onTimeChange = (e) => {\n    if (e.target.id === \"startTime\") { \n      setStartTime(e.target.value) \n    } else if (e.target.id === \"endTime\") {\n      setEndTime(e.target.value);\n    }\n  }\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n\n    const clientObj = allClients.find( client => {\n      return (client.id === clientId);\n    });\n\n    const jsonForNewShiftAPI = {\n      \"shift_date\": daySpotlight,\n      \"start_time\": startTime,\n      \"end_time\": endTime,\n      \"client\": clientObj,  \n      \"client_id\": clientId\n    }\n\n    let newShift = null;\n\n    const headers = makeHeader();\n\n    // send new shift to backend, to add to db\n      // employees also can see the new shift when they login to their own dashboard\n    axios.post(ALL_SHIFTS, jsonForNewShiftAPI, {headers} )\n    .then(response => {\n      newShift = response.data;\n      \n      // send callback back up to <CalendarTab> which will pass up to <AdminDash> for new API call\n      // which gets latest allShifts from backend db, and re-render everything\n      updateAllShiftsCallback();\n\n      // send text to temployees who have non-null phone numbers\n      textEmployeesCallback(newShift);\n      })\n    .catch(error => toast.error(`ERROR: Can't make new shift: ${error.message}`));\n  }\n\n  const showErrorMsgs = () => {\n    const errorMsgs = genErrorMsgs();\n      const rowsOfMsgs = errorMsgs.map( (msg,i) => {\n        return (\n          <li key={i} className=\"centered-text\">{msg}</li>\n        );\n      });\n\n      return (\n        <ul className=\"centered-children-per-row_container\">{rowsOfMsgs}</ul>\n      );\n    \n  }\n\n  const showButtonValue = () => {\n    if (availEmpsOfDay.length === 0) {\n      return \"No one is available -> MAKE NEW SHIFT anyway\";\n    } else {\n      return \"MAKE NEW SHIFT & NOTIFY ALL THOSE AVAILABLE\";\n    }\n  }\n\n  //////////////////// render ///////////////////\n\n  return(\n    <section className={showColorBasedOnDay()}> \n      <h1 className=\"text-centered\">{formatDate(daySpotlight)}</h1>\n      \n      <form onSubmit={onFormSubmit} className=\"px-4 py-3\">\n\n        <section className=\"form-group\">\n\n          <label>Client</label>\n          <select className=\"form-control\" onChange={onClientChange}>\n            <option defaultValue>-- Select --</option>\n            {allClients.map(client => <option key={client.id} value={client.id}>{client.name}</option>)}\n          </select>\n            \n          <label>Start time</label>\n          <input id=\"startTime\" onChange={onTimeChange} className=\"form-control\" type=\"time\" defaultValue={defaultStartTime}></input>\n          \n          <label>End time</label>\n          <input id=\"endTime\" onChange={onTimeChange} className=\"form-control\" type=\"time\" defaultValue={defaultEndTime}></input>\n          \n        </section>\n        \n        {isFormValid() ? null: showErrorMsgs()}\n\n        <section className=\"centered-children-per-row_container\">\n          <input type=\"submit\" className=\"btn btn-primary\" value={showButtonValue()} disabled={!isFormValid()}/>\n          <li className=\"fine-print centered-text\">New shift will be visible on employee dashboards, open on a first-come-first-served basis</li>\n          <li className=\"fine-print centered-text\">Texts will also be sent to all those available, with valid phone numbers in their record</li>\n        </section>\n        \n      </form>\n\n    </section>\n  );\n}\n\nexport default NewShift;\n\nNewShift.propTypes = {\n  daySpotlight: PropTypes.string.isRequired, \n  allClients: PropTypes.arrayOf(PropTypes.object), \n  availEmpsOfDay: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.string]), // coud be eihter \"LOADING\" or actual array of Employees\n  updateAllShiftsCallback: PropTypes.func.isRequired, \n  textEmployeesCallback: PropTypes.func.isRequired, \n  showColorBasedOnDay: PropTypes.func.isRequired,\n};","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { makeHeader } from './Helpers';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Calendar from 'react-calendar';\nimport CalendarDay from './AdminDash_CalendarDay';\nimport NewShift from './AdminDash_NewShift';\n\nimport { convertToPST, formatDate, convertDateString, dateInThePast } from './Helpers';\n\n\nconst CalendarTab = ({allShifts, allClients, updateAllShiftsCallback, textEmployeesCallback}) => {\n  const today = convertDateString(new Date());\n  const [daySpotlight, setDaySpotlight] = useState(today);\n  const [shiftsOfDay, setShiftsOfDay] = useState(\"LOADING\");\n  const [availEmpsOfDay, setAvailEmpsOfDay] = useState(\"LOADING\");\n\n  const updateStateForCalendarDay = (e) => {\n    const dateStr = convertDateString(e);\n    \n    getAndSetShiftsOfDay(dateStr);\n    getAndSetAvailEmpsByDate(dateStr);\n    setDaySpotlight(dateStr);\n  }\n\n  const getAndSetShiftsOfDay = (targetDateStr) => {\n    let shiftsOfDay = [];\n    for (const shift of allShifts) {\n      if (shift.shift_date === targetDateStr ) { \n        shiftsOfDay.push(shift); \n      } else if (shift.shift_date > targetDateStr) {\n        break;\n      }\n    }\n    \n    setShiftsOfDay(shiftsOfDay);\n  }\n\n  const getAndSetAvailEmpsByDate = (targetDateStr) => {\n    const URL_getAllAvailEmpsByDate = process.env.REACT_APP_GET_AVAIL_EMPS_FOR_DAY + `/${targetDateStr}`;\n    const headers = makeHeader();\n\n    axios.get(URL_getAllAvailEmpsByDate, {headers} )\n    .then(response => setAvailEmpsOfDay(response.data))\n    .catch(error => toast.error(error.message));\n\n  }\n\n  //////////////////// display options ////////////////////\n  const tileContent = ({ date, view }) => {\n    let tileCaption = \" - \";\n    let tileClassName = \"\";\n    \n    const targetDate = convertDateString(date);\n    // <Calendar> will iterate thru each date in the display month\n      // if no one's avail to work that day -> red background!\n      // these 2 below supercedes display above\n      // if date is in the past -> gray background\n      // if it's on today -> gold background  \n    if (daySpotlight === targetDate && availEmpsOfDay.length === 0) {\n      // TODO: why doesn't the emoji show up automatically? i had to click on calendar tile\n      tileCaption = \"😱\";\n      tileClassName = \"tile-no-workers\";\n    }\n\n    if (dateInThePast(targetDate)) {\n      tileCaption = \" x \";\n      tileClassName = \"tile-past\";\n    } else if (targetDate === today) {\n      tileCaption = \"TODAY\";\n      tileClassName = \"tile-today\";\n    }\n\n    // we only need to see the colored tiles when looking at monthly view.\n    if (view === \"month\") {\n      return (\n        <section className={tileClassName}>{tileCaption}</section>\n      );\n    } \n  }\n\n  const showAccordionHeaderColor = () => {\n    if (daySpotlight === today) {\n      return \"accordion-toggle_button_gold\";\n    } else if (availEmpsOfDay.length === 0) {\n      return \"accordion-toggle_button_red\";  \n    } else if (dateInThePast(daySpotlight)) {\n      return \"accordion-toggle_button_gray\";\n    } else {\n      return \"accordion-toggle_button\";\n    }\n  }\n\n  const showColorBasedOnDay = () => {\n    if (daySpotlight === convertDateString(new Date())) {\n      return \"lightgold-bg\";\n    } else if (dateInThePast(daySpotlight)) {\n      return \"lightgray-bg\";\n    } else if (availEmpsOfDay.length === 0) {\n      return \"lightred-bg\";\n    } else {\n      return \"lightblue-bg\";\n    }\n  }\n\n  const showAvailEmpsInCard = () => {\n    if (dateInThePast(daySpotlight)) {\n      return (<section className={showColorBasedOnDay()+\" text-centered\"}> This day is in the past...</section>);\n    }\n\n    if (availEmpsOfDay === \"LOADING\") {\n      return (<section className={showColorBasedOnDay()+\" text-centered\"}>Loading...</section>);\n    } else if (availEmpsOfDay.length === 0) {\n      return (<section className={showColorBasedOnDay()+\" text-centered\"}>No one is available!</section>);\n    } else {\n      return (\n      <section className={`padding-all-1rem ${showColorBasedOnDay()}`}>\n        <section className=\"section-3-col text-centered\">\n          <h5>EMPLOYEE</h5>\n          <h5>PHONE</h5>\n          <h5>EMAIL</h5>\n        </section>\n        {showRowsOfEmps()}\n      </section>\n    );\n    }\n  }\n\n  const showRowsOfEmps = () => availEmpsOfDay.map(emp => {\n      return(\n        <section key={emp.id} className=\"section-3-col text-centered\">\n          <section>{emp.name}</section>\n          <section>{emp.phone}</section>\n          <section>{emp.email}</section>\n        </section>\n      );\n    })\n\n  //////////////////// callback fcns ////////////////////\n  const prepForTextEmployeesCallback = (newShift) => {\n    // <NewShift> is sending this back, which we'll need to add the availEmpsOfDay into the args before sending back up to AdminDash\n    textEmployeesCallback(newShift, availEmpsOfDay);\n  }\n\n  //////////////////// prep initial state ////////////////////\n  if (shiftsOfDay === \"LOADING\") { getAndSetShiftsOfDay(daySpotlight) }\n\n  if (availEmpsOfDay === \"LOADING\") { getAndSetAvailEmpsByDate(daySpotlight) }\n\n  if (shiftsOfDay === \"LOADING\" && availEmpsOfDay === \"LOADING\") {\n    return (<section>LOADING</section>);\n  }\n  \n  //////////////////// render ////////////////////\n    return(\n      \n      <section>\n        <section className=\"calendar-container\">\n          <Calendar tileContent={tileContent} onChange={updateStateForCalendarDay} value={convertToPST(daySpotlight)}/>\n          {/* <NewShift /> and <CalendarDay /> will change based on which day you click on in the <Calendar> */}\n        </section>\n\n      <Accordion>\n          <Accordion.Toggle eventKey=\"newShift\" className={showAccordionHeaderColor()}>\n            <section>\n              <section>▼ MAKE A NEW SHIFT</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"newShift\">\n          <NewShift daySpotlight={daySpotlight} allClients={allClients} availEmpsOfDay={availEmpsOfDay} updateAllShiftsCallback={updateAllShiftsCallback} textEmployeesCallback={prepForTextEmployeesCallback} showColorBasedOnDay={showColorBasedOnDay}/> \n          </Accordion.Collapse>\n      </Accordion>\n      \n      <Accordion>\n        <Accordion.Toggle eventKey=\"availEmpList\" className={showAccordionHeaderColor()}>\n          <section>\n            <section>▼ {availEmpsOfDay === \"LOADING\" ? \"Loading\":availEmpsOfDay.length} AVAILABLE EMPLOYEES FOR {formatDate(daySpotlight)}</section>\n          </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"availEmpList\">\n          {/* send API call to backend to get all avail emps for the daySpotlight */}\n          {showAvailEmpsInCard()}\n        </Accordion.Collapse>\n      </Accordion>\n\n      <Accordion>\n        <Accordion.Toggle eventKey=\"dayAgenda\" className={showAccordionHeaderColor()}>\n          <section>\n            <section>▼AGENDA FOR {formatDate(daySpotlight)}</section>\n          </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"dayAgenda\">\n          <CalendarDay basicShiftsInfo={shiftsOfDay} dateStr={daySpotlight} showColorBasedOnDay={showColorBasedOnDay} />\n        </Accordion.Collapse>\n      </Accordion>\n\n    </section>\n    );\n  }\n\n\n\nexport default CalendarTab;\n\n\nCalendarTab.propTypes = {\n  allShifts: PropTypes.arrayOf(PropTypes.object), \n  allClients: PropTypes.arrayOf(PropTypes.object), \n  updateAllShiftsCallback: PropTypes.func.isRequired, \n  textEmployeesCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport axios from 'axios';\nimport Accordion from 'react-bootstrap/Accordion';\nimport PropTypes from 'prop-types';\nimport { makeHeader, formatTime, formatDate, dateInThePast } from './Helpers';\nimport { toast } from 'react-toastify';\n\nclass ShiftsTable extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      availEmployeesByShiftId: \"LOADING\",\n      // javascript weirdness abounds if I were to set initial state to null\n      // safer to set it to \"LOADING\" or a real hashmap of { shift_id: [arrayOfAvailEmps] }\n      pastShifts: [],\n      currentShifts: []\n    }\n  }\n\n  setPastVsCurrentShifts = () => {\n    let currentShifts = [];\n    let pastShifts = [];\n\n    for (const shift of this.props.allShifts) {\n      dateInThePast(shift.shift_date) ? pastShifts.push(shift) : currentShifts.push(shift);\n    }\n\n    this.setState({ pastShifts: pastShifts, currentShifts: currentShifts });\n  }\n  \n  componentDidMount() {\n    // assemble list of availEmployees for all the unstaffed shifts\n    let availEmployeesByShiftId = {};\n\n    const allUnstaffedShifts = this.props.allShifts.filter (shift => !shift.employee );\n    const headers = makeHeader();\n    const axiosGetFcns = allUnstaffedShifts.map( unstaffedShift => {\n      const URL = process.env.REACT_APP_GET_AVAIL_EMPS_FOR_SHIFT + `/${unstaffedShift.id}`;\n      return axios.get(URL, {headers});\n    })\n\n    axios.all(axiosGetFcns)\n    .then(axios.spread((...responses) => {\n      // match up responses to allUnstaffedShifts\n      for ( let i = 0; i < allUnstaffedShifts.length; i++) {\n        const shiftId = allUnstaffedShifts[i].id;\n        availEmployeesByShiftId[shiftId] = responses[i].data;\n      }\n\n      // setState\n      this.setState({\n        availEmployeesByShiftId: availEmployeesByShiftId\n      });\n    }))\n    .catch( errors => toast.error(`ERROR loading info from database: ${errors}`));\n\n    // sort into pastShifts and currentShifts\n    this.setPastVsCurrentShifts();\n  }\n\n  ////////////////////////// display //////////////////////////\n  showShiftsTable = (listOfShifts, timeCategory) => {\n    let primaryColorClass = null;\n    let secondaryColorClass = null;\n    if (timeCategory === \"PAST\") {\n      primaryColorClass = \"gray-bg\";\n      secondaryColorClass = \"lightgray-bg\";\n    } else if (timeCategory === \"CURRENT\") {\n      primaryColorClass = \"blue-bg\";\n      secondaryColorClass = \"lightblue-bg\";\n    } \n\n    if (listOfShifts.length === 0) {\n      return (\n        <section className={`text-centered ${secondaryColorClass}`}>No shifts</section>\n      );\n\n    } else {\n      return(\n        <section>\n          {listOfShifts.map(shift => {\n            return (\n              <Accordion key={shift.id}>\n                <section>\n                  <Accordion.Toggle eventKey=\"showInfo\" className={`accordion-toggle_button ${primaryColorClass}`}>\n                    <section className=\"section-4-col\">\n                      <section>▼ #{shift.id}</section>\n                      <section>{formatDate(shift.shift_date)}</section>\n                      <section>{shift.client.name}</section>\n                      <section>{timeCategory === \"CURRENT\" ? this.showEmpNameOrButton(shift):null}</section>\n                    </section>\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey=\"showInfo\">\n                    <section>{this.showWholeShiftCard(shift, timeCategory, secondaryColorClass)}</section>\n                  </Accordion.Collapse>\n\n                </section>\n              </Accordion>\n            )}\n          )}\n        </section>\n      );\n    }    \n  }\n\n  showEmpNameOrButton = (shift) => {\n    if (shift.employee) {\n      return (shift.employee.name);\n    } else {\n      // the button really is just for show, \n      // clicking on the entire bar (inc the button) is what sends an API call to backend for the list of avail employees\n      return (\n        <section className=\"fake-btn\">Find employees</section>\n        );\n    }\n  }\n\n  showWholeShiftCard = (shift, timeCategory, secondaryColorClass) => {\n    const clientInfo = shift.client\n    return (\n      <section>\n        <section className={`card-shift centered-children-per-row_container ${secondaryColorClass}`}>\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client centered-children-per-row_container\">\n          <p>CLIENT</p>\n          { clientInfo.name ? <p>{clientInfo.name}</p> : <p>MISSING</p> }\n          <p>PHONE</p>\n          { clientInfo.phone ? <p>{clientInfo.phone}</p> : <p>MISSING</p> }\n          <p>EMAIL</p>\n          { clientInfo.email ? <p>{clientInfo.email}</p> : <p>MISSING</p> }\n          <p>ADDRESS</p>\n          { clientInfo.address ? <p>{clientInfo.address}</p> : <p>MISSING</p> }\n        </section>\n\n        {/* employee info section shows either: A. actual employee info if staffed. B. list of available employees for that shift */}\n        <section>\n          { this.showEmployeeCardSection(shift, timeCategory, secondaryColorClass) }\n        </section>\n        \n      </section>\n    );\n  }\n\n  showEmployeeCardSection = (shift, timeCategory, secondaryColorClass) => {\n    if (timeCategory === \"PAST\") {\n      return (<section className={`${secondaryColorClass} text-centered`}>In the past</section>);\n    } else if (timeCategory === \"CURRENT\") {\n      if (shift.employee) {\n        return (this.showEmpInCard(shift, secondaryColorClass));\n      } else {\n        return (this.showAvailEmpsInCard(shift, secondaryColorClass));\n      }\n    }\n  }\n\n  // showWholeShiftCard() calls this if ... A. shift is staffed\n  showEmpInCard = (shift, colorClass) => {\n    const employeeInfo = shift.employee\n    return (\n      <section className={`card-employee ${colorClass}`}>\n          <p>EMPLOYEE</p>\n          { employeeInfo.name ? <p>{employeeInfo.name}</p> : <p>MISSING</p> }\n          <p>PHONE</p>\n          { employeeInfo.phone ? <p>{employeeInfo.phone}</p> : <p>MISSING</p> }\n          <p>EMAIL</p>\n          { employeeInfo.email ? <p>{employeeInfo.email}</p> : <p>MISSING</p> }\n          <p>ADDRESS</p>\n          { employeeInfo.address ? <p>{employeeInfo.address}</p> : <p>MISSING</p> }\n        </section>\n    );\n  }\n\n  // showWholeShiftCard() calls this if ... B. shift is unstaffed\n  showAvailEmpsInCard = (shift) => {\n    \n    if (this.state.availEmployeesByShiftId === \"LOADING\" ) {\n      return (\n        <section className=\"card-employee lightblue-bg\">Loading...</section>\n      );\n\n    } else {\n      const availEmpList = this.state.availEmployeesByShiftId[shift.id];\n      \n      if (availEmpList.length === 0) {\n        return (\n          // TODO: add soemthing special for this emergency\n          <section className=\"card-employee red-bg\">NO EMPLOYEES AVAILABLE!</section>\n        );\n\n      } else {\n        const empList = Array.from(availEmpList);\n        const numEmps = empList.length;\n\n        return (\n          <section className=\"lightblue-bg\">\n          <button onClick={()=>{this.props.textEmployeesCallback(shift, availEmpList)}} className=\"btn btn-primary margin-left-1rem\">TEXT ALL {numEmps} AVAILABLE EMPLOYEES</button>\n          {this.rowsOfEmps(empList)}\n          </section>\n        );\n      }\n    }\n  }\n\n  rowsOfEmps = (empList) => {\n      return empList.map( (emp, i) => {\n        return(\n          <section key={emp.id} className=\"card-employee lightblue-bg\">\n            <section>{emp.name}</section>\n            <section>{emp.phone}</section>\n          </section>\n        );\n      }) \n    }\n\n  ////////////////// render ////////////////////\n  render() {\n    return(\n      <section>\n        <h1 className=\"text-centered margin-all-1rem\">CURRENT SHIFTS</h1>\n        {this.showShiftsTable(this.state.currentShifts, \"CURRENT\")}\n\n        <h1 className=\"text-centered margin-all-1rem\">PAST SHIFTS</h1>\n        {this.showShiftsTable(this.state.pastShifts, \"PAST\")}\n      </section>\n    );  \n  }\n}\n\nexport default ShiftsTable;\n\nShiftsTable.propTypes = {\n  textEmployeesCallback: PropTypes.func.isRequired,\n  allShifts: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// To use this component... see instructions below\nconst ToastUndo = ({ undo, closeToast, message }) => {\n\n  const handleClick = () => {\n    undo();\n    closeToast();\n  }\n\n  return (\n    <h3>\n      {message} \n      <button onClick={handleClick} className=\"btn btn-primary\">UNDO</button>\n    </h3>\n  );\n}\n\nexport default ToastUndo;\n\nToastUndo.propTypes = {\n  undo: PropTypes.func.isRequired,\n  closeToast: PropTypes.func,\n  message: PropTypes.string.isRequired,\n};\n\n\n\n\n///////////// INSTRUCTIONS /////////////\n// to use... \n//   ToastUndo(<ToastUndo undo={LOCAL_UNDO_FCN} />, { onClose: LOCAL_CLOSING_FCN});\n// required... \n//   LOCAL_CLOSING_FCN <- will run whether u click undo or not \n//   LOCAL_UNDO_FCN <- will run only if u click undo button\n// see this in action in AdminDash_PeopleTable.js","import React, { useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport ToastUndo from './ToastUndo';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { makeHeader, isPhoneValid, isEmailValid, convertToValidPhoneNumberIfInParens, convertToValidPhoneNumberIfAllNums } from './Helpers';\n\n\n///////////////////// People can be either admins, employees, or clients /////////////////////\nconst PeopleTable = ({personType, peopleList, URL_endpoint, setStateKey, updatePeopleListCB }) => {\n  const [personSpotlight, setPersonSpotlight] = useState(null);\n  const [updateSpotlightBool, setUpdateSpotlightBool] = useState(false);\n  const [updatedPerson, setUpdatedPerson] = useState(null);\n  const [newPerson, setNewPerson] = useState({name: null, phone: null, email: null, address: null, active: true});\n  const [addFormErrorMsgs, setAddFormErrorMsgs] = useState([]);\n  const [updateFormErrorMsgs, setUpdateFormErrorMsgs] = useState([]);\n\n  // no useState on the following b/c that's asynch AND I don't need re-rendering for it\n  let personInPurgatory = null;\n  const headers = makeHeader();\n\n  // need this for adding new people\n  const uuidv4 = require('uuid/v4');\n\n  const showAll = (peopleList) => {\n    return ( peopleList.map((person, i) => {\n      return (\n        <section key={i} className=\"margin-all-1rem\">\n          <section className=\"peopleTable\">\n            <section>{person.name}</section>\n            <section><button onClick={() => read(i, peopleList)} className=\"btn btn-primary\">Info</button></section>\n            <section><button onClick={() => update(i, peopleList)} className=\"btn btn-warning\">Update</button></section>\n            <section><button onClick={() => deactivate(person)} className=\"btn btn-danger\">Deactivate</button></section>\n          </section>\n          <section>\n            {personSpotlight === person ? showPersonSpotlight(person):null}\n          </section>\n        </section>\n      )})\n    );\n  }\n\n  const showPersonSpotlight = (person) => {\n    if (updateSpotlightBool === true) {\n      return (\n        <form className=\"margin-all-1rem\">\n          <fieldset>\n            <section className=\"form-group\">\n              <label>NAME</label>\n              <input type=\"text\" className=\"form-control\" name=\"name\" placeholder={person.name} onChange={onUpdateFieldChange}/>\n              <label>ADDRESS</label>\n              <input type=\"text\" className=\"form-control\" name=\"address\" placeholder={person.address} onChange={onUpdateFieldChange}/>\n              <label>PHONE</label>\n              <input type=\"text\" className=\"form-control\" name=\"phone\" placeholder={person.phone} onChange={onUpdateFieldChange}/>\n              <label>EMAIL</label>\n              <input type=\"text\" className=\"form-control\" name=\"email\" placeholder={person.email} onChange={onUpdateFieldChange}/>\n            </section>\n\n            <section className=\"margin-all-1rem\">\n              {updateFormErrorMsgs === [] ? null : showErrorMsgs(updateFormErrorMsgs)}\n              <button onClick={sendUpdateAPI} className=\"btn btn-primary\">UPDATE</button>\n            </section>\n          </fieldset>\n        </form>\n      );\n    } else { \n      // read only\n      return (\n        <section className={`card-person lightblue-bg`}>\n          <p>ID</p>\n          <p>{person.id}</p> \n          <p>NAME</p>\n          <p>{person.name}</p> \n          <p>PHONE</p>\n          <p>{person.phone}</p> \n          <p>EMAIL</p>\n          <p>{person.email}</p> \n          <p>ADDRESS</p>\n          <p>{person.address}</p> \n          <p>UUID (for 1st time login)</p>\n          <p>{person.uuid}</p> \n        </section>\n    );\n    }\n  }\n\n  ////////////////////// ADD person //////////////////////\n  const showAddSection = () => {\n    const uuid = uuidv4();\n    newPerson.uuid = uuid;\n\n    return (\n      <Accordion>\n      <section>\n        <Accordion.Toggle eventKey=\"showForm\" className={`accordion-toggle_button gold-bg`}>\n            <section className=\"margin-all-1rem capitalize\">\n              ▼ add new {personType} ▼\n            </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"showForm\">\n        <form className=\"margin-all-1rem lightgold-bg\">\n          <fieldset>\n            <section className=\"margin-all-1rem form-group\">\n              <label>NAME</label>\n              <input type=\"text\" className=\"form-control\" name=\"name\" onChange={onAddFieldChange}/>\n              <label>ADDRESS</label>\n              <input type=\"text\" className=\"form-control\" name=\"address\" onChange={onAddFieldChange}/>\n              <label>PHONE</label>\n              <input type=\"text\" className=\"form-control\" name=\"phone\" onChange={onAddFieldChange}/>\n              <label>EMAIL</label>\n              <input type=\"text\" className=\"form-control\" name=\"email\" onChange={onAddFieldChange}/>\n              <label>UUID</label>\n              <input type=\"text\" className=\"form-control\" disabled name=\"uuid\" placeholder={newPerson.uuid}/>\n            </section>\n            <section className=\"centered-children-per-row_container margin-all-1rem\">\n              {addFormErrorMsgs === [] ? null : showErrorMsgs(addFormErrorMsgs)}\n              <button onClick={sendAddAPI} className=\"btn btn-primary\">ADD</button>\n            </section>\n          </fieldset>\n        </form>\n        </Accordion.Collapse>\n\n      </section>\n    </Accordion>\n    );\n  }\n\n  const onAddFieldChange = (e) => {\n    newPerson[e.target.name] = e.target.value;\n  }\n\n  const sendAddAPI = (e) => {\n    e.preventDefault();\n\n    if (!isFormValid(newPerson, setAddFormErrorMsgs)) return;\n    \n    axios.post(URL_endpoint, newPerson, {headers})\n    .then(response => {\n      toast.success(`${newPerson.name} added successfully`);\n      // const updatedPeopleList = [...peopleList];\n      // updatedPeopleList.push(newPerson);\n      // updatePeopleListCB(setStateKey, updatedPeopleList)}\n      updatePeopleListCB(setStateKey, URL_endpoint)\n    })\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n  ////////////////////// FORM VALIDATION //////////////////////\n  const isFormValid = (newOrUpdatedPerson, setAddOrUpdatedFormMsgs) => {\n    let errorMsgs = [];\n\n    // name must be present\n    if (newOrUpdatedPerson.name === \"\" || !newOrUpdatedPerson.name) {\n      errorMsgs.push(\"Name cannot be blank\");\n    }\n\n    // if phone given, make sure it's correct format\n    if (newOrUpdatedPerson.phone && newOrUpdatedPerson.phone !== \"\") {\n      if (!isPhoneValid(newOrUpdatedPerson.phone)) {\n        // if phone is actually in technically correct format of (425)111-2222, then we'll convert it to correct format of 425-111-2222 for user\n        const correctedPhoneNum = convertToValidPhoneNumberIfInParens(newOrUpdatedPerson.phone);\n        if (correctedPhoneNum) {\n          newOrUpdatedPerson.phone = correctedPhoneNum;\n        } else {\n          errorMsgs.push(`Phone number format invalid`);\n        }\n      } else {\n        // convert from format of '4251112222' or '14251112222' to 425-111-2222 for readability\n        const newReadablePhone = convertToValidPhoneNumberIfAllNums(newOrUpdatedPerson.phone);\n        newOrUpdatedPerson.phone = newReadablePhone;\n      }\n    }\n\n    // if email given, make sure it's correct format\n    if (newOrUpdatedPerson.email && newOrUpdatedPerson.email !== \"\") {\n      if (!isEmailValid(newOrUpdatedPerson.email)) {\n        errorMsgs.push(`Email invalid`);\n      }\n    }\n\n    setAddOrUpdatedFormMsgs(errorMsgs);\n    return (errorMsgs.length === 0 ? true : false);\n  }\n\n  const showErrorMsgs = (addOrUpdatedFormMsgs) => {\n    const rowsOfMsgs = addOrUpdatedFormMsgs.map( (msg,i) => {\n      return (\n        <li key={i} className=\"centered-text\">{msg}</li>\n      );\n    });\n\n    return (\n      <ul className=\"centered-children-per-row_container\">{rowsOfMsgs}</ul>\n    );\n  }\n\n  ////////////////////// READ person //////////////////////\n  const toggleAsPersonSpotlight = (selectedPerson) => {\n    if (personSpotlight === selectedPerson) {\n      setPersonSpotlight(\"\");\n    } else {\n      setPersonSpotlight(selectedPerson);\n      setUpdateFormErrorMsgs([]);\n    }   \n  }\n\n  const read = (i, peopleList) => {\n    const selectedPerson = peopleList[i];\n    toggleAsPersonSpotlight(selectedPerson);\n\n    setUpdateSpotlightBool(false);\n  }\n\n  ////////////////////// UPDATE person //////////////////////\n  const update = (i, peopleList) => {\n    const selectedPerson = peopleList[i];\n    toggleAsPersonSpotlight(selectedPerson);\n\n    setUpdateSpotlightBool(true);\n    const copiedPerson = JSON.parse(JSON.stringify(selectedPerson));\n    setUpdatedPerson(copiedPerson);\n  }\n\n  const onUpdateFieldChange = (e) => {\n    updatedPerson[e.target.name] = e.target.value;\n    setUpdatedPerson(updatedPerson);\n  }\n\n  const sendUpdateAPI = (e) => {\n    e.preventDefault();\n\n    if (!isFormValid(updatedPerson, setUpdateFormErrorMsgs)) return;\n    \n    axios.put(`${URL_endpoint}/${updatedPerson.id}`, updatedPerson, {headers})\n    .then( response => {\n      toast.success(`${updatedPerson.name} updated successfully`);\n      const updatedPeopleList = peopleList.map(person => {\n        if (person.id === updatedPerson.id) {\n          return response.data;\n        } else {\n          return person;\n        }\n      });\n      updatePeopleListCB(setStateKey, URL_endpoint)\n    }\n    )\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  ////////////////////// DEACTIVATE person //////////////////////\n  const deactivate = (person) => {\n    setPersonSpotlight(\"\");\n    personInPurgatory = person;\n\n    // TODO: If employee, need to reopen shifts they alreay committed to!!! and inform employees!!!\n    // TODO: If client, need to close shifts they alreay committed to!!! and inform employees!!!\n\n    toast(<ToastUndo undo={undo} message={`Deleting ${person.name}`}/>, {\n      // hook will be called when the component unmount\n      onClose: sendDeleteAPIOrNot\n    });\n  }\n\n  const undo = () => {\n    personInPurgatory = null;\n  }\n\n  const sendDeleteAPIOrNot = () => {\n    if (!personInPurgatory) {\n      return;\n    }\n\n    // if there's really a person to deactivate\n    axios.delete(URL_endpoint + \"/\" + personInPurgatory.id, {headers})\n    .then(response => {\n      // const updatedPeopleList = peopleList.filter( p => p !== personInPurgatory );\n      updatePeopleListCB(setStateKey, URL_endpoint);\n    })\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  //////////////////////////// render ////////////////////////////\n  return (\n    <section>\n      <h1 className=\"text-centered margin-all-1rem\">ALL {personType.toUpperCase()}S</h1>\n      {showAddSection()}\n      {showAll(peopleList)}\n    </section>\n  );\n\n}\n\n\nexport default PeopleTable;\n\nPeopleTable.propTypes = {\n  personType: PropTypes.string.isRequired, \n  peopleList: PropTypes.arrayOf(PropTypes.object), \n  URL_endpoint: PropTypes.string.isRequired, \n  setStateKey: PropTypes.string.isRequired, \n  updatePeopleListCB: PropTypes.func.isRequired,\n};","export default __webpack_public_path__ + \"static/media/alarmClock.b26c6446.svg\";","export default __webpack_public_path__ + \"static/media/stopwatch.c80843f2.svg\";","export default __webpack_public_path__ + \"static/media/warning.5346a599.svg\";","export default __webpack_public_path__ + \"static/media/questionBubble.476485a4.svg\";","export default __webpack_public_path__ + \"static/media/comboLock.ae4f774a.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport alarmClock from '../images/alarmClock.svg';\nimport stopwatch from '../images/stopwatch.svg';\nimport warning from '../images/warning.svg';\nimport questionBubble from '../images/questionBubble.svg';\nimport lock from '../images/comboLock.svg';\n\nexport default function ErrorGeneral({ icon, message }) {\n\n  const showSpecificIcon = () => {\n    if (icon === \"alarm\") {\n      return <img src={alarmClock} alt=\"alarm clock\" className=\"homepage-logo\"/>;\n    } else if (icon === \"stopwatch\") {\n      return <img src={stopwatch} alt=\"stopwatch\" className=\"homepage-logo\"/>\n    } else if (icon === \"warning\") {\n      return <img src={warning} alt=\"warning sign\" className=\"homepage-logo\"/>\n    } else if (icon === \"lock\") {\n      return <img src={lock} alt=\"lock\" className=\"homepage-logo\"/>\n    } else {\n      return <img src={questionBubble} alt=\"man with question bubble above head\" className=\"homepage-logo\"/>\n    }\n  }\n  \n  return (\n    <section className=\"margin-all-1rem\">\n      <h1 className=\"text-centered margin-all-1rem\">{message}</h1>\n      {showSpecificIcon()}\n    </section>\n  );\n}\n\nErrorGeneral.propTypes = {\n  icon: PropTypes.string,\n  message: PropTypes.string,\n};","import React from 'react';\nimport axios from 'axios';\nimport CalendarTab from './AdminDash_CalendarTab';\nimport ShiftsTable from './AdminDash_ShiftsTable';\nimport PeopleTable from './AdminDash_PeopleTable.js';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { makeHeader, sortShiftsByDate, isPhoneValid, formatDate, formatTime, truncateString } from './Helpers';\nimport ErrorGeneral from './ErrorGeneral';\n\nconst uuidv4 = require('uuid/v4');\n\nconst ALL_EMPS = process.env.REACT_APP_ALL_EMPS;\nconst ALL_CLIENTS = process.env.REACT_APP_ALL_CLIENTS;\nconst ALL_ADMINS = process.env.REACT_APP_ALL_ADMINS;\nconst ALL_SHIFTS = process.env.REACT_APP_ALL_SHIFTS;\nconst ALL_UNAVAILS = process.env.REACT_APP_ALL_EMPS;\nconst SEND_TEXT = process.env.REACT_APP_TEXT_EMPS;\n\nexport default class AdminDash extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      allClients: [],\n      allAdmins: [],\n      allEmployees: [],\n      allShifts: [],\n      allUnavails: [],\n      \n      show: \"calendar\"\n    }\n\n  }\n\n  ////////////////////// loading db data //////////////////////\n  \n  getAllEmpsDB = (headers) => axios.get(ALL_EMPS, {headers});\n  getAllClientsDB = (headers) => axios.get(ALL_CLIENTS, {headers});\n  getAllAdminsDB = (headers) => axios.get(ALL_ADMINS, {headers});\n  getAllShiftsDB = (headers) => axios.get(ALL_SHIFTS, {headers});\n  getAllUnavailsDB = (headers) => axios.get(ALL_UNAVAILS, {headers});\n\n  componentDidMount() {\n    const headers = makeHeader();\n    // initial loading of data from database\n    axios.all([\n      this.getAllEmpsDB(headers),\n      this.getAllClientsDB(headers),\n      this.getAllAdminsDB(headers),\n      this.getAllShiftsDB(headers),\n      this.getAllUnavailsDB(headers)])\n    .then(axios.spread((...responses) => {\n      const allEmployees = responses[0].data;\n      const allClients = responses[1].data;\n      const allAdmins = responses[2].data;\n      const allShifts = responses[3].data;\n      const allUnavails = responses[4].data;\n\n      // sort allShifts by date\n      const allShiftsSorted = sortShiftsByDate(allShifts);\n\n      this.setState({\n        allEmployees: allEmployees,\n        allClients: allClients,\n        allAdmins: allAdmins,\n        allShifts: allShiftsSorted,\n        allUnavails: allUnavails\n      });\n    }))\n    .catch( errors => `Error downloading from database: ${toast.error(errors.message)}`);\n  }\n\n  ////////////////////// set DISPLAY choice //////////////////////\n  setShowCategory = (chosen) => this.setState({show: chosen});\n\n  showChosenCategory = () => {\n    const chosen = this.state.show;\n    \n    if (chosen === \"calendar\") {\n      return this.showCalendar();\n    } else if (chosen === \"admins\") {\n      return this.showAllAdmins();\n    } else if (chosen === \"employees\") {\n      return this.showAllEmployees();\n    } else if (chosen === \"clients\") {\n      return this.showAllClients();\n    } else if (chosen === 'shifts') {\n      return this.showAllShifts();\n    }\n  }\n\n  ////////////////////// DISPLAY: calendar  //////////////////////\n  showCalendar = () => {\n    return <CalendarTab \n      allClients={this.state.allClients} \n      allShifts={this.state.allShifts} \n      updateAllShiftsCallback={this.updateAllShifts}\n      textEmployeesCallback={this.textEmployees}/>\n  }\n\n  ////////////////////// DISPLAY: Shifts  //////////////////////\n  showAllShifts = () => {\n    return <ShiftsTable allShifts={this.state.allShifts} textEmployeesCallback={this.textEmployees}/>\n  }\n\n  ////////////////////// DISPLAY: Employees/Clients/Admin //////////////////////\n  showAllEmployees = () => <PeopleTable personType=\"employee\" peopleList={this.state.allEmployees} URL_endpoint={ALL_EMPS} setStateKey=\"allEmployees\" updatePeopleListCB={this.updatePeopleList}/>\n  showAllAdmins = () => <PeopleTable personType=\"admin\" peopleList={this.state.allAdmins} URL_endpoint={ALL_ADMINS} setStateKey=\"allAdmins\" updatePeopleListCB={this.updatePeopleList}/>\n  showAllClients = () => <PeopleTable personType=\"client\" peopleList={this.state.allClients} URL_endpoint={ALL_CLIENTS} setStateKey=\"allClients\" updatePeopleListCB={this.updatePeopleList}/>\n\n  updatePeopleList = (setStateKey, URL_endpoint) => {\n    // this is a callback function for <PeopleTable> to send back updated peopleList\n    // so we can .setState here to allow re-rendering of visuals\n    // this.setState({ [setStateKey]: updatedPeopleList });\n    const headers = makeHeader();\n    axios.get(URL_endpoint, {headers})\n    .then( response => this.setState({ [setStateKey]: response.data }))\n    .catch(error => toast.error(`ERROR downloading list: ${error.message}`));\n  }\n  \n  ////////////////////// Callback fcns  //////////////////////\n  updateAllShifts = () => {\n    const headers = makeHeader();\n\n    axios.get(ALL_SHIFTS, {headers})\n    .then( response => {\n      const sortedShifts = sortShiftsByDate(response.data);\n      this.setState({ allShifts: sortedShifts });\n    })\n    .catch(error => toast.error(error.message));\n  }\n\n  textEmployees = (shiftObj, availEmpsOfDay) => {\n    // shiftObj may be a newly made shift, or existing one that's just not staffed yet\n    // availEmpsOfDay is a list of people who are 1. NOT already booked that day, and 2. NOT on in Unavails database\n      // if an employee wants that shift, they can still see it from their dashboard where they'll be told they wanted the day off\n      // and they can change their minds and accept the shift anyway.  They just won't get a text here, nobody wants a text on their day off.\n\n    // of the availEmpsOfDay, we can only text those with a valid (Helper fcn) AND verified (added to Twilio console) phone number\n    // verify phone number via Twilio console https://www.twilio.com/console/phone-numbers/verified, employee will need to give me the code they received!\n    const textableEmployees = availEmpsOfDay.filter( emp => {\n      return isPhoneValid(emp.phone);\n    });    \n\n    if (availEmpsOfDay.length === 0) {  // u can see this if u make a shift on 1/25/2020\n      toast.error(\"No employees available to work that day!\");\n      return;\n    } else if (textableEmployees.length === 0) {    // u can see this if u make a shift on 2/3/2020\n      toast.info(\"No available employees with valid phone numbers to text.  However, they'll be able to see the shift on their dashboard\");\n      return;\n    } else {\n      toast.info(\"Sending texts...\");\n    }\n\n    const jsonForTextAPI = (employee, shift) => {\n      // each text gets assigned an uuid for the db\n      const uuid = uuidv4();\n      \n      const FRONT_END_URL = process.env.REACT_APP_FRONT_END_URL;\n\n      // yes the indentation looks terrible here, but it's necessary otherwise the text msgs will ALSO have indents\n      const personalizedMsg = (`\n====================\nHello ${employee.name}!  \n          \nWe have a shift available:\n  Date: ${formatDate(shift.shift_date)}\n  Client: ${shift.client.name}\n  Time: ${formatTime(shift.start_time)} to ${formatTime(shift.end_time)}.  \n\nPlease click on [${FRONT_END_URL}/text/${uuid}] to confirm, or log onto your employee dashboard to claim this shift.  \n\nThank you from the office of Schedule Plus Plus!\n====================`\n        );\n\n      return(\n        { \"phoneNumber\": employee.phone,\n          \"message\": personalizedMsg,\n          \"uuid\": uuid,\n          \"client\": shift.client,\n          \"employee\": employee,\n          \"shift\": shift\n        }\n      );\n    }\n\n    const headers = makeHeader();\n    const allAxiosPostReqs = textableEmployees.map( employee => {\n      // each employee gets a text\n      return (axios.post(SEND_TEXT, jsonForTextAPI(employee, shiftObj), {headers}));\n    })\n    \n    // bundled all the individual post requests together,\n    // failed texts will not get in the way of successful texts\n    axios.all(allAxiosPostReqs)\n    .then(\n      // keeping this chunk around just in case\n      // axios.spread((...responses) => {\n      // for ( const eachText of responses ) {\n      //   console.log(\"\\nTEXT sent:\", eachText.data);\n      // }})\n      )\n    .catch( errors => {\n      const fullErrorMsg = errors.response.data.message;    \n      const fullTextBody = JSON.parse(errors.config.data);\n      const badPhone = fullTextBody.phoneNumber;\n      const unreachableEmp = textableEmployees.find( emp => emp.phone === badPhone );\n      let reason = \"\";\n      if (fullErrorMsg.includes(\"number  is unverified\")) {\n        reason = \"Employee needs to verify number with Twilio\";\n      } else {\n        reason = truncateString(fullErrorMsg, 20);\n      }\n      toast.error(`Unable to text ${unreachableEmp.name}: ${reason}`);\n    });\n  }\n\n  ////////////////////// render //////////////////////\n    render() {\n      if (this.props.authenticatedRole !== \"ADMIN\") {\n        return <ErrorGeneral message=\"Please log in to see ADMIN dashboard\" icon=\"lock\"/>\n      }\n      \n      return (\n        <section>\n\n          <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\">\n            {/* TODO: Navbar keeps Calendar tab highlighted even if that's not chosen, fix! */}\n            <Navbar.Brand onClick={()=>this.setShowCategory('calendar')}>CALENDAR</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={()=>this.setShowCategory('shifts')}>SHIFTS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('employees')}>EMPLOYEES</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('clients')}>CLIENTS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('admins')}>ADMINS</Nav.Link>\n            </Nav>\n          </Navbar>\n          \n          {this.showChosenCategory()}\n\n        </section>\n        \n      );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { convertDateString, formatDate, formatTime } from './Helpers';\nimport Accordion from 'react-bootstrap/Accordion';\n\n\nconst CalendarDay = ({shiftsToday, shiftsOfDaySpotlight, dateStr, availStatus, toggleAvailCallback}) => {\n\n  const showShifts = (shiftsInArray) => {\n    // shiftsInArray can either be shiftsToday[] or shiftsOfDaySpotlight[] \n    if (shiftsInArray.length > 0) {\n      return ( shiftsInArray.map ((shift, i) => {\n        return (\n        <section key={i}>\n          {showWholeShiftCard(shift)}\n        </section>\n        );\n      }));\n    } else {\n      return (\n        <section className=\"text-centered\">\n          <h3>No shifts scheduled</h3>\n        </section>\n      );\n    }\n    \n  }\n\n  const showWholeShiftCard = (shift) => {\n\n    return (\n      <section>\n        <h5 className=\"thead-dark text-centered\">SHIFT INFO</h5>\n        <section className={`card-shift centered-children-per-row_container`}>\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n        \n        <h5 className=\"thead-dark text-centered\">CLIENT INFO</h5>\n        <section className=\"card-client centered-children-per-row_container\">\n          <p>CLIENT</p>\n          <p>{shift.client.name}</p>\n          <p>PHONE</p>\n          <p>{shift.client.phone}</p>\n          <p>EMAIL</p>\n          <p>{shift.client.email}</p>\n          <p>ADDRESS</p>\n          <p>{shift.client.address}</p>\n        </section>\n        \n      </section>\n    );\n  }\n\n  const showAgendaOrOptions = () => {\n\n    const today = convertDateString(new Date());\n    const inThePast = dateStr < today;\n\n    if (shiftsOfDaySpotlight.length > 0) {\n      return (\n        <section>\n          {inThePast ? (<h3 className=\"text-centered\">Shift completed!</h3>) : null }\n          {showShifts(shiftsOfDaySpotlight)}\n        </section>\n      );\n      \n    } else if (inThePast) {\n      return (<h3 className=\"text-centered\">Nothing that day</h3>);\n\n    } else if (shiftsOfDaySpotlight.length === 0 && availStatus === true) {\n      return (\n        <section className=\"text-centered\">\n          <h3>No shifts scheduled</h3>\n          <button onClick={() => {toggleAvailCallback(false)}} className=\"btn btn-danger\">Take the day off</button>\n        </section>\n      );\n\n    } else if (shiftsOfDaySpotlight.length === 0 && availStatus === false) {\n      return (\n        <section className=\"text-centered\">\n          <h3>You have the day off</h3>\n          <button onClick={() => {toggleAvailCallback(true)}} className=\"btn btn-success\">I'm free to work</button>\n        </section>\n      );\n    } \n  }\n\n  ////////////////////////////// render //////////////////////////////\n  return(\n\n    <section className=\"accordion-container\"> \n      <Accordion>\n        <section>\n          <Accordion.Toggle eventKey=\"showToday\" className=\"accordion-toggle_button gold-bg\" >\n            <section className=\"section-3-col\">\n              <section>▼</section>\n              <section>TODAY</section>\n              <section>▼</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"showToday\">\n            <section className=\"lightgold-bg margin-all-1rem padding-all-1rem \">{showShifts(shiftsToday)}</section>\n          </Accordion.Collapse>\n\n        </section>\n      </Accordion>\n\n      <Accordion>\n        <section>\n          <Accordion.Toggle eventKey=\"showCalendarClick\" className=\"accordion-toggle_button blue-bg\" >\n            <section className=\"section-3-col\">\n              <section>▼</section>\n              <section>{formatDate(dateStr).toUpperCase()}</section>\n              <section>▼</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"showCalendarClick\">\n            <section className=\"lightblue-bg margin-all-1rem padding-all-1rem \">{showAgendaOrOptions()}</section>\n          </Accordion.Collapse>\n\n        </section>\n      </Accordion>\n\n    </section>\n  );\n  \n}\n\nexport default CalendarDay;\n\nCalendarDay.propTypes = {\n  shiftsToday: PropTypes.arrayOf(PropTypes.object), \n  shiftsOfDaySpotlight: PropTypes.arrayOf(PropTypes.object), \n  dateStr: PropTypes.string.isRequired,  \n  availStatus: PropTypes.oneOfType([ PropTypes.bool, null ]),\n  toggleAvailCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Calendar from 'react-calendar';\nimport CalendarDay from './EmployeeDash_CalendarDay';\nimport { convertToPST, convertDateString, dateInThePast } from './Helpers';\n\n\n\nconst CalendarTab = ({empUnavails, empShifts, daySpotlight, shiftsToday, shiftsOfDay, availStatusOfDay, unstaffedShifts, updateStateForCalendarDayCB, toggleAvailCallback}) => {\n  const today = new Date();\n\n  const isDateInEmpUnavails = (targetDate) => {\n    for (const shiftObj of empUnavails) {\n      if (shiftObj.day_off === targetDate) { return true }\n    }\n    return false;\n  }\n\n  const isDateInEmpShifts = (targetDate) => {\n    for (const shiftObj of empShifts) {\n      if (shiftObj.shift_date === targetDate) { return true }\n    }\n    return false;\n  }\n  \n\n  const tileContent = ({ date, view }) => {\n    let tileCaption = \" - \";\n    let tileClassName = \"\";\n    \n    const targetDate = convertDateString(date);\n    // <Calendar> will iterate thru each date in the display month\n      // if employee is working that day -> green background\n      // if employee is unavailable that day -> red background\n      // These 2 conditions below supercedes the 2 above\n      // if date is in the past -> gray background\n      // if it's on today -> gold background\n    \n    if (isDateInEmpUnavails(targetDate)) {\n      tileCaption = \"OFF\";\n      tileClassName = \"tile-unavail\";\n    } else if (isDateInEmpShifts(targetDate)) {\n      tileCaption = \"ON\";\n      tileClassName = \"tile-work\";\n    } else {\n      // left room here for future customization\n    }\n  \n    // I want tile-today's css to override any of the prev\n    if (dateInThePast(targetDate)) {\n      tileCaption = \" x \";\n      tileClassName = \"tile-past\";\n    } else if (targetDate === convertDateString(today)) {\n      tileCaption = \"TODAY\";\n      tileClassName = \"tile-today\";\n    }\n\n    // we only need to see the colored tiles when looking at monthly view .\n    if (view === \"month\") {\n      return (\n        <section className={tileClassName}>{tileCaption}</section>\n      );\n    } \n  }\n\n  /////////// render ////////////\n  return(\n    <section>\n      <section className=\"calendar-container\">\n        <Calendar tileContent={tileContent} onChange={updateStateForCalendarDayCB} value={convertToPST(daySpotlight)}/>\n      </section>\n      <CalendarDay toggleAvailCallback={toggleAvailCallback} shiftsToday={shiftsToday} shiftsOfDaySpotlight={shiftsOfDay} dateStr={daySpotlight} availStatus={availStatusOfDay}/>\n    </section>\n  );\n\n}\n\nexport default CalendarTab;\n\nCalendarTab.propTypes = {\n  empUnavails: PropTypes.arrayOf(PropTypes.object),\n  empShifts: PropTypes.arrayOf(PropTypes.object),\n  daySpotlight: PropTypes.string.isRequired,\n  shiftsToday: PropTypes.arrayOf(PropTypes.object),\n  shiftsOfDay: PropTypes.arrayOf(PropTypes.object),\n  availStatus: PropTypes.oneOfType([ PropTypes.bool, null ]),\n  unstaffedShifts: PropTypes.arrayOf(PropTypes.object), \n  updateStateForCalendarDayCB: PropTypes.func.isRequired, \n  toggleAvailCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport { formatDate } from './Helpers';\nimport PropTypes from 'prop-types';\n\nconst UnavailDays = ({sortedUnavails, freeToWorkCallback}) => {\n\n  const showUnavailsTable = () => {\n    return sortedUnavails.map(unavail => {\n      return(\n        <section key={unavail.id} className=\"employee-dash-unavails-table\">\n          <section>{formatDate(unavail.day_off)}</section>\n          <button onClick={()=>{freeToWorkCallback(unavail)}} className=\"btn btn-success margin-right-5rem\">I'm free to work</button>\n        </section>\n      );\n    })\n  }\n\n  return(\n    <section> \n      <h1 className=\"text-centered\">UNAVAILABLE DAYS</h1>\n      {showUnavailsTable()}\n    </section>\n  );\n  \n}\n\nexport default UnavailDays;\n\nUnavailDays.propTypes = {\n  sortedUnavails: PropTypes.arrayOf(PropTypes.object),\n  freeToWorkCallback: PropTypes.func.isRequired,\n};","import React, {useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { makeHeader, isPhoneValid, isEmailValid, convertToValidPhoneNumberIfInParens, convertToValidPhoneNumberIfAllNums } from './Helpers';\n\n\nconst Info = ({info, URL_endpoint, updateInfoCallback}) => {\n  const copiedPerson = JSON.parse(JSON.stringify(info));\n  const [person, setPerson] = useState(copiedPerson);\n  const [errorMsgs, setErrorMsgs] = useState([]);\n\n  const onFieldChange = (e) => {\n    person[e.target.name] = e.target.value;\n    setPerson(person);\n  }\n\n  const evalFormThenSendApi = (e) => {\n    e.preventDefault();\n\n    if (!isFormValid()) return;\n\n    const headers = makeHeader();\n    axios.put(URL_endpoint, person, {headers})\n    .then(\n      toast.success(`${person.name} updated successfully`),\n      updateInfoCallback(person)\n    )\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  const isFormValid = () => {\n    let errors = [];\n\n    // name must be present\n    if (person.name === \"\" || !person.name) {\n      errors.push(\"Name cannot be blank\");\n    }\n\n    // if phone given, make sure it's correct format\n    if (person.phone && person.phone !== \"\") {\n      if (!isPhoneValid(person.phone)) {\n        // if phone is actually in technically correct format of (425)111-2222, then we'll convert it to correct format of 425-111-2222 for user\n        const correctedPhoneNum = convertToValidPhoneNumberIfInParens(person.phone);\n        if (correctedPhoneNum) {\n          person.phone = correctedPhoneNum;\n        } else {\n          errors.push(`Phone number format invalid`);\n        }\n      } else {\n        // convert from format of '4251112222' or '14251112222' to 425-111-2222 for readability\n        const newReadablePhone = convertToValidPhoneNumberIfAllNums(person.phone);\n        person.phone = newReadablePhone;\n      }\n    }\n\n    // if email given, make sure it's correct format\n    if (person.email && person.email !== \"\") {\n      if (!isEmailValid(person.email)) {\n        errors.push(`Email invalid`);\n      }\n    }\n\n    setErrorMsgs(errors);\n    return (errors.length === 0 ? true : false);\n  }\n\n  const showErrorMsgs = (addOrUpdatedFormMsgs) => {\n    const rowsOfMsgs = addOrUpdatedFormMsgs.map( (msg,i) => {\n      return (\n        <li key={i} className=\"centered-text\">{msg}</li>\n      );\n    });\n\n    return (\n      <ul className=\"centered-children-per-row_container\">{rowsOfMsgs}</ul>\n    );\n  }\n\n  ////////////////////////////// render //////////////////////////////\n  return (\n      <section>   \n        <h1  className=\"text-centered margin-all-1rem\">MY INFO</h1>\n        <form>\n          <fieldset>\n            <section className=\"form-group margin-all-1rem\">\n              <label>NAME: {info.name}</label>\n              <input type=\"text\" className=\"form-control\" name=\"name\" onChange={onFieldChange} placeholder={\"new name here\"}/>\n              <label className=\"margin-top-1rem\">ADDRESS: {info.address}</label>\n              <input type=\"text\" className=\"form-control\" name=\"address\" onChange={onFieldChange} placeholder={\"new address here\"}/>\n              <label className=\"margin-top-1rem\">PHONE: {info.phone}</label>\n              <input type=\"text\" className=\"form-control\" name=\"phone\" onChange={onFieldChange} placeholder={\"new phone here\"}/>\n              <label className=\"margin-top-1rem\">EMAIL: {info.email}</label>\n              <input type=\"text\" className=\"form-control\" name=\"email\" onChange={onFieldChange} placeholder={\"new email here\"}/>\n            </section>\n            <section className=\"centered-children-per-row_container margin-all-1rem\">\n              {errorMsgs === [] ? null : showErrorMsgs(errorMsgs)}\n              <button onClick={evalFormThenSendApi} className=\"btn btn-primary\">UPDATE</button>\n            </section>\n          </fieldset>\n        </form>\n      </section>\n    );\n}\n\nexport default Info;\n\n\nInfo.propTypes = {\n  info: PropTypes.object, \n  URL_endpoint: PropTypes.string.isRequired, \n  updateInfoCallback: PropTypes.func.isRequired,\n};\n\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport PropTypes from 'prop-types';\nimport { formatTime, formatDate, dateInThePast, getWeekday } from './Helpers';\nimport ShiftsTable from './AdminDash_ShiftsTable';\n\nconst EmployeeDash_ShiftsTable = ({sortedOwnShifts, sortedUnstaffedShifts, sortedUnavails, takeShiftCallback, freeToWorkCallback}) => {\n\n  ////////////////// prelim work ////////////////////\n  // divide the sortedOwnShifts into active shifts (current & future) and past shifts\n  let ownActiveShifts = [];\n  let ownPastShifts = [];\n  let cloneAllOwnShifts = [...sortedOwnShifts];\n  \n  while (cloneAllOwnShifts[0]) {\n    if (dateInThePast(cloneAllOwnShifts[0].shift_date)) {\n      ownPastShifts.push(cloneAllOwnShifts.shift());\n    } else {\n      ownActiveShifts = [...cloneAllOwnShifts];\n      break;\n    }\n  }\n  \n  ////////////////// fcns ////////////////////\n  const showOwnShifts = (listOfShifts, customClassName) => {\n    return listOfShifts.map(shift => {\n      return (\n        <Accordion key={shift.id}>\n          <section>\n            <Accordion.Toggle eventKey=\"showInfo\" className={`accordion-toggle_button ${customClassName}`}>\n              <section className=\"section-4-col\">\n                <section>▼</section>\n                <section>{formatDate(shift.shift_date)}</section>\n                <section>{getWeekday(shift.shift_date)}</section>\n                <section>{shift.client.name}</section>\n              </section>\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey=\"showInfo\">\n              <section>{showWholeShiftCard(shift)}</section>\n            </Accordion.Collapse>\n\n          </section>\n        </Accordion>\n      )}\n    )\n  }\n\n  const showOwnActiveShifts = () => {\n    return showOwnShifts(ownActiveShifts, \"lightblue-bg\");\n  }\n\n  const showOwnPastShifts = () => {\n    return showOwnShifts(ownPastShifts, \"gray-bg\");\n  }\n\n  const showUnstaffedShifts = () => {\n    return(\n      <section>\n        {sortedUnstaffedShifts.map(shift => {\n          return (\n            <Accordion key={shift.id}>\n              <section>\n                <Accordion.Toggle eventKey=\"showInfo\" className={dateInThePast(shift.shift_date)? (\"accordion-toggle_button gray-bg\"):(\"accordion-toggle_button lightblue-bg\")}>\n                  <section className=\"section-4-col\">\n                    <section>▼</section>\n                    <section>{formatDate(shift.shift_date)}</section>\n                    <section>{getWeekday(shift.shift_date)}</section>\n                    <section>{shift.client.name}</section>\n                  </section>\n                </Accordion.Toggle>\n\n                <Accordion.Collapse eventKey=\"showInfo\">\n                  <section>{showWholeShiftCard(shift, true)}</section>\n                </Accordion.Collapse>\n\n              </section>\n            </Accordion>\n          )}\n        )}\n      </section>\n    );\n  }\n\n  const showWholeShiftCard = (shift, takeButton=false) => {\n    return (\n      <section>\n        <section className={dateInThePast(shift.shift_date)? (\"card-shift gray-bg\"):(\"card-shift lightblue-bg\")} >\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client\">\n          <p>CLIENT</p>\n          { shift.client ? <p>{shift.client.name}</p> : <p></p> }\n          <p>PHONE</p>\n          { shift.client ? <p>{shift.client.phone}</p> : <p></p> }\n          <p>EMAIL</p>\n          { shift.client ? <p>{shift.client.email}</p> : <p></p> }\n          <p>ADDRESS</p>\n          { shift.client ? <p>{shift.client.address}</p> : <p></p> }\n        </section>\n\n        { takeButton ? showTakeShiftSection(shift) : null}\n\n      </section>\n    );\n  }\n\n  const isEmpBookedElsewhere = (possibleDate) => {\n    for (const shift of sortedOwnShifts) {\n      if (shift.shift_date > possibleDate) {\n        return false;\n      } else if (shift.shift_date === possibleDate) {\n        return true;\n      }\n    }  \n  } \n\n  const isEmpOffThatDay = (possibleDate) => {\n    for (const unavail of sortedUnavails) {\n      if (unavail.day_off > possibleDate) {\n        return false;\n      } else if (unavail.day_off === possibleDate) {\n        return true;\n      }\n    }  \n  } \n\n  const showTakeShiftSection = (shift) => {\n    const bookedElsewhere = isEmpBookedElsewhere(shift.shift_date);\n    const offThatDay = isEmpOffThatDay(shift.shift_date);\n    const cannotWork = bookedElsewhere || offThatDay;\n\n    if (cannotWork) {\n      if (bookedElsewhere) {\n        // TODO: This never gets triggered, already sifted out in EmployeeDash.showAllShifts(). Clean up!\n        return (\n          <section className=\"gray-bg text-centered margin-all-1rem\">\n            <p className=\"padding-all-1rem\">You are already working elsewhere that day!</p>\n            </section>\n        );\n      } else if (offThatDay) {\n        return (\n          <section className=\"gray-bg text-centered margin-all-1rem\">\n            <p className=\"padding-top-1rem\">You have the day off but you can change your mind!</p>\n            {/* Clicking on this button will result in re-rendering this section as 'eligible for shift', user should see lightblue-bg w/ blue button b/c reeval'd cannot=false */}\n            <button onClick={() =>{removeUnavail(shift)}} className=\"btn btn-success margin-all-1rem\">I can work</button>\n            </section>\n        );\n      }\n      \n    } else {\n      return (\n        <section className=\"lightblue-bg text-centered margin-all-1rem\">\n          <p className=\"padding-top-1rem\">You are eligible for this shift!</p>\n          <button onClick={() =>{takeShiftCallback(shift)}} className=\"btn btn-primary margin-all-1rem\">Take the shift</button>\n          </section>\n      );\n    }\n  }\n\n  const removeUnavail = (shift) => {\n    const unavailObj = sortedUnavails.find(unavail => unavail.day_off === shift.shift_date );\n    freeToWorkCallback(unavailObj);\n  }\n\n  ////////////////// render ////////////////////\n  if (!sortedOwnShifts) {\n    // TODO: this never happens, sortedOwnShifts gen'd synchronously.  Did I leave this in for some reason?\n    return (\n      <section>\n        <h1 className=\"text-centered\">MY SHIFTS</h1>\n        <p>Nothing yet...</p>\n        \n        <h1 className=\"text-centered\">AVAILABLE SHIFTS</h1>\n        {showUnstaffedShifts()}\n      </section>\n    );\n\n  } else {\n    return(\n      <section>\n        <h1 className=\"text-centered\">MY SHIFTS</h1>\n        {showOwnActiveShifts()}\n        <h1 className=\"text-centered\">AVAILABLE SHIFTS</h1>\n        {showUnstaffedShifts()}\n        <h1 className=\"text-centered\">PAST SHIFTS</h1>\n        {showOwnPastShifts()}\n      </section>\n    );\n  }    \n}\n\nexport default EmployeeDash_ShiftsTable;\n\n\nShiftsTable.propTypes = {\n  sortedOwnShifts: PropTypes.arrayOf(PropTypes.object), \n  sortedUnstaffedShifts: PropTypes.arrayOf(PropTypes.object), \n  sortedUnavails: PropTypes.arrayOf(PropTypes.object), \n  takeShiftCallback: PropTypes.func.isRequired, \n  freeToWorkCallback: PropTypes.func.isRequired,\n};","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport CalendarTab from './EmployeeDash_CalendarTab';\nimport UnavailDays from './EmployeeDash_UnavailDays';\nimport Info from './EmployeeDash_Info';\nimport ErrorGeneral from './ErrorGeneral';\nimport axios from 'axios';\nimport ShiftsTable from './EmployeeDash_ShiftsTable';\nimport { makeHeader, convertDateString, sortUnavailsByDate, sortShiftsByDate, deepCompareTwoSchedArrayss } from './Helpers';\n\n//https://www.hobo-web.co.uk/best-screen-size/  \n// 360x640\n// 1366 x 768\n// 1920x1080   \n\nexport default class EmployeeDash extends React.Component {\n\n  constructor() {\n    super()\n    const today = convertDateString(new Date())\n    this.state = {\n      EMP_DASH: process.env.REACT_APP_EMP_DASH+\"/\"+sessionStorage.getItem('databaseId'),\n      empInfo: [],\n      empUnavails: [],\n      empShifts: [],\n      daySpotlight: today,\n      shiftsToday: [],\n      shiftsOfDay: [],\n      availStatusOfDay: null,\n      show: 'calendar',\n      unstaffedShifts: []\n    }\n  }\n\n  getEmpInfo = (headers) => axios.get(this.state.EMP_DASH, {headers});\n  getEmpShifts = (headers) => axios.get(this.state.EMP_DASH+\"/shifts\", {headers});\n  getEmpUnavails = (headers) => axios.get(this.state.EMP_DASH+\"/unavails\", {headers});\n  getUnstaffedShifts = (headers) => axios.get(this.state.EMP_DASH+\"/unstaffedShifts\", {headers});\n  \n  componentDidMount() {\n    // initial loading of data from database\n    const headers = makeHeader();\n\n    axios.all([\n      this.getEmpInfo(headers), \n      this.getEmpShifts(headers), \n      this.getEmpUnavails(headers),\n      this.getUnstaffedShifts(headers)\n    ])\n      .then(axios.spread((...responses) => {\n        const empInfo = responses[0].data;\n        const empShifts = responses[1].data;\n        const empUnavails = responses[2].data;\n        const unstaffedShifts = responses[3].data;\n        \n        // meanwhile find out if there's any shifts to autoload for today's calendar\n        const today = convertDateString(new Date());\n        const shiftsToday = empShifts.filter( shift => shift.shift_date === today );\n        // also find out if need to autoload if today is a day off\n        const canWorkBool = this.canTheyWorkThisDay(today, shiftsToday, empUnavails);\n\n        this.setState({\n          empInfo: empInfo,\n          empShifts: empShifts,\n          empUnavails: empUnavails,\n          shiftsToday: shiftsToday,\n          shiftsOfDay: shiftsToday,\n          availStatusOfDay: canWorkBool,\n          unstaffedShifts: unstaffedShifts\n        });\n        }))\n        .catch(errors => toast.error(`ERROR: ${errors.message}`));\n  }\n  \n  ////////////////////// set DISPLAY choice //////////////////////\n  setShowCategory = (chosen) => this.setState({show: chosen});\n\n  showChosenCategory = () => {\n    const chosen = this.state.show;\n    \n    if (chosen === \"calendar\") {\n      return this.showCalendar();\n    } else if (chosen === \"shifts\") {\n      return this.showAllShifts();\n    } else if (chosen === \"unavails\") {\n      return this.showAllUnavails();\n    } else if (chosen === \"info\") {\n      return this.showAllInfo();\n    }\n  }\n\n  showAllInfo = () => {\n    return <Info info={this.state.empInfo} URL_endpoint={this.state.EMP_DASH} updateInfoCallback={this.updateInfo}/>;\n  }\n\n  ////////////////////// DISPLAY: shifts tab //////////////////////\n  showAllShifts = () => {\n    const sortedOwnShifts = sortShiftsByDate(this.state.empShifts);\n    const sortedUnavails = sortUnavailsByDate(this.state.empUnavails);\n    const allSortedUnstaffedShifts = sortShiftsByDate(this.state.unstaffedShifts);\n    \n    let sortedUnstaffedShifts = allSortedUnstaffedShifts.filter( unstaffed => {\n      // Emp does NOT need to see...  1. unstaffed shifts that are in the past\n      // TODO: This can be improved by backend not sending this to begin with\n      const today = convertDateString(new Date());\n      if (unstaffed.shift_date < today) return false;\n\n      // 2. unstaffed shifts that coincide with their own booked days\n      for (const ownShift of sortedOwnShifts) {\n        if (unstaffed.shift_date === ownShift.shift_date) return false;\n        if (unstaffed.shift_date < ownShift.shift_date) break;\n      }\n\n      // if this unstaffed shift hasn't been disqualified by now, then employee can see it\n      return true;\n    })\n\n    return (<ShiftsTable sortedOwnShifts={sortedOwnShifts} sortedUnstaffedShifts={sortedUnstaffedShifts} sortedUnavails={sortedUnavails} freeToWorkCallback={this.freeToWork} takeShiftCallback={this.takeShift}/>);\n  }\n\n  ////////////////////// DISPLAY: own unavails tab //////////////////////\n  showAllUnavails = () => {\n    const empUnavails = this.state.empUnavails;\n    const sortedUnavails = sortUnavailsByDate(empUnavails);\n\n    if (empUnavails.length === 0) {\n      return (\n        <h3 className=\"text-centered margin-all-1rem\">No upcoming unavailable days</h3>\n      );\n    } else {\n      return(\n      <section>\n        <UnavailDays sortedUnavails={sortedUnavails} freeToWorkCallback={this.freeToWork}/>\n      </section>\n    );\n    }\n  }\n  \n  ////////////////////// DISPLAY: calendar tab //////////////////////\n\n  showCalendar = () => {\n    return <CalendarTab \n      empUnavails={this.state.empUnavails}\n      empShifts={this.state.empShifts}\n      daySpotlight={this.state.daySpotlight}\n      shiftsToday={this.state.shiftsToday}\n      shiftsOfDay={this.state.shiftsOfDay}\n      availStatusOfDay={this.state.availStatusOfDay}\n      unstaffedShifts={this.state.unstaffedShifts}\n      updateStateForCalendarDayCB={this.updateStateForCalendarDay}\n      toggleAvailCallback={this.toggleAvail}\n    />;\n  }\n\n  updateStateForCalendarDay = (e) => {\n    const dateStr = convertDateString(e);\n\n    const shiftsOfDay = this.state.empShifts.filter( shift => shift.shift_date === dateStr);\n    const canWorkBool = this.canTheyWorkThisDay(dateStr, shiftsOfDay, this.state.empUnavails);\n    this.setState({ \n      daySpotlight: dateStr, \n      shiftsOfDay: shiftsOfDay, \n      availStatusOfDay: canWorkBool })\n  }\n\n  canTheyWorkThisDay = (dateStr, shiftsOfThatDay, unavails_list) => {\n    // are you already working today?\n    if (shiftsOfThatDay.length > 0) {\n      return false;\n    }\n    // do u have today off?\n    for (const unavail of unavails_list) {\n      if (unavail.day_off === dateStr) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  ////////////////////// Callback fcns & related helpers //////////////////////\n  freeToWork = (unavailObj) => {\n    const headers = makeHeader();\n    axios.delete(this.state.EMP_DASH + `/unavails/${unavailObj.id}`, {headers})\n      .then( response => {\n        // quick update on front end to match db\n        // response.data is the latest data from Unavails table in db for this employee\n        this.setState({ empUnavails: response.data, availStatusOfDay: true });\n      })  \n      .catch(error => toast.error(`ERROR deleting from db: ${error.message}`));\n  }\n\n  toggleAvail = (availBoolean) => {\n    let latestEmpUnavails = [...this.state.empUnavails];\n\n    if (availBoolean) {\n      // emp wants to work -> delete row from unavails table in db\n      // find id from this.state.empUnavails\n      const unavailObj = this.state.empUnavails.find( unavail => unavail.day_off === this.state.daySpotlight );\n      this.freeToWork(unavailObj);\n\n    } else {\n      const headers = makeHeader();\n      // emp wants day off -> post/add to unavails table in db\n      axios.post((this.state.EMP_DASH + `/unavails`), { day_off: this.state.daySpotlight }, { headers })\n      .then( response => {\n        // quick update on front end to match db\n        latestEmpUnavails.push( response.data );\n        this.setState({ empUnavails: latestEmpUnavails, availStatusOfDay: false });\n      } )   \n      .catch(error => toast.error(`ERROR adding from db: ${error.message}`));\n    }\n  }\n\n  takeShift = (shift) => {    \n    const URL_endpoint = this.state.EMP_DASH+`/shifts/${shift.id}`;\n    const headers = makeHeader();\n\n    // JS weirdness!!! axios HAS to have somehting as the 2nd arg, bc it thinks it's the parameter, \n    // if I had put {headers} in the 2nd arg, then jbackend will NOT recog the headers bc it's looking for something in the 3rd arg\n    axios.put(URL_endpoint, null, {headers})\n    .then(response => {\n      // RACE CONDITION!  If another employee accepted it before you did, then current list wouldn't change\n      // need to compare the arrays of existing this.state.empShifts VS response.data... \n        // if same, then user did NOT actually get the shift\n        // if not, then user did successfully get the shift, plus save this new state\n        if (deepCompareTwoSchedArrayss(this.state.empShifts, response.data)) {\n          toast.error(\"UH OH! Shift was just taken by someone else 😕\");\n        } else {\n          // api sending back current list of emp's shifts\n          toast.success(\"The shift is yours! Huzzah! 🥳\")\n          this.setState({ empShifts: response.data })\n        }\n        \n        // need to update state unstaffedShifts[] either way, b/c now that shift is no longer unavailable\n        this.updateLatestUnstaffedShifts();\n    })\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  updateLatestUnstaffedShifts = () => { \n    const headers = makeHeader();\n    axios.get(this.state.EMP_DASH+\"/unstaffedShifts\", {headers})\n    .then( response => this.setState({ unstaffedShifts: response.data}))\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n  \n  updateInfo = (newEmpInfo) => {\n    this.setState({ empInfo: newEmpInfo });\n  }\n  ////////////////////// render //////////////////////\n  render() {\n\n      if (this.props.authenticatedRole !== \"EMPLOYEE\") {\n        return <ErrorGeneral message=\"Please log in to see EMPLOYEE dashboard\" icon=\"lock\"/>\n      }\n\n      return (\n        <section>\n\n        <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\">\n            <Navbar.Brand onClick={()=>this.setShowCategory('calendar')}>CALENDAR</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={()=>this.setShowCategory('shifts')}>SHIFTS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('unavails')}>UNAVAILABLE DAYS</Nav.Link>\n              <Nav.Link onClick={()=>this.setShowCategory('info')}>INFO</Nav.Link>\n            </Nav>\n        </Navbar>\n\n        {this.showChosenCategory()}\n\n        </section>\n      );\n    }\n}\n\n","export default __webpack_public_path__ + \"static/media/hourglass.69414f46.svg\";","export default __webpack_public_path__ + \"static/media/thumbsUp.919eb166.svg\";","export default __webpack_public_path__ + \"static/media/twopeopleinteract.41f706aa.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hourglass from '../images/hourglass.svg';\nimport thumbsUp from '../images/thumbsUp.svg';\nimport twoPeopleInteract from '../images/twopeopleinteract.svg';\n\nfunction MessageComponent({ icon, message }) {\n\n  const showSpecificIcon = () => {\n    if (icon === \"hourglass\") {\n      return <img src={hourglass} alt=\"hourglass\" className=\"homepage-logo\"/>\n    } else if (icon === \"thumbsUp\") {\n      return <img src={thumbsUp} alt=\"thumbs up\" className=\"homepage-logo\"/>\n    } else {\n      return <img src={twoPeopleInteract} alt=\"2 people interacting\" className=\"homepage-logo\"/>\n    }\n  }\n\n  return (\n    <section>\n      <h1 className=\"text-centered\">{message}</h1>\n      {showSpecificIcon()}\n    </section>\n  );\n}\n\nexport default MessageComponent;\n\nMessageComponent.propTypes = {\n  icon: PropTypes.string,\n};","import React, { useState } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport ErrorGeneral from './ErrorGeneral';\nimport MessageComponent from './MessageComponent';\nimport { formatTime, makeHeader } from './Helpers';\nimport { toast } from 'react-toastify';\n\nexport default function LinkTextedToEmployee({match}) {\n  const URL_ENDPOINT = `${process.env.REACT_APP_TEXTED_LINK}/${match.params.uuid}`;\n\n  const [shiftOrMsg, setShiftOrMsg] = useState(\"LOADING\");\n\n  const headers = makeHeader();\n\n  const getFromDb = () => {\n    // if shift is still available, response from backend will be the shift obj, otherwise null\n    axios.get(URL_ENDPOINT, {headers})\n      .then(response => setShiftOrMsg(response.data))\n      \n  }\n\n  const acceptShift = () => {\n    // send API call to backend to accept shift\n    // response from backend will be a boolean, as to whether user really got the shift, or if someone else beat them to it\n    axios.post(URL_ENDPOINT, {headers})\n    .then(response => setShiftOrMsg(response.data))\n    .catch(error => toast.error(`ERROR: ${error.message}`));\n  }\n\n  ///////////////////////// render //////////////////////////\n\n  if (shiftOrMsg === \"LOADING\") {\n    getFromDb();\n    return <MessageComponent message=\"Loading...\" icon=\"hourglass\"/>;\n\n  } else if (shiftOrMsg === null || shiftOrMsg === false) {\n    // you'll see this if... 1. clicked on link after shift is taken.\n    // 2. clicked on link before shift is taken, but clicked confirm after someone else did. \n    // 3. if you typed in base-url/text/{bogus-uuid-here}\n    return <ErrorGeneral message=\"Sorry, shift is taken\" icon=\"stopwatch\"/>;\n  \n  } else if (shiftOrMsg === true) {\n    return <MessageComponent message=\"YAY YOU GOT IT!\" icon=\"thumbsUp\"/>;\n\n  } else {\n    // there's a real shift in the state, not just a msg placeholder\n    const shift = shiftOrMsg;\n\n    return (\n      <section className=\"homepage-section\">\n        <h1 className=\"text-centered\">Please Confirm Below</h1>\n        <section className=\"card-shift lightblue-bg\">\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{formatTime(shift.start_time)}</p>\n          <p>END</p>\n          <p>{formatTime(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client\">\n          <p>CLIENT</p>\n          <p>{shift.client.name}</p>\n          <p>PHONE</p>\n          <p>{shift.client.phone}</p>\n          <p>EMAIL</p>\n          <p>{shift.client.email}</p>\n          <p>ADDRESS</p>\n          <p>{shift.client.address}</p>\n        </section>\n\n        <section className=\"text-centered\">\n          <button onClick={acceptShift} className=\"btn btn-primary\">YES, I WANT THIS SHIFT!</button>\n          <li className=\"fine-print\">This shift will appear on your employee dashboard after you accept.</li>\n          <li className=\"fine-print\">Close this window if you want to cancel.</li>\n          <li className=\"fine-print\">Or login above to access your dashboard for other options.</li>\n        </section>\n        \n      </section>\n    );\n  }\n}\n\nLinkTextedToEmployee.propTypes = {\n  match: PropTypes.object,\n};","export default __webpack_public_path__ + \"static/media/twopeople.ca8b00f5.svg\";","import React from 'react';\nimport twoPeople from '../images/twopeople.svg';\n\nexport default function Homepage() {\n\n  return (\n    <section className=\"homepage-section text-centered\">\n      <img src={twoPeople} alt=\"2 people\" className=\"homepage-logo\"/>\n    </section>\n  );\n  \n}\n","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { makeHeader } from './components/Helpers';\nimport LoginBanner from './components/LoginBanner';\nimport Footer from './components/Footer';\nimport AdminDash from './components/AdminDash';\nimport EmployeeDash from './components/EmployeeDash';\nimport LinkTextedToEmployee from './components/Employee_TextedLink';\n\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport Homepage from './components/Homepage';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      authenticatedRole: \"\",       \n      // googleId: \"\",\n      // username: \"\",\n      // databaseId: \"\"\n    }\n    sessionStorage.setItem('authenticatedRole', '');   \n    sessionStorage.setItem('googleId', '');\n    sessionStorage.setItem('googleAccessToken', '');\n    sessionStorage.setItem('username', '');    \n    sessionStorage.setItem('databaseId', '');\n  }\n\n  login = () => {\n    const googleId = sessionStorage.getItem('googleId');\n    const googleAccessToken = sessionStorage.getItem('googleAccessToken');\n\n    const loginParams = { \"googleId\": googleId, \"googleAccessToken\": googleAccessToken, \"uuid\": \"\"}\n    const headers = makeHeader();\n    const endpoint = process.env.REACT_APP_LOGIN;\n\n    axios.post(endpoint, loginParams, {headers})\n      .then(response => {\n        if (Object.entries(response.data).length === 0) {\n          sessionStorage.setItem('authenticatedRole', \"NEED UUID\");\n          this.setState({ authenticatedRole: \"NEED UUID\" });\n        }\n        const authenticatedRoleDB = Object.keys(response.data)[0];\n        const usernameDB = Object.values(response.data)[0].name;\n        const databaseId = Object.values(response.data)[0].id;\n\n        sessionStorage.setItem('authenticatedRole', authenticatedRoleDB);\n        sessionStorage.setItem('username', usernameDB);\n        sessionStorage.setItem('databaseId', databaseId);\n\n        this.setState({\n          authenticatedRole: authenticatedRoleDB,\n          googleId: googleId,\n          username: usernameDB,\n          databaseId: databaseId      \n        })\n\n        this.greetToast(usernameDB);\n        \n      })\n      .catch(error => {\n        if (sessionStorage.getItem('authenticatedRole') !== \"NEED UUID\") {\n          toast.error(`LOGIN ERROR! ${error.message}`);\n        }\n      });\n  }\n\n  demoLogin = (demoRole) => {\n    let usernameDB = \"demoUser\";\n    let googleId = \"demoGoogleId\";\n    let databaseId = \"demoDatabaseId\";\n\n    sessionStorage.setItem('authenticatedRole', demoRole);\n    sessionStorage.setItem('username', usernameDB);\n    sessionStorage.setItem('databaseId', databaseId);\n\n    this.setState({\n      authenticatedRole: demoRole,\n      googleId: googleId,\n      username: usernameDB,\n      databaseId: databaseId      \n    })\n\n    this.greetToast(usernameDB, `You're logged in with role of ${demoRole}`);\n  }\n\n  greetToast = (usernameDB, optionalExtraMsg = null) => {\n    const hourNow = (new Date()).getHours();\n    let greetingBasedOnHour;\n    if (hourNow < 12) {\n      greetingBasedOnHour = \"Good morning\";\n    } else if (hourNow < 17) {\n      greetingBasedOnHour = \"Good afternoon\";\n    } else {\n      greetingBasedOnHour = \"Good evening\";\n    }\n    console.log(`... ${optionalExtraMsg}`)\n    if (optionalExtraMsg) {\n      toast.success(`${greetingBasedOnHour}, ${usernameDB} 😄  ${optionalExtraMsg}`);\n    } else {\n      toast.success(`${greetingBasedOnHour}, ${usernameDB} 😄`);\n    }\n  }\n\n  logout = () => {\n    this.setState({\n      authenticatedRole: \"\",  \n      googleId: \"\",\n      username: \"\",\n      databaseId: \"\"\n    })\n    toast.success(`Goodbye ${sessionStorage.getItem('username')} 👋`);\n\n    sessionStorage.clear();\n  }\n\n  render() {\n    const role = this.state.authenticatedRole;\n    const username = this.state.username;\n    const googleId = this.state.googleId;\n    const databaseId = this.state.databaseId;\n\n    return (\n      \n      <Router>\n        <LoginBanner authenticatedRole={this.state.authenticatedRole} googleAuthCallback={this.login} demoLoginCallback={this.demoLogin} logoutCallback={this.logout}/>\n        \n        {role === \"ADMIN\" ? (<Redirect to=\"/adminDash\" component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />): null}\n        {role === \"EMPLOYEE\" ? (<Redirect to=\"/employeeDash\" component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />): null}\n  \n          <Switch>   \n            {/* Displays only 1 of these components based on on what the URL is */}\n            <Route path=\"/\" exact component={Homepage}/>    \n            <Route path=\"/adminDash\" component={() => <AdminDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />\n            <Route path=\"/employeeDash\" exact component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />\n            \n            {/* This route is for users coming from the link admin texted them, so they can take a specific avail shift */}\n            <Route path=\"/text/:uuid\"  component={LinkTextedToEmployee} />\n\n          </Switch>\n\n          <Footer />\n          <ToastContainer />\n      </Router>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}