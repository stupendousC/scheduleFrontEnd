{"version":3,"sources":["LoginBanner.js","components/Footer.js","components/AdminDash_CalendarDay.js","components/Helpers.js","components/AdminDash_NewShift.js","components/AdminDash_CalendarTab.js","components/AdminDash_ShiftsTable.js","components/AdminDash_PeopleTable.js","components/LoginError.js","components/AdminDash.js","components/EmployeeDash_CalendarDay.js","components/EmployeeDash_UnavailDays.js","components/EmployeeDash_ShiftsTable.js","components/EmployeeDash.js","components/Employee_TextedLink.js","components/Homepage.js","App.js","serviceWorker.js","index.js","images/redCrossFlag.svg","images/SPPbanner2.png","images/blackLock.svg","images/twopeople.svg"],"names":["LoginBanner","responseGoogle","response","props","googleAuthCB","profileObj","googleId","showBothLogins","className","clientId","process","REACT_APP_GOOGLE_CLIENT_ID","buttonText","onSuccess","onFailure","cookiePolicy","showDashWithLogout","authenticatedRole","name","sessionStorage","getItem","to","onClick","logout","console","log","logoutCB","src","bannerLogo","alt","this","React","Component","Homepage","redCrossFlag","href","target","rel","CalendarDay","basicShiftsInfo","dateStr","length","map","shift","key","id","shift_date","client","employee","convertToPST","timeStr","newTime","Date","convertDateString","timeObj","year","getFullYear","month","getMonth","day","getDate","toString","getWeekday","timeStr_or_timeObj","weekdayArray","Array","getDay","convertTimeString","hours","parseInt","slice","formatDate","arg_date","date","toLocaleString","getUTCDate","sortUnavailsByDate","listOfUnavails","sort","a","b","day_off","sortShiftsByDate","listOfShifts","dateInThePast","isPhoneValid","phoneStr","canStringBeInteger","areaCode","phone3","phone4","areStringsInListAllIntegers","firstDigit","str","list_of_strings","NewShift","daySpotlight","allClients","updateAllShiftsCallback","textEmployeesCallback","ALL_SHIFTS","REACT_APP_ALL_SHIFTS","useState","setClientId","startTime","setStartTime","endTime","setEndTime","isFormValid","onTimeChange","e","value","onSubmit","preventDefault","clientObj","find","jsonForNewShiftAPI","newShift","axios","post","then","data","catch","error","message","onChange","defaultValue","type","rowsOfMsgs","errorMsgs","push","genErrorMsgs","msg","i","showErrorMsgs","disabled","CalendarTab","allShifts","allEmployees","allUnavails","today","setDaySpotlight","shiftsOfDay","setShiftsOfDay","availEmpsOfDay","setAvailEmpsOfDay","getAndSetShiftsOfDay","targetDateStr","getAndSetAvailEmpsByDate","URL_getAllAvailEmpsByDate","REACT_APP_GET_AVAIL_EMPS_FOR_DAY","get","showRowsOfEmps","emp","phone","Accordion","Toggle","eventKey","Collapse","ShiftsTable","showEmpNameOrButton","showWholeShiftCard","start_time","end_time","email","address","showEmpInCard","showAvailEmpsInCard","stillLoading","state","availEmployeesByShiftId","availEmpList","empList","from","numEmps","rowsOfEmps","allUnstaffedShifts","filter","axiosGetFcns","unstaffedShift","URL","REACT_APP_GET_AVAIL_EMPS_FOR_SHIFT","all","spread","responses","shiftId","setState","errors","PeopleTable","peopleList","URL_endpoint","setStateKey","updatePeopleListCB","personSpotlight","setPersonSpotlight","showPersonSpotlight","person","oauthid","toggleAsPersonSpotlight","selectedPerson","read","update","deactivate","delete","updatedPeopleList","p","showAll","LoginError","blackLock","ALL_EMPS","REACT_APP_ALL_EMPS","ALL_CLIENTS","REACT_APP_ALL_CLIENTS","ALL_ADMINS","REACT_APP_ALL_ADMINS","ALL_UNAVAILS","SEND_TEXT","REACT_APP_TEXT_EMPS","AdminDash","getAllEmpsDB","getAllClientsDB","getAllAdminsDB","getAllShiftsDB","getAllUnavailsDB","setShowCategory","chosen","show","showChosenCategory","showCalendar","showAllAdmins","showAllEmployees","showAllClients","showAllShifts","updateAllShifts","textEmployees","updatePeopleList","allAdmins","sortedShifts","shiftObj","textableEmployees","allAxiosPostReqs","personalizedMsg","jsonForTextAPI","eachText","username","allShiftsSorted","shiftsToday","shiftsOfDaySpotlight","availStatus","toggleAvailCallback","showShifts","shiftsInArray","inThePast","showAgendaOrOptions","UnavailDays","sortedUnavails","freeToWorkCallback","unavail","EmployeeDash_ShiftsTable","sortedOwnShifts","sortedUnstaffedShifts","takeShiftCallback","ownActiveShifts","ownPastShifts","cloneAllOwnShifts","showOwnShifts","customClassName","showUnstaffedShifts","takeButton","showTakeShiftSection","bookedElsewhere","possibleDate","isEmpBookedElsewhere","offThatDay","isEmpOffThatDay","removeUnavail","unavailObj","EmployeeDash","getEmpInfo","EMP_DASH","getEmpShifts","getEmpUnavails","getUnstaffedShifts","showAllUnavails","showAllInfo","info","empInfo","placeholder","empShifts","empUnavails","unstaffedShifts","unstaffed","ownShift","freeToWork","takeShift","updateStateForCalendarDay","toggleAvail","availStatusOfDay","canWorkBool","canTheyWorkThisDay","shiftsOfThatDay","unavails_list","availBoolean","latestEmpUnavails","put","updateLatestUnstaffedShifts","REACT_APP_EMP_DASH","LinkTextedToEmployee","match","params","uuid","sessionRole","twoPeople","App","login","endpoint","REACT_APP_LOGIN","Object","entries","setItem","authenticatedRoleDB","keys","usernameDB","values","databaseId","clear","role","component","path","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.407f71b3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport bannerLogo from './images/SPPbanner2.png';\nimport GoogleLogin from 'react-google-login';\n\nimport {Link} from 'react-router-dom';\n\nclass LoginBanner extends React.Component {\n  \n  ////////////////////// LOGIN //////////////////////\n  responseGoogle = (response) => {\n    // send info up to App.js     \n    this.props.googleAuthCB(response.profileObj.googleId);\n  }\n\n  showBothLogins = () => {\n    return (\n      <section className=\"btn btn-google\">\n        <GoogleLogin\n          clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n          buttonText=\"LOGIN WITH GOOGLE\"\n          onSuccess={this.responseGoogle}\n          onFailure={this.responseGoogle}\n          cookiePolicy={'single_host_origin'}\n        />\n      </section>\n    );\n  }\n\n\n  ////////////////////// DASHBOARD BUTTONS //////////////////////\n  showDashWithLogout = () => {\n    const authenticatedRole = this.props.authenticatedRole;\n    const name = sessionStorage.getItem(\"username\");\n\n    if (authenticatedRole === \"ADMIN\") {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-success dashboard-buttons\"><Link to=\"/adminDash\">{name}'s Dashboard</Link></button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={this.logout}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    } else if (authenticatedRole === \"EMPLOYEE\") {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-success dashboard-buttons\"><Link to=\"/employeeDash\">{name}'s Dashboard</Link></button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={this.logout}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    } else {\n      return (\n        <section className=\"dashboard-buttons_container\">\n          <button className=\"btn btn-warning dashboard-buttons\">First time logging in?  Click to activate account with UUID (upcoming feature)</button>\n          <button className=\"btn btn-danger dashboard-buttons\" onClick={this.logout}><Link to=\"/\">LOGOUT</Link></button>\n        </section>\n      );\n    }\n  }\n\n\n  \n  ////////////////////// LOGOUT //////////////////////\n  logout = () => {\n    console.log(\"TODO: ALERT, you've successfully logged out\");\n    console.log(\"ALSO AUTO-REDIRECT BACK TO HOMEPAGE!!\");\n    this.props.logoutCB();\n  }\n\n////////////////////// RENDER //////////////////////\n  render() {\n\n    return(\n      <section className=\"loginBanner-section text-centered\">\n        <Link to=\"/\"><img src={bannerLogo} alt=\"sppBannerLogo\" className=\"img-90\"/></Link>\n        {this.props.authenticatedRole? this.showDashWithLogout():this.showBothLogins()}\n      </section>\n    );\n  }\n    \n}\n\nexport default LoginBanner;\n","import React from 'react';\nimport redCrossFlag from '../images/redCrossFlag.svg';\n// import logo from '../images/SPPicon.png';\n\nexport default function Homepage() {\n\n  return (\n    <section className=\"footer\">\n      <img src={redCrossFlag} alt=\"redCrossFlag\" className=\"img-5\"/>\n      <a href=\"https://github.com/stupendousC\" target=\"_blank\" rel=\"noopener noreferrer\"> Made by: Caroline Wu </a>\n      <img src={redCrossFlag} alt=\"redCrossFlag\" className=\"img-5\"/>\n    </section>\n  );\n}","import React from 'react';\n\nconst CalendarDay = ({basicShiftsInfo, dateStr}) => {\n  // const [findEmployeesClicked, setFindEmployeesClicked] = useState(false);\n  // console.log(\"CalendarDay showing\", dateStr, \"\\nbasicShiftsInfo = \", basicShiftsInfo);\n\n  const showShifts = () => {\n    return ( basicShiftsInfo.map (shift => {\n      return (\n        <section key={shift.id} className=\"section-3-col\"> \n          <section>{shift.shift_date}</section>\n          <section>{shift.client.name}</section>\n          <section>{shift.employee ? shift.employee.name:\"\"}</section>\n        </section>\n        );\n    }));\n  }\n\n\n  const showTableOrNothing = () => {\n    if (!basicShiftsInfo || basicShiftsInfo === [] || basicShiftsInfo.length === 0) {\n      return (\n        <h3>No shifts scheduled</h3>\n      );\n    } else {\n      return (\n        <section>\n          <section className=\"section-3-col\"> \n            <section>Date</section>\n            <section>Client</section>\n            <section>Employee</section>\n          </section>\n\n          <section>\n            {showShifts()}\n          </section>\n        </section>\n      );\n    }\n  }\n\n  return(\n    <section>\n      {showTableOrNothing()}\n    </section>\n  );\n  \n}\n\nexport default CalendarDay;\n\n","// import axios from 'axios';\n\nexport const convertToPST = (timeStr) => {\n  // UTC to PST conversion:\n  // takes a timeStr of 'YYYY-MM-DD' in UTC time and convert it to a timeStr in Pacific Standard Time\n  // PST is ahead of UTC by 8 hours, so this method will return the PST's actual timeStr, if the given arg timeStr falls in that 8 hr gap wacky zone\n  // Date('2020-1-1') returns UTC of 12/30 midnight, BOO!!!\n  // Date('2020-1-1 00:00-0800') returns correct 1/1, YES!!!\n  // obviously I\"m assuming the end user lives in PST...\n\n  const newStr = timeStr + \" 00:00-0800\";\n  const newTime = new Date(newStr);\n  return new Date(newTime);\n}\n\nexport const convertDateString = (timeObj) => {\n  const year = timeObj.getFullYear();\n  let month = timeObj.getMonth() + 1;\n  let day = timeObj.getDate();\n\n  if (month < 10) { month = \"0\" + month.toString() }\n  if (day < 10) { day = \"0\" + day.toString() }\n\n  return `${year}-${month}-${day}`;\n}\n\nexport const getWeekday = (timeStr_or_timeObj) => {\n  // takes in either a timeStr like \"2020-02-28\" or a Date() object,\n  // returns an abbrev'd weekday string\n\n  let timeObj;\n  if (typeof(timeStr_or_timeObj) === \"string\") {\n    timeObj = convertToPST(timeStr_or_timeObj);\n  } else {\n    timeObj = timeStr_or_timeObj;\n  }\n  \n  let weekdayArray = new Array(7);\n  weekdayArray[0] = \"Sun\";\n  weekdayArray[1] = \"Mon\";\n  weekdayArray[2] = \"Tues\";\n  weekdayArray[3] = \"Wed\";\n  weekdayArray[4] = \"Thurs\";\n  weekdayArray[5] = \"Fri\";\n  weekdayArray[6] = \"Sat\";\n\n  return weekdayArray[timeObj.getDay()];\n}\n\nexport const convertTimeString = (timeStr) => {\n  // takes \"HH:MM:SS\" and turns it into \"HH:MM AM/PM\"\n  let hours = parseInt(timeStr.slice(0,2));\n  if (hours < 12) {\n    if (timeStr[0] === \"0\") {\n      return (timeStr.slice(1,5)+\" A.M.\");\n    } else {\n      return (timeStr.slice(0,5)+\" A.M.\");\n    }\n  } else {\n    hours -= 12;\n    return (hours+timeStr.slice(2,5)+\" P.M.\");\n  }\n}\n\nexport const formatDate = (arg_date) => {\n  const date = new Date(arg_date);\n  const month = date.toLocaleString('default', { month: 'short' });\n  const day = date.getUTCDate();\n  const year = date.getFullYear();\n\n  return `${month} ${day}, ${year}`\n}\n\nexport const sortUnavailsByDate = (listOfUnavails) => {\n  const sorted = listOfUnavails.sort((a,b) => {\n    return (b.day_off < a.day_off ? 1:-1);\n  });\n  return sorted;\n}\n\nexport const sortShiftsByDate = (listOfShifts) => {\n  const sorted = listOfShifts.sort((a,b) => {\n    return (b.shift_date <= a.shift_date ? 1:-1);\n  });\n  return sorted;\n}\n\nexport const dateInThePast = (dateStr) => {\n  const todayStr = convertDateString(new Date());\n  return todayStr > dateStr;\n}\n\nexport const isPhoneValid = (phoneStr) => {\n  // returns True if phoneStr fits any of these acceptable formats for Twilio texting: \n    // \"4251112222\"       // Length = 10\n    // \"14251112222\"      // Length = 11\n    // \"425-111-2222\"     // Length = 12\n    // \"(425)111-2222\"    // Length = 13\n    // \"1-425-111-2222\"   // Length = 14\n  // else returns False\n\n  if (!phoneStr) return false;\n  if (phoneStr.length < 10 || phoneStr.length > 14) return false;\n\n  if (phoneStr.length === 10 || phoneStr.length === 11) return canStringBeInteger(phoneStr);\n  \n  if (phoneStr.length === 12) {\n    // check the non-numerical parts\n    if ((phoneStr[3] !== \"-\") || (phoneStr[7] !== \"-\")) return false;\n\n    // check the number parts\n    const areaCode = phoneStr.slice(0,3);\n    const phone3 = phoneStr.slice(4,7);\n    const phone4 = phoneStr.slice(8,12);\n    const areNumberPartsOK = areStringsInListAllIntegers([areaCode, phone3, phone4]);\n    return areNumberPartsOK;\n  }\n\n  if (phoneStr.length === 13) {\n    // check the non-numerical parts\n    if (phoneStr[0] !== \"(\") return false;\n    if (phoneStr[4] !== \")\") return false;\n    if (phoneStr[8] !== \"-\") return false;\n\n    // check the number parts\n    const areaCode = phoneStr.slice(1,4);\n    const phone3 = phoneStr.slice(5,9);\n    const phone4 = phoneStr.slice(9,13);\n    const areNumberPartsOK = areStringsInListAllIntegers([areaCode, phone3, phone4]);\n    return areNumberPartsOK;\n  }\n\n  if (phoneStr.length === 14) {\n    // check the non-numerical parts\n    if ((phoneStr[1] !== \"-\") || (phoneStr[5] !== \"-\") || (phoneStr[9] !== \"-\")) return false;\n\n    // check the number parts\n    const firstDigit = phoneStr[0];\n    const areaCode = phoneStr.slice(2,5);\n    const phone3 = phoneStr.slice(6,9);\n    const phone4 = phoneStr.slice(10,14);\n    const areNumberPartsOK = areStringsInListAllIntegers([firstDigit, areaCode, phone3, phone4]);\n    return areNumberPartsOK;\n  }\n}\n\n// for use by isPhoneValid()\nconst canStringBeInteger = (str) => {\n  const asInt = parseInt(str);\n  const backToStr = asInt.toString();\n  return((str === backToStr) ? true:false);\n}\n\n// for use by isPhoneValid()\nconst areStringsInListAllIntegers = (list_of_strings) => {\n  for (const str of list_of_strings) {\n    if (!canStringBeInteger(str)) return false\n  }\n  // if nobody in the list fails, then they all pass\n  return true;\n}","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { formatDate, dateInThePast } from './Helpers';\n\n\nconst NewShift = ({daySpotlight, allClients, updateAllShiftsCallback, textEmployeesCallback}) => {\n  // need for sending POST request to backend\n  const ALL_SHIFTS = process.env.REACT_APP_ALL_SHIFTS;\n\n  // these are for <form> use\n  const [clientId, setClientId] = useState(null);\n  const defaultStartTime = \"09:00:00\";\n  const defaultEndTime = \"17:00:00\";\n  const [startTime, setStartTime] = useState(defaultStartTime);\n  const [endTime, setEndTime] = useState(defaultEndTime);\n\n  const isFormValid = () => {\n    if (dateInThePast(daySpotlight) || !clientId || (endTime < startTime)) {\n      return (false);\n    } else {\n      return (true);\n    }\n  }\n\n  const genErrorMsgs = () => {\n      // evaluate all form inputs and save invalid reasons in errorMsgs\n      let errorMsgs = [];\n\n      if (dateInThePast(daySpotlight)) {\n        errorMsgs.push(\"Date cannot be in the past\");\n      }\n      if (!clientId) {\n        errorMsgs.push(\"Please select a client before submitting form\");\n      }\n      if (endTime < startTime) {\n        errorMsgs.push(\"Start time must be before end time\");\n      }\n\n      return errorMsgs;\n  }\n\n  const onClientChange = (e) => {\n    if (e.target.value === \"-- Select --\") {\n      setClientId(null);\n    } else {\n      setClientId(parseInt(e.target.value));\n    }\n  }\n\n  const onTimeChange = (e) => {\n    if (e.target.id === \"startTime\") { \n      setStartTime(e.target.value) \n    } else if (e.target.id === \"endTime\") {\n      setEndTime(e.target.value);\n    }\n  }\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n\n    console.log(\"Which button did u click on?\", e.target.value);\n\n    // find clientObj so backend doesn't have to\n    const clientObj = allClients.find( client => {\n      return (client.id === clientId);\n    });\n\n    const jsonForNewShiftAPI = {\n      \"shift_date\": daySpotlight,\n      \"start_time\": startTime,\n      \"end_time\": endTime,\n      \"client\": clientObj,  \n      \"client_id\": clientId\n    }\n\n    let newShift = null;\n\n    // send new shift to backend, to add to db\n      // employees also can see the new shift when they login to their own dashboard\n    axios.post(ALL_SHIFTS, jsonForNewShiftAPI )\n    .then(response => {\n      newShift = response.data;\n      console.log(\"newShift =\", newShift);\n      \n      // send callback back up to <CalendarTab> which will pass up to <AdminDash> for new API call\n      // which gets latest allShifts from backend db, and re-render everything\n      updateAllShiftsCallback();\n\n      // send text to temployees who have non-null phone numbers\n      textEmployeesCallback(newShift);\n      })\n    .catch(error => console.log(error.message));\n  }\n  \n  const showDateHeader = () => {\n    if (dateInThePast(daySpotlight)) {\n      return (<h1 className=\"gray-bg text-centered\">{formatDate(daySpotlight)}</h1>);\n    } else {\n      return (<h1 className=\"text-centered\">{formatDate(daySpotlight)}</h1>);\n    } \n  }\n\n  const showErrorMsgs = () => {\n    const errorMsgs = genErrorMsgs();\n      const rowsOfMsgs = errorMsgs.map( (msg,i) => {\n        return (\n          <li key={i}>{msg}</li>\n        );\n      });\n\n      return (\n        <ul>{rowsOfMsgs}</ul>\n      );\n    \n  }\n\n  //////////////////// render ///////////////////\n\n  return(\n    <section className=\"newShift-component\"> \n      {showDateHeader()}\n      \n        <form onSubmit={onFormSubmit} className=\"px-4 py-3\">\n\n          {/* Decided to disable this for now, looks prettier when user clicks on the calendar\n          IF I decide to enable this section, will need a setDaySpotlightCallback to send back to <AdminDash> so the calendar highted tile will match user input\n          <section className=\"form-group\">\n            <label>Date</label>\n            <input className=\"form-control\" value={daySpotlight} />\n          </section> */}\n\n          <section className=\"form-group\">\n\n            <label>Client</label>\n            <select className=\"form-control\" onChange={onClientChange}>\n              <option defaultValue>-- Select --</option>\n              {allClients.map(client => <option key={client.id} value={client.id}>{client.name}</option>)}\n            </select>\n\n            <label>Start time</label>\n            <input id=\"startTime\" onChange={onTimeChange} className=\"form-control\" type=\"time\" defaultValue={defaultStartTime}></input>\n            \n            <label>End time</label>\n            <input id=\"endTime\" onChange={onTimeChange} className=\"form-control\" type=\"time\" defaultValue={defaultEndTime}></input>\n          \n          </section>\n          \n          {isFormValid() ? null: showErrorMsgs()}\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"MAKE NEW SHIFT & NOTIFY ALL THOSE AVAILABLE\" disabled={!isFormValid()}/>\n          <li className=\"fine-print\">New shift will be visible on employee dashboards, open on a first-come-first-served basis</li>\n          <li className=\"fine-print\">Texts will also be sent to all those available, with valid phone numbers in their record</li>\n        </form>\n\n    </section>\n  );\n}\n\nexport default NewShift;\n\n\n","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport Accordion from 'react-bootstrap/Accordion';\nimport Calendar from 'react-calendar';\nimport CalendarDay from './AdminDash_CalendarDay';\nimport NewShift from './AdminDash_NewShift';\n\nimport { convertToPST, formatDate, convertDateString } from './Helpers';\n\n\nconst CalendarTab = ({allShifts, allClients, allEmployees, allUnavails, updateAllShiftsCallback, textEmployeesCallback}) => {\n  const today = convertDateString(new Date());\n  const [daySpotlight, setDaySpotlight] = useState(today);\n  const [shiftsOfDay, setShiftsOfDay] = useState(\"LOADING\");\n  const [availEmpsOfDay, setAvailEmpsOfDay] = useState(\"LOADING\");\n\n  // console.log(\"\\n\\n\\nCalendarTab props: allShifts = \", allShifts, \"\\nallEmployees = \", allEmployees, \"\\nallUnavails = \", allUnavails, \"\\nallClients = \", allClients);\n  \n  const updateStateForCalendarDay = (e) => {\n    const dateStr = convertDateString(e);\n    console.log(\"\\n\\nsetting: daySpotlight = \", dateStr);\n    \n    getAndSetShiftsOfDay(dateStr);\n    getAndSetAvailEmpsByDate(dateStr);\n    setDaySpotlight(dateStr);\n  }\n\n  const getAndSetShiftsOfDay = (targetDateStr) => {\n    let shiftsOfDay = [];\n    for (const shift of allShifts) {\n      if (shift.shift_date === targetDateStr ) { \n        shiftsOfDay.push(shift); \n      } else if (shift.shift_date > targetDateStr) {\n        break;\n      }\n    }\n    console.log(targetDateStr, \"setting shiftsOfDay =\", shiftsOfDay);\n    setShiftsOfDay(shiftsOfDay);\n  }\n\n  const getAndSetAvailEmpsByDate = (targetDateStr) => {\n    const URL_getAllAvailEmpsByDate = process.env.REACT_APP_GET_AVAIL_EMPS_FOR_DAY + `/${targetDateStr}`;\n    \n    // console.log(\"SENDING API TO\", URL_getAllAvailEmpsByDate);\n\n    axios.get(URL_getAllAvailEmpsByDate)\n    .then(response => {\n      // console.log(\"backend sent us... \", response.data);\n      setAvailEmpsOfDay(response.data);\n    })\n    .catch(error => console.log(error.message));\n  }\n\n  const showAvailEmpsInCard = () => {\n    // console.log(\"availEmpsOfDay = \", availEmpsOfDay);\n\n    if (availEmpsOfDay === \"LOADING\") {\n      return (<section>Loading...</section>)\n    } else if (availEmpsOfDay === []) {\n      return (<section>No one is available!</section>);\n    } else {\n      return (\n      <section>\n        {showRowsOfEmps()}\n      </section>\n    );\n    }\n  }\n\n  const showRowsOfEmps = () => availEmpsOfDay.map(emp => {\n      return(\n        <section key={emp.id} className=\"section-2-col\">\n          <section>{emp.name}</section>\n          <section>{emp.phone}</section>\n        </section>\n      );\n    })\n\n  //////////////////// callback fcns ////////////////////\n  const prepForTextEmployeesCallback = (newShift) => {\n    // <NewShift> is sending this back, which we'll need to add the availEmpsOfDay into the args before sending back up to AdminDash\n    textEmployeesCallback(newShift, availEmpsOfDay);\n  }\n\n  //////////////////// prep initial state ////////////////////\n  if (shiftsOfDay === \"LOADING\") { getAndSetShiftsOfDay(daySpotlight) }\n\n  if (availEmpsOfDay === \"LOADING\") { getAndSetAvailEmpsByDate(daySpotlight) }\n\n  if (shiftsOfDay === \"LOADING\" && availEmpsOfDay === \"LOADING\") {\n    return (<section>LOADING</section>);\n  }\n  \n  //////////////////// render ////////////////////\n    return(\n      \n      <section>\n      <Calendar onChange={updateStateForCalendarDay} value={convertToPST(daySpotlight)}/>\n      {/* <NewShift /> and <CalendarDay /> will change based on which day you click on in the <Calendar> */}\n\n      <Accordion>\n          <Accordion.Toggle eventKey=\"newShift\" className=\"accordion-toggle_button\">\n            <section>\n              <section>▼ MAKE A NEW SHIFT</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"newShift\">\n          <NewShift daySpotlight={daySpotlight} allClients={allClients} updateAllShiftsCallback={updateAllShiftsCallback} textEmployeesCallback={prepForTextEmployeesCallback} /> \n          </Accordion.Collapse>\n      </Accordion>\n      \n      <Accordion>\n        <Accordion.Toggle eventKey=\"availEmpList\" className=\"accordion-toggle_button\">\n          <section>\n            <section>▼ {availEmpsOfDay === \"LOADING\" ? \"Loading\":availEmpsOfDay.length} AVAILABLE EMPLOYEES FOR {formatDate(daySpotlight)}</section>\n          </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"availEmpList\">\n          {/* send API call to backend to get all avail emps for the daySpotlight */}\n          {showAvailEmpsInCard()}\n        </Accordion.Collapse>\n      </Accordion>\n\n      <Accordion>\n        <Accordion.Toggle eventKey=\"dayAgenda\" className=\"accordion-toggle_button\">\n          <section>\n            <section>▼AGENDA FOR {formatDate(daySpotlight)}</section>\n          </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"dayAgenda\">\n          <CalendarDay basicShiftsInfo={shiftsOfDay} dateStr={daySpotlight} />\n        </Accordion.Collapse>\n      </Accordion>\n\n      {/* <Accordion>\n        <Accordion.Toggle eventKey=\"weekAgenda\" className=\"accordion-toggle_button\">\n          <section>\n            <section>▼AGENDA FOR THIS WEEK</section>\n          </section>\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey=\"weekAgenda\">\n          <h1>Upcoming feature, stay tuned...</h1>\n        </Accordion.Collapse>\n      </Accordion> */}\n    </section>\n    );\n  }\n\n\n\nexport default CalendarTab;\n","import React from 'react';\nimport axios from 'axios';\nimport Accordion from 'react-bootstrap/Accordion';\n\nimport { convertTimeString, formatDate } from './Helpers';\n\nclass ShiftsTable extends React.Component {\n  constructor() {\n    super()\n    // props allShifts comes pre-sorted by date\n    this.state = {\n      availEmployeesByShiftId: \"LOADING\"\n      // javascript weirdness abounds if I were to set initial state to null\n      // safer to set it to \"LOADING\" or a real hashmap of { shift_id: [arrayOfAvailEmps] }\n    }\n  }\n  \n  componentDidMount() {\n    // assemble list of availEmployees for all the unstaffed shifts\n    let availEmployeesByShiftId = {};\n\n    const allUnstaffedShifts = this.props.allShifts.filter (shift => !shift.employee );\n    const axiosGetFcns = allUnstaffedShifts.map( unstaffedShift => {\n      const URL = process.env.REACT_APP_GET_AVAIL_EMPS_FOR_SHIFT + `/${unstaffedShift.id}`;\n      return axios.get(URL);\n    })\n\n    axios.all(axiosGetFcns)\n    .then(axios.spread((...responses) => {\n      // console.log(\"backend sent:\", responses);\n\n      // match up responses to allUnstaffedShifts\n      for ( let i = 0; i < allUnstaffedShifts.length; i++) {\n        const shiftId = allUnstaffedShifts[i].id;\n        availEmployeesByShiftId[shiftId] = responses[i].data;\n      }\n\n      // setState\n      this.setState({\n        availEmployeesByShiftId: availEmployeesByShiftId\n      });\n      // console.log(\"this.state.availEmployeesByShiftId =\", availEmployeesByShiftId);\n    }))\n    .catch( errors => console.log(errors));\n  }\n\n  ////////////////////////// display //////////////////////////\n  showEmpNameOrButton = (shift) => {\n    if (shift.employee) {\n      return (shift.employee.name);\n    } else {\n      // the button really is just for show, \n      // clicking on the entire bar (inc the button) is what sends an API call to backend for the list of avail employees\n      return (<section className=\"fake-btn\">Find employees</section>);\n    }\n  }\n\n  showWholeShiftCard = (shift) => {\n    return (\n      <section>\n        <section className=\"card-shift blue-bg\">\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{convertTimeString(shift.start_time)}</p>\n          <p>END</p>\n          <p>{convertTimeString(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client\">\n          <p>CLIENT</p>\n          { shift.client ? <p>{shift.client.name}</p> : <p></p> }\n          <p>PHONE</p>\n          { shift.client ? <p>{shift.client.phone}</p> : <p></p> }\n          <p>EMAIL</p>\n          { shift.client ? <p>{shift.client.email}</p> : <p></p> }\n          <p>ADDRESS</p>\n          { shift.client ? <p>{shift.client.address}</p> : <p></p> }\n        </section>\n\n        {/* employee info section shows either: A. actual employee info if staffed. B. list of available employees for that shift */}\n        { shift.employee ? this.showEmpInCard(shift) : this.showAvailEmpsInCard(shift) }\n\n      </section>\n    );\n  }\n\n  // showWholeShiftCard() calls this if ... A. shift is staffed\n  showEmpInCard = (shift) => {\n    return (\n      <section className=\"card-employee blue-bg\">\n          <p>EMPLOYEE</p>\n          { shift.employee ? <p>{shift.employee.name}</p> : <p></p> }\n          <p>PHONE</p>\n          { shift.employee ? <p>{shift.employee.phone}</p> : <p></p> }\n          <p>EMAIL</p>\n          { shift.employee ? <p>{shift.employee.email}</p> : <p></p> }\n          <p>ADDRESS</p>\n          { shift.employee ? <p>{shift.employee.address}</p> : <p></p> }\n        </section>\n    );\n  }\n\n  // showWholeShiftCard() calls this if ... B. shift is unstaffed\n  showAvailEmpsInCard = (shift) => {\n    let stillLoading = true;\n    if (this.state.availEmployeesByShiftId !== \"LOADING\") { stillLoading = false; }\n    \n    if (stillLoading ) {\n      return (\n        <section className=\"card-employee blue-bg\">Loading...</section>\n      );\n\n    } else {\n      const availEmpList = this.state.availEmployeesByShiftId[shift.id];\n      // console.log(\"shift id\", shift.id, \"corresponds to \", availEmpList);\n      \n      if (!availEmpList) {\n        return (\n          // DO SOEMTHING SUPER SPECIAL FOR THIS EMERGENCY!!!  \n          <section className=\"card-employee red-bg\">NO EMPLOYEES AVAILABLE!</section>\n        );\n\n      } else {\n        const empList = Array.from(availEmpList);\n        const numEmps = empList.length;\n\n        return (\n          <section className=\"blue-bg\">\n          <button onClick={()=>{this.props.textEmployeesCallback(empList, shift)}} className=\"btn btn-primary\">TEXT ALL {numEmps} AVAILABLE EMPLOYEES</button>\n          {this.rowsOfEmps(empList)}\n          </section>\n        );\n      }\n    }\n  }\n\n  rowsOfEmps = (empList) => {\n      return empList.map( (emp, i) => {\n        return(\n          <section key={emp.id} className=\"card-employee blue-bg\">\n            <section>{emp.name}</section>\n            <section>{emp.phone}</section>\n          </section>\n        );\n      }) \n    }\n\n  ////////////////// render ////////////////////\n  render() {\n    if (this.props.allShifts.length === 0) {\n      return (\n        <section>No upcoming shifts</section>\n      );\n    } else if (this.state.stillLoading) {\n      return (<section>Loading...</section>);\n    } else {\n      return(\n        <section>\n          {this.props.allShifts.map(shift => {\n            return (\n              <Accordion key={shift.id}>\n                <section>\n                  <Accordion.Toggle eventKey=\"showInfo\" className=\"accordion-toggle_button\">\n                  {/* <Accordion.Toggle onClick={()=>{getAvailEmps(shift)}} eventKey=\"showInfo\" className=\"accordion-toggle_button\"> */}\n                    <section className=\"section-4-col\">\n                      <section>▼ #{shift.id}</section>\n                      <section>{formatDate(shift.shift_date)}</section>\n                      <section>{shift.client.name}</section>\n                      <section>{this.showEmpNameOrButton(shift)}</section>\n                    </section>\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey=\"showInfo\">\n                    <section>{this.showWholeShiftCard(shift)}</section>\n                  </Accordion.Collapse>\n\n                </section>\n              </Accordion>\n            )}\n          )}\n        </section>\n      );\n    }    \n    }\n}\n\nexport default ShiftsTable;\n\n\n","import React, { useState } from 'react';\nimport axios from 'axios';\n\n\n///////////////////// People can be either admins, employees, or clients /////////////////////\nconst PeopleTable = ({peopleList, URL_endpoint, setStateKey, updatePeopleListCB }) => {\n  const [personSpotlight, setPersonSpotlight] = useState(\"\");\n\n  const showAll = (peopleList, URL_endpoint) => {\n    return ( peopleList.map((person, i) => {\n      return (\n        <section key={i}>\n          <section className=\"peopleTable\">\n            <section>{person.name}</section>\n            <section><button onClick={() => read(i, peopleList)} className=\"btn btn-primary\">Info</button></section>\n            <section><button onClick={() => update(i, peopleList)} className=\"btn btn-warning\">Update</button></section>\n            <section><button onClick={() => deactivate(person, URL_endpoint)} className=\"btn btn-danger\">Deactivate</button></section>\n          </section>\n          <section>\n            {personSpotlight === person ? showPersonSpotlight(person):null}\n          </section>\n        </section>\n      )})\n    );\n  }\n\n  const showPersonSpotlight = (person) => {\n    return (\n      <ul>\n        <li>ID: {person.id}</li>\n        <li>OAuthId:{person.oauthid}</li>\n        <li>Name: {person.name}</li>\n        <li>Address: {person.address}</li>\n        <li>Phone: {person.phone}</li>\n        <li>Email: {person.email}</li>\n      </ul>\n    );\n  }\n  ////////////////////// read/update/deactivate //////////////////////\n  const toggleAsPersonSpotlight = (selectedPerson) => {\n    if (personSpotlight === selectedPerson) {\n      setPersonSpotlight(\"\");\n    } else {\n      setPersonSpotlight(selectedPerson);\n    }   \n  }\n\n  const read = (i, peopleList) => {\n    const selectedPerson = peopleList[i];\n    toggleAsPersonSpotlight(selectedPerson);\n  }\n\n  const update = (i, peopleList) => {\n    const selectedPerson = peopleList[i];\n    toggleAsPersonSpotlight(selectedPerson);\n    // TODO: add fields for input\n  }\n\n  const deactivate = (person, URL_endpoint) => {\n    console.log(\"deactivate\", person.name, \"from\", URL_endpoint, \"\\nMAYBE POP UP AN ALERT CONFIRMATION?\");\n    console.log(\"need to reopen shifts they alreay committed to!!!\");\n\n    setPersonSpotlight(\"\");\n    axios.delete(URL_endpoint + \"/\" + person.id)\n    .then(response => {\n      console.log(`deactivated ${person.name} from database`);\n      const updatedPeopleList = peopleList.filter( p => p !== person );\n      updatePeopleListCB(setStateKey, updatedPeopleList);\n\n      // console.log(updatedPeopleList, \"VS\", currPeopleList);\n      // setCurrPeopleList(updatedPeopleList);\n    })\n    .catch(error => console.log(\"ERROR:\", error.message));\n  }\n\n  //////////////////////////// render ////////////////////////////\n  return (\n    <section>\n      {showAll(peopleList, URL_endpoint)}\n    </section>\n  );\n\n}\n\n\nexport default PeopleTable;","import React from 'react';\nimport blackLock from '../images/blackLock.svg';\n\nexport default function LoginError(props) {\n\n  return (\n    <section>\n      <h1 className=\"text-centered\">{props.message}</h1>\n      <img src={blackLock} alt=\"blackLock\" className=\"homepage-logo\"/>\n    </section>\n  );\n}","import React from 'react';\nimport axios from 'axios';\nimport CalendarTab from './AdminDash_CalendarTab';\nimport ShiftsTable from './AdminDash_ShiftsTable';\nimport PeopleTable from './AdminDash_PeopleTable.js';\nimport {sortShiftsByDate, isPhoneValid, formatDate, convertTimeString} from './Helpers';\n\nimport LoginError from './LoginError';\n\nconst ALL_EMPS = process.env.REACT_APP_ALL_EMPS;\nconst ALL_CLIENTS = process.env.REACT_APP_ALL_CLIENTS;\nconst ALL_ADMINS = process.env.REACT_APP_ALL_ADMINS;\nconst ALL_SHIFTS = process.env.REACT_APP_ALL_SHIFTS;\nconst ALL_UNAVAILS = process.env.REACT_APP_ALL_EMPS;\nconst SEND_TEXT = process.env.REACT_APP_TEXT_EMPS;\n\nexport default class AdminDash extends React.Component {\n\n  constructor() {\n    super()\n    // const today = convertDateString(new Date())\n    this.state = {\n      allClients: [],\n      allAdmins: [],\n      allEmployees: [],\n      allShifts: [],\n      allUnavails: [],\n      \n      show: \"calendar\"\n    }\n  }\n\n  ////////////////////// loading db data //////////////////////\n  getAllEmpsDB = () => axios.get(ALL_EMPS);\n  getAllClientsDB = () => axios.get(ALL_CLIENTS);\n  getAllAdminsDB = () => axios.get(ALL_ADMINS);\n  getAllShiftsDB = () => axios.get(ALL_SHIFTS);\n  getAllUnavailsDB = () => axios.get(ALL_UNAVAILS);\n\n  componentDidMount() {\n    console.log(\"HELLO, name=\", this.props.username, \"role=\", this.props.authenticatedRole);\n\n    if (this.props.authenticatedRole !== \"ADMIN\") {\n      console.log(\"YOU ARE *NOT* AN ADMIN!\");\n      return;\n    }   \n\n    // initial loading of data fromd atabase\n    axios.all([\n      this.getAllEmpsDB(),\n      this.getAllClientsDB(),\n      this.getAllAdminsDB(),\n      this.getAllShiftsDB(),\n      this.getAllUnavailsDB()])\n    .then(axios.spread((...responses) => {\n      const allEmployees = responses[0].data;\n      const allClients = responses[1].data;\n      const allAdmins = responses[2].data;\n      const allShifts = responses[3].data;\n      const allUnavails = responses[4].data;\n\n      // sort allShifts by date\n      const allShiftsSorted = sortShiftsByDate(allShifts);\n\n      this.setState({\n        allEmployees: allEmployees,\n        allClients: allClients,\n        allAdmins: allAdmins,\n        allShifts: allShiftsSorted,\n        allUnavails: allUnavails\n      });\n    }))\n    .catch( errors => console.log(errors));\n  }\n\n  ////////////////////// set DISPLAY choice //////////////////////\n  setShowCategory = (chosen) => this.setState({show: chosen});\n\n  showChosenCategory = () => {\n    const chosen = this.state.show;\n    \n    if (chosen === \"calendar\") {\n      return this.showCalendar();\n    } else if (chosen === \"admin\") {\n      return this.showAllAdmins();\n    } else if (chosen === \"employees\") {\n      return this.showAllEmployees();\n    } else if (chosen === \"clients\") {\n      return this.showAllClients();\n    } else if (chosen === 'shifts') {\n      return this.showAllShifts();\n    }\n  }\n\n  ////////////////////// DISPLAY: calendar  //////////////////////\n  showCalendar = () => {\n    return <CalendarTab \n      allClients={this.state.allClients} \n      allShifts={this.state.allShifts} \n      allEmployees={this.state.allEmployees} \n      allUnavails={this.state.allUnavails} \n      updateAllShiftsCallback={this.updateAllShifts}\n      textEmployeesCallback={this.textEmployees}/>\n  }\n\n  ////////////////////// DISPLAY: Shifts  //////////////////////\n  showAllShifts = () => {\n    return <ShiftsTable allShifts={this.state.allShifts} textEmployeesCallback={this.textEmployees}/>\n  }\n\n  ////////////////////// DISPLAY: Employees/Clients/Admin //////////////////////\n  showAllEmployees = () => <PeopleTable peopleList={this.state.allEmployees} URL_endpoint={ALL_EMPS} setStateKey=\"allEmployees\" updatePeopleListCB={this.updatePeopleList}/>\n  showAllAdmins = () => <PeopleTable peopleList={this.state.allAdmins} URL_endpoint={ALL_ADMINS} setStateKey=\"allAdmins\" updatePeopleListCB={this.updatePeopleList}/>\n  showAllClients = () => <PeopleTable peopleList={this.state.allClients} URL_endpoint={ALL_CLIENTS} setStateKey=\"allClients\" updatePeopleListCB={this.updatePeopleList}/>\n\n  updatePeopleList = (setStateKey, updatedPeopleList) => {\n    // this is a callback function for <PeopleTable> to send back updated peopleList\n    // so we can .setState here to allow re-rendering of visuals\n    this.setState({ [setStateKey]: updatedPeopleList });\n  }\n  \n  ////////////////////// Callback fcns  //////////////////////\n  updateAllShifts = () => {\n    axios.get(ALL_SHIFTS)\n    .then( response => {\n      const sortedShifts = sortShiftsByDate(response.data);\n      this.setState({ allShifts: sortedShifts });\n    })\n    .catch(error => console.log(error.message));\n  }\n\n  textEmployees = (shiftObj, availEmpsOfDay) => {\n    // shiftObj may be a newly made shift, or existing one that's just not staffed yet\n    // availEmpsOfDay is a list of people who are 1. NOT already booked that day, and 2. NOT on in Unavails database\n      // if an employee wants that shift, they can still see it from their dashboard where they'll be told they wanted the day off\n      // and they can change their minds and accept the shift anyway.  They just won't get a text here, nobody wants a text on their day off.\n\n    // of the availEmpsOfDay, we can only text those with a valid AND verified phone number\n    // verify phone number via Twilio console https://www.twilio.com/console/phone-numbers/verified, employee will need to give me the code they received!\n    const textableEmployees = availEmpsOfDay.filter( emp => {\n      return isPhoneValid(emp.phone);\n    });    \n    \n    console.log(\"Out of those available, we can text...\", textableEmployees);\n\n    const jsonForTextAPI = (employee, shift) => {\n      // yes the indentation looks terrible here, but it's necessary otherwise the text msgs will ALSO have indents\n      const personalizedMsg = (`\n====================\nHello ${employee.name}!  \n          \nWe have a shift available:\n  Date: ${formatDate(shift.shift_date)}\n  Client: ${shift.client.name}\n  Time: ${convertTimeString(shift.start_time)} to ${convertTimeString(shift.end_time)}.  \n\nPlease click on [http://localhost:3000/text/12345] and respond with a \"YES\" or \"NO\", or log onto your employee dashboard to claim this shift.  \n\nThank you from the office of Schedule Plus Plus!\n====================`\n        );\n\n      return(\n        { \"phoneNumber\": employee.phone,\n          \"message\": personalizedMsg }\n      );\n    }\n\n    const allAxiosPostReqs = textableEmployees.map( employee => {\n      return (axios.post(SEND_TEXT, jsonForTextAPI(employee, shiftObj)));\n    })\n\n    // bundled all the individual post requests together,\n    // failed texts will not get in the way of successful texts\n    axios.all(allAxiosPostReqs)\n    .then(axios.spread((...responses) => {\n      for ( const eachText of responses ) {\n        console.log(\"back end says\", eachText.data);\n      }}))\n    .catch( errors => console.log(errors));\n  }\n\n  ////////////////////// render //////////////////////\n    render() {\n\n      return (\n        <section>\n\n          <ul className=\"nav nav-tabs\">\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('calendar')}>CALENDAR</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('shifts')}>SHIFTS</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('employees')}>EMPLOYEES</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('clients')}>CLIENTS</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('admin')}>ADMIN</button>\n            </li>\n          </ul>\n\n          {this.props.authenticatedRole === \"ADMIN\" ? this.showChosenCategory() : <LoginError message=\"Please log in to see ADMIN dashboard\"/>}  \n\n        </section>\n        \n      );\n    }\n}","import React from 'react';\nimport { convertDateString, formatDate } from './Helpers';\nimport Accordion from 'react-bootstrap/Accordion';\n\n\nconst CalendarDay = ({today, shiftsToday, shiftsOfDaySpotlight, dateStr, availStatus, toggleAvailCallback}) => {\n\n  const showShifts = (shiftsInArray) => {\n    // shiftsInArray can either be shiftsToday[] or shiftsOfDaySpotlight[]  \n    return ( shiftsInArray.map (shift => {\n      return (showWholeShiftCard(shift));\n    }));\n  }\n\n  const showWholeShiftCard = (shift) => {\n    return (\n      <section key={shift.id}>\n        <section className=\"card-shift blue-bg\" >\n          <p>DATE</p>\n          <p>{(shift.shift_date)}</p>\n          <p>START</p>\n          <p>{(shift.start_time)}</p>\n          <p>END</p>\n          <p>{(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client\">\n          <p>CLIENT</p>\n          { shift.client ? <p>{shift.client.name}</p> : <p></p> }\n          <p>PHONE</p>\n          { shift.client ? <p>{shift.client.phone}</p> : <p></p> }\n          <p>EMAIL</p>\n          { shift.client ? <p>{shift.client.email}</p> : <p></p> }\n          <p>ADDRESS</p>\n          { shift.client ? <p>{shift.client.address}</p> : <p></p> }\n        </section>\n\n      </section>\n    );\n  }\n\n  const showAgendaOrOptions = () => {\n\n    const today = convertDateString(new Date());\n    const inThePast = dateStr < today;\n\n    if (shiftsOfDaySpotlight.length > 0) {\n      return (\n        <section>\n          { inThePast ? (<h5>Shift completed!</h5>) : null }\n          {showShifts(shiftsOfDaySpotlight)}\n        </section>\n      );\n    } else if (inThePast) {\n      return (<section>Nothing that day</section>);\n    } else if (shiftsOfDaySpotlight.length === 0 && availStatus === true) {\n      return (\n        <section>\n          <h3>No shifts scheduled</h3>\n          <button onClick={() => {toggleAvailCallback(false)}} className=\"btn btn-danger\">Take the day off</button>\n        </section>\n      );\n\n    } else if (shiftsOfDaySpotlight.length === 0 && availStatus === false) {\n      return (\n        <section>\n          <h3>You have the day off</h3>\n          <button onClick={() => {toggleAvailCallback(true)}} className=\"btn btn-success\">I'm free to work</button>\n        </section>\n      );\n    } \n  }\n\n  ////////////////////////////// render //////////////////////////////\n  return(\n\n    <section> \n      <Accordion>\n        <section>\n          <Accordion.Toggle eventKey=\"showToday\" className=\"accordion-toggle_button blue-bg\" >\n            <section className=\"section-3-col\">\n              <section>▼</section>\n              <section>TODAY: {formatDate(today)}</section>\n              <section>▼</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"showToday\">\n            <section>{showShifts(shiftsToday)}</section>\n          </Accordion.Collapse>\n\n        </section>\n      </Accordion>\n\n      <Accordion>\n        <section>\n          <Accordion.Toggle eventKey=\"showCalendarClick\" className=\"accordion-toggle_button blue-bg\" >\n            <section className=\"section-3-col\">\n              <section>▼</section>\n              <section>DAY SPOTLIGHT: {formatDate(dateStr)}</section>\n              <section>▼</section>\n            </section>\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey=\"showCalendarClick\">\n            <section>{showAgendaOrOptions()}</section>\n          </Accordion.Collapse>\n\n        </section>\n      </Accordion>\n\n    </section>\n  );\n  \n}\n\nexport default CalendarDay;\n\n","import React from 'react';\nimport { formatDate } from './Helpers';\n\nconst UnavailDays = ({sortedUnavails, freeToWorkCallback}) => {\n\n  const showUnavailsTable = () => {\n    return sortedUnavails.map(unavail => {\n      return(\n        <section key={unavail.id} className=\"employee-dash-unavails-table\">\n          <section>{formatDate(unavail.day_off)}</section>\n          <button onClick={()=>{freeToWorkCallback(unavail)}} className=\"btn btn-success\">I'm free to work</button>\n        </section>\n      );\n    })\n  }\n\n  return(\n    <section> \n      <h1 className=\"text-centered\">UNAVAILABLE DAYS</h1>\n      {showUnavailsTable()}\n    </section>\n  );\n  \n}\n\nexport default UnavailDays;\n\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { convertTimeString, formatDate, dateInThePast, getWeekday } from './Helpers';\n\nconst EmployeeDash_ShiftsTable = ({sortedOwnShifts, sortedUnstaffedShifts, sortedUnavails, takeShiftCallback, freeToWorkCallback}) => {\n\n  ////////////////// prelim work ////////////////////\n  // divide the sortedOwnShifts into active shifts (current & future) and past shifts\n  let ownActiveShifts = [];\n  let ownPastShifts = [];\n  let cloneAllOwnShifts = [...sortedOwnShifts];\n  \n  while (cloneAllOwnShifts[0]) {\n    if (dateInThePast(cloneAllOwnShifts[0].shift_date)) {\n      ownPastShifts.push(cloneAllOwnShifts.shift());\n    } else {\n      ownActiveShifts = [...cloneAllOwnShifts];\n      break;\n    }\n  }\n  \n  ////////////////// fcns ////////////////////\n  const showOwnShifts = (listOfShifts, customClassName) => {\n    return listOfShifts.map(shift => {\n      return (\n        <Accordion key={shift.id}>\n          <section>\n            <Accordion.Toggle eventKey=\"showInfo\" className={`accordion-toggle_button ${customClassName}`}>\n              <section className=\"section-4-col\">\n                <section>▼</section>\n                <section>{formatDate(shift.shift_date)}</section>\n                <section>{getWeekday(shift.shift_date)}</section>\n                <section>{shift.client.name}</section>\n              </section>\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey=\"showInfo\">\n              <section>{showWholeShiftCard(shift)}</section>\n            </Accordion.Collapse>\n\n          </section>\n        </Accordion>\n      )}\n    )\n  }\n\n  const showOwnActiveShifts = () => {\n    return showOwnShifts(ownActiveShifts, \"blue-bg\");\n  }\n\n  const showOwnPastShifts = () => {\n    return showOwnShifts(ownPastShifts, \"gray-bg\");\n  }\n\n  const showUnstaffedShifts = () => {\n    return(\n      <section>\n        {sortedUnstaffedShifts.map(shift => {\n          return (\n            <Accordion key={shift.id}>\n              <section>\n                <Accordion.Toggle eventKey=\"showInfo\" className={dateInThePast(shift.shift_date)? (\"accordion-toggle_button gray-bg\"):(\"accordion-toggle_button blue-bg\")}>\n                  <section className=\"section-4-col\">\n                    <section>▼</section>\n                    <section>{formatDate(shift.shift_date)}</section>\n                    <section>{getWeekday(shift.shift_date)}</section>\n                    <section>{shift.client.name}</section>\n                  </section>\n                </Accordion.Toggle>\n\n                <Accordion.Collapse eventKey=\"showInfo\">\n                  <section>{showWholeShiftCard(shift, true)}</section>\n                </Accordion.Collapse>\n\n              </section>\n            </Accordion>\n          )}\n        )}\n      </section>\n    );\n  }\n\n  const showWholeShiftCard = (shift, takeButton=false) => {\n    return (\n      <section>\n        <section className={dateInThePast(shift.shift_date)? (\"card-shift gray-bg\"):(\"card-shift blue-bg\")} >\n          <p>DATE</p>\n          <p>{shift.shift_date}</p>\n          <p>START</p>\n          <p>{convertTimeString(shift.start_time)}</p>\n          <p>END</p>\n          <p>{convertTimeString(shift.end_time)}</p>\n        </section>\n\n        <section className=\"card-client\">\n          <p>CLIENT</p>\n          { shift.client ? <p>{shift.client.name}</p> : <p></p> }\n          <p>PHONE</p>\n          { shift.client ? <p>{shift.client.phone}</p> : <p></p> }\n          <p>EMAIL</p>\n          { shift.client ? <p>{shift.client.email}</p> : <p></p> }\n          <p>ADDRESS</p>\n          { shift.client ? <p>{shift.client.address}</p> : <p></p> }\n        </section>\n\n        { takeButton ? showTakeShiftSection(shift) : null}\n\n      </section>\n    );\n  }\n\n  const isEmpBookedElsewhere = (possibleDate) => {\n    for (const shift of sortedOwnShifts) {\n      if (shift.shift_date > possibleDate) {\n        return false;\n      } else if (shift.shift_date === possibleDate) {\n        return true;\n      }\n    }  \n  } \n\n  const isEmpOffThatDay = (possibleDate) => {\n    for (const unavail of sortedUnavails) {\n      if (unavail.day_off > possibleDate) {\n        return false;\n      } else if (unavail.day_off === possibleDate) {\n        return true;\n      }\n    }  \n  } \n\n  const showTakeShiftSection = (shift) => {\n    const bookedElsewhere = isEmpBookedElsewhere(shift.shift_date);\n    const offThatDay = isEmpOffThatDay(shift.shift_date);\n    const cannotWork = bookedElsewhere || offThatDay;\n\n    if (cannotWork) {\n      if (bookedElsewhere) {\n        return (\n          <section className=\"gray-bg\">\n            <p>You are already working elsewhere that day!</p>\n            </section>\n        );\n      } else if (offThatDay) {\n        return (\n          <section className=\"gray-bg\">\n            <p>You have the day off but you can change your mind!</p>\n            {/* Clicking on this button will result in re-rendering this section as 'eligible for shift', user should see blue-bg w/ blue button b/c reeval'd cannot=false */}\n            <button onClick={() =>{removeUnavail(shift)}} className=\"btn btn-success\">Take the shift</button>\n            </section>\n        );\n      }\n      \n    } else {\n      return (\n        <section className=\"blue-bg\">\n          <p>You are eligible for this shift!</p>\n          <button onClick={() =>{takeShiftCallback(shift)}} className=\"btn btn-primary\">Take the shift</button>\n          </section>\n      );\n    }\n  }\n\n  const removeUnavail = (shift) => {\n    const unavailObj = sortedUnavails.find(unavail => unavail.day_off === shift.shift_date );\n    freeToWorkCallback(unavailObj);\n  }\n\n  ////////////////// render ////////////////////\n  if (!sortedOwnShifts) {\n    return (\n      <section>\n        <h1 className=\"text-centered\">MY SHIFTS</h1>\n        <p>Nothing yet...</p>\n        \n        <h1 className=\"text-centered\">AVAILABLE SHIFTS</h1>\n        {showUnstaffedShifts()}\n      </section>\n    );\n\n  } else {\n    return(\n      <section>\n        <h1 className=\"text-centered\">MY SHIFTS</h1>\n        {showOwnActiveShifts()}\n        <h1 className=\"text-centered\">AVAILABLE SHIFTS</h1>\n        {showUnstaffedShifts()}\n        <h1 className=\"text-centered\">PAST SHIFTS</h1>\n        {showOwnPastShifts()}\n      </section>\n    );\n  }    \n}\n\nexport default EmployeeDash_ShiftsTable;\n","import React from 'react';\nimport Calendar from 'react-calendar';\nimport CalendarDay from './EmployeeDash_CalendarDay';\nimport UnavailDays from './EmployeeDash_UnavailDays';\nimport LoginError from './LoginError';\nimport axios from 'axios';\nimport ShiftsTable from './EmployeeDash_ShiftsTable';\nimport { convertDateString, sortUnavailsByDate, sortShiftsByDate, convertToPST } from './Helpers';\n\n//https://www.hobo-web.co.uk/best-screen-size/  \n// 360x640\n// 1366 x 768\n// 1920x1080   \n\nexport default class EmployeeDash extends React.Component {\n\n  constructor() {\n    super()\n    const today = convertDateString(new Date())\n    this.state = {\n      EMP_DASH: process.env.REACT_APP_EMP_DASH+\"/\"+sessionStorage.getItem('databaseId'),\n      empInfo: [],\n      empUnavails: [],\n      empShifts: [],\n      daySpotlight: today,\n      shiftsToday: [],\n      shiftsOfDay: [],\n      availStatusOfDay: null,\n      show: 'calendar',\n      unstaffedShifts: []\n    }\n  }\n\n  getEmpInfo = () => axios.get(this.state.EMP_DASH);\n  getEmpShifts = () => axios.get(this.state.EMP_DASH+\"/shifts\");\n  getEmpUnavails = () => axios.get(this.state.EMP_DASH+\"/unavails\");\n  getUnstaffedShifts = () => axios.get(this.state.EMP_DASH+\"/unstaffedShifts\");\n  \n  componentDidMount() {\n    if (this.props.authenticatedRole !== \"EMPLOYEE\") {\n      console.log(\"\\n\\nYou are *NOT* an employee!!!!\");\n      return;\n    }\n\n    // initial loading of data from database\n    axios.all([\n      this.getEmpInfo(), \n      this.getEmpShifts(), \n      this.getEmpUnavails(),\n      this.getUnstaffedShifts()\n    ])\n      .then(axios.spread((...responses) => {\n        const empInfo = responses[0].data;\n        const empShifts = responses[1].data;\n        const empUnavails = responses[2].data;\n        const unstaffedShifts = responses[3].data;\n        \n        // meanwhile find out if there's any shifts to autoload for today's calendar\n        const today = convertDateString(new Date());\n        const shiftsToday = empShifts.filter( shift => shift.shift_date === today );\n        // also find out if need to autoload if today is a day off\n        const canWorkBool = this.canTheyWorkThisDay(today, shiftsToday, empUnavails);\n\n        this.setState({\n          empInfo: empInfo,\n          empShifts: empShifts,\n          empUnavails: empUnavails,\n          today: today,\n          shiftsToday: shiftsToday,\n          shiftsOfDay: shiftsToday,\n          availStatusOfDay: canWorkBool,\n          unstaffedShifts: unstaffedShifts\n        });\n        }))\n        .catch(errors => console.log(errors));\n  }\n  \n  ////////////////////// set DISPLAY choice //////////////////////\n  setShowCategory = (chosen) => this.setState({show: chosen});\n\n  showChosenCategory = () => {\n    const chosen = this.state.show;\n    \n    if (chosen === \"calendar\") {\n      return this.showCalendar();\n    } else if (chosen === \"shifts\") {\n      return this.showAllShifts();\n    } else if (chosen === \"unavails\") {\n      return this.showAllUnavails();\n    } else if (chosen === \"info\") {\n      return this.showAllInfo();\n    }\n  }\n\n  ////////////////////// DISPLAY: own info tab //////////////////////\n  showAllInfo = () => {\n    const info = this.state.empInfo;\n    \n    return(\n      <section>   \n        <form>\n          <fieldset>\n            <div className=\"form-group\">\n              <label>Name</label>\n              <input type=\"text\" className=\"form-control\" placeholder={info.name}/>\n              <label>Address</label>\n              <input type=\"text\" className=\"form-control\" placeholder={info.address}/>\n              <label>Phone</label>\n              <input type=\"text\" className=\"form-control\" placeholder={info.phone}/>\n              <label>Email</label>\n              <input type=\"text\" className=\"form-control\" placeholder={info.email}/>\n            </div>\n            <button onClick={this.update} className=\"btn btn-primary\">READ ONLY FOR NOW (updates planned for future release)</button>\n          </fieldset>\n        </form>\n      </section>\n    );\n  }\n\n  update = (e) => {\n    e.preventDefault();\n  }\n\n  ////////////////////// DISPLAY: shifts tab //////////////////////\n  showAllShifts = () => {\n    const sortedOwnShifts = sortShiftsByDate(this.state.empShifts);\n    const sortedUnavails = sortUnavailsByDate(this.state.empUnavails);\n    const allSortedUnstaffedShifts = sortShiftsByDate(this.state.unstaffedShifts);\n    \n    let sortedUnstaffedShifts = allSortedUnstaffedShifts.filter( unstaffed => {\n      // Emp does NOT need to see...  1. unstaffed shifts that are in the past\n      const today = convertDateString(new Date());\n      if (unstaffed.shift_date < today) return false;\n\n      // 2. unstaffed shifts that coincide with their own booked days\n      for (const ownShift of sortedOwnShifts) {\n        if (unstaffed.shift_date === ownShift.shift_date) return false;\n        if (unstaffed.shift_date < ownShift.shift_date) break;\n      }\n\n      // if this unstaffed shift hasn't been disqualified by now, then employee can see it\n      return true;\n    })\n\n    return (<ShiftsTable sortedOwnShifts={sortedOwnShifts} sortedUnstaffedShifts={sortedUnstaffedShifts} sortedUnavails={sortedUnavails} freeToWorkCallback={this.freeToWork} takeShiftCallback={this.takeShift}/>);\n  }\n\n  ////////////////////// DISPLAY: own unavails tab //////////////////////\n  showAllUnavails = () => {\n    const empUnavails = this.state.empUnavails;\n    const sortedUnavails = sortUnavailsByDate(empUnavails);\n\n    if (empUnavails.length === 0) {\n      return (\n        <section>No upcoming unavailable days</section>\n      );\n    } else {\n      return(\n      <section>\n        <UnavailDays sortedUnavails={sortedUnavails} freeToWorkCallback={this.freeToWork}/>\n      </section>\n    );\n    }\n  }\n  \n  ////////////////////// DISPLAY: calendar tab //////////////////////\n  showCalendar = () => {\n    return (\n      <section>\n        <Calendar onChange={this.updateStateForCalendarDay} value={convertToPST(this.state.daySpotlight)}/>\n        <CalendarDay toggleAvailCallback={this.toggleAvail} today={this.state.today} shiftsToday={this.state.shiftsToday} shiftsOfDaySpotlight={this.state.shiftsOfDay} dateStr={this.state.daySpotlight} availStatus={this.state.availStatusOfDay}/>\n      </section>\n    );\n  }\n\n  updateStateForCalendarDay = (e) => {\n    const dateStr = convertDateString(e);\n\n    const shiftsOfDay = this.state.empShifts.filter( shift => shift.shift_date === dateStr);\n    const canWorkBool = this.canTheyWorkThisDay(dateStr, shiftsOfDay, this.state.empUnavails);\n    this.setState({ \n      daySpotlight: dateStr, \n      shiftsOfDay: shiftsOfDay, \n      availStatusOfDay: canWorkBool })\n  }\n\n  canTheyWorkThisDay = (dateStr, shiftsOfThatDay, unavails_list) => {\n    // are you already working today?\n    if (shiftsOfThatDay.length > 0) {\n      return false;\n    }\n    // do u have today off?\n    for (const unavail of unavails_list) {\n      if (unavail.day_off === dateStr) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  ////////////////////// Callback fcns & related helpers //////////////////////\n  freeToWork = (unavailObj) => {\n    console.log(\"so you want to work after all..., delete unavailObj\", unavailObj);\n    axios.delete(this.state.EMP_DASH + `/unavails/${unavailObj.id}`)\n      .then( response => {\n        // quick update on front end to match db\n        // response.data is the latest data from Unavails table in db for this employee\n        this.setState({ empUnavails: response.data, availStatusOfDay: true });\n      })  \n      .catch(error => console.log(\"ERROR deleting from db: \", error.message));\n  }\n\n  toggleAvail = (availBoolean) => {\n    let latestEmpUnavails = [...this.state.empUnavails];\n\n    if (availBoolean) {\n      // emp wants to work -> delete row from unavails table in db\n      // find id from this.state.empUnavails\n      const unavailObj = this.state.empUnavails.find( unavail => unavail.day_off === this.state.daySpotlight );\n      this.freeToWork(unavailObj);\n\n    } else {\n      // emp wants day off -> post/add to unavails table in db\n      axios.post((this.state.EMP_DASH + `/unavails`), { day_off: this.state.daySpotlight })\n      .then( response => {\n        // quick update on front end to match db\n        latestEmpUnavails.push( response.data );\n        this.setState({ empUnavails: latestEmpUnavails, availStatusOfDay: false });\n      } )   \n      .catch(error => console.log(\"ERROR adding to db: \", error.message));\n    }\n  }\n\n  takeShift = (shift) => {\n    console.log(\"\\nSEND API FOR\", shift);\n    \n    const URL_endpoint = this.state.EMP_DASH+`/shifts/${shift.id}`;\n\n    axios.put(URL_endpoint)\n    .then(response => {\n      // api sending back current list of emp's shifts\n      this.setState({ empShifts: response.data })\n      // need to update state unstaffedShifts[] as well, b/c now we took one out\n      this.updateLatestUnstaffedShifts();\n    })\n    .catch(error => console.log(error.message));\n  }\n\n  updateLatestUnstaffedShifts = () => { \n    axios.get(this.state.EMP_DASH+\"/unstaffedShifts\")\n    .then( response => this.setState({ unstaffedShifts: response.data}))\n    .catch(error => console.log(error.message));\n  }\n  \n  ////////////////////// render //////////////////////\n  render() {\n\n      return (\n        <section>\n\n          <ul className=\"nav nav-tabs\">\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('calendar')}>CALENDAR</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('shifts')}>SHIFTS</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('unavails')}>UNAVAILABLE DAYS</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link active\" onClick={()=>this.setShowCategory('info')}>INFO</button>\n            </li>\n          </ul>\n\n          {this.props.authenticatedRole === \"EMPLOYEE\" ? this.showChosenCategory() : <LoginError message=\"Please log in to see EMPLOYEE dashboard\"/>}  \n\n        </section>\n      );\n    }\n}\n\n","import React from 'react';\nimport LoginError from './LoginError';\n\nexport default function LinkTextedToEmployee({match}) {\n    \n    return (\n      <section className=\"homepage-section\">\n    NO NEED TO LOG IN, the UUID in the URL is verification enough b/c it's user's phone<br/>\n    you'll either see... 1. Confirmation screen, or 2. Sorry shift is taken<br/><br/>\n\n    We received UUID = {match.params.uuid}<br/>\n\n    <h1>LOGIC FLOW</h1>\n    1. client clicking on this link, will send api call to backend and check to see if \n    shift obj still exists in Texts db. <br/><br/>\n    2A. If yes, then see confirmation screen <br/>\n      ...2A1. Once emp clicks on confirm button, send API call to backend,<br/>\n      ...2A2. add that emp obj to the shift obj,<br/>\n      ...2A3. delete all rows in Texts that belong to that shift obj<br/><br/>\n    2B. If no, then see shift taken screen <br />\n  </section>\n    );\n  \n  \n}\n","import React from 'react';\nimport twoPeople from '../images/twopeople.svg';\n\nexport default function Homepage() {\n  const sessionRole = sessionStorage.getItem('authenticatedRole');\n  console.log(\"sessionRole = \", sessionRole);\n\n  return (\n    <section className=\"homepage-section text-centered\">\n      <img src={twoPeople} alt=\"2 people\" className=\"homepage-logo\"/>\n    </section>\n  );\n}\n\n/// NOoooooo!!! cuz they wont' be able to see actual homepage at all!!! thsi just replaces homepage w/ their dash\n// const showCorrectStarterPage = () => {\n//   if (sessionRole === \"ADMIN\") {\n//     console.log(\"going straight to ADMIN dash \");\n//     return (<section>ADMIN DASH HERE OK</section>);\n\n//   } else if (sessionRole === \"EMPLOYEE\") {\n//     console.log(\"going straight to EMPLOYEE dash \");\n//     return (<section>EMP DASH HERE OK</section>);\n\n//   } else {\n//     return (\n//       <section className=\"homepage-section text-centered\">\n//         <img src={twoPeople} alt=\"2 people\" className=\"homepage-logo\"/>\n//       </section>\n//     );\n//   }\n// }\n","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LoginBanner from './LoginBanner';\nimport Footer from './components/Footer';\nimport AdminDash from './components/AdminDash';\nimport EmployeeDash from './components/EmployeeDash';\n\nimport LinkTextedToEmployee from './components/Employee_TextedLink';\n\nimport {} from './components/Helpers';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport Homepage from './components/Homepage';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      authenticatedRole: \"\",       // TEMPORARY\n      googleId: \"\",\n      username: \"\",// TEMPORARY\n      databaseId: \"\"\n    }\n    sessionStorage.setItem('authenticatedRole', '');   // TEMPORARY\n    sessionStorage.setItem('googleId', '');\n    sessionStorage.setItem('username', '');    // TEMPORARY\n    sessionStorage.setItem('databaseId', '');\n  }\n\n  login = (googleId) => {\n    const endpoint = process.env.REACT_APP_LOGIN + \"/\" + googleId;\n\n    axios.get(endpoint)\n      .then(response => {\n        if (Object.entries(response.data).length === 0) {\n          console.log(\"NOT IN OUR DB!!! \");\n          sessionStorage.setItem('authenticatedRole', \"NEED UUID\");\n          this.setState({ authenticatedRole: \"NEED UUID\" });\n        }\n        const authenticatedRoleDB = Object.keys(response.data)[0];\n        const usernameDB = Object.values(response.data)[0].name;\n        const databaseId = Object.values(response.data)[0].id;\n\n        sessionStorage.setItem('authenticatedRole', authenticatedRoleDB);\n        sessionStorage.setItem('username', usernameDB);\n        sessionStorage.setItem('googleId', googleId);\n        sessionStorage.setItem('databaseId', databaseId);\n\n        this.setState({\n          authenticatedRole: authenticatedRoleDB,\n          googleId: googleId,\n          username: usernameDB,\n          databaseId: databaseId      \n        })\n\n        \n      })\n      .catch(error => console.log(\"LOGIN ERROR!\", error.message));\n  }\n\n  logout = () => {\n    console.log(\"LOG OUT! send toaster pop up!\");\n    this.setState({\n      authenticatedRole: \"\",  \n      googleId: \"\",\n      username: \"\",\n      databaseId: \"\"\n    })\n    sessionStorage.clear();\n  }\n\n  render() {\n    const role = this.state.authenticatedRole;\n    const username = this.state.username;\n    const googleId = this.state.googleId;\n    const databaseId = this.state.databaseId;\n\n    return (\n      \n      <Router>\n        <LoginBanner authenticatedRole={this.state.authenticatedRole} googleAuthCB={this.login} logoutCB={this.logout}/>\n        \n        {role === \"ADMIN\" ? (<Redirect to=\"/adminDash\" component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />): null}\n        {role === \"EMPLOYEE\" ? (<Redirect to=\"/employeeDash\" component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />): null}\n  \n          <Switch>   \n            {/* Displays only 1 of these components based on on what the URL is */}\n            <Route path=\"/\" exact component={Homepage}/>    \n            <Route path=\"/adminDash\" component={() => <AdminDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />\n            <Route path=\"/employeeDash\" exact component={() => <EmployeeDash authenticatedRole={role} username={username} googleId={googleId} databaseId={databaseId}/>} />\n            \n            \n            {/* this route is problematic b/c login redirects will never let u see this page... i dont' want to give up either one! */}\n            {/* <Route path=\"/employeeDash/:id/text/:shiftId\"  component={LinkTextedToEmployee} /> */}\n            \n            {/* WHAT IF... I use a UUID instead? that way you don't have to log in? just say yes or no*/}\n            <Route path=\"/text/:uuid\"  component={LinkTextedToEmployee} />\n\n          </Switch>\n\n          <Footer />\n      </Router>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/redCrossFlag.e167e2a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/SPPbanner2.596567f0.png\";","module.exports = __webpack_public_path__ + \"static/media/blackLock.4b4a29b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/twopeople.65b701d4.svg\";"],"sourceRoot":""}